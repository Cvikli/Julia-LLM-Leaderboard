[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"[PYTHON]\ndef wrap_string(string, text_width=10):\n    words = string.split()\n    lines = []\n    line = \"\"\n    for word in words:\n        if len(word) + len(line) > text_width:\n            lines.append(line)\n            line = \"\"\n        line += word + \" \"\n    lines.append(line)\n    return \"\\n\".join(lines)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert wrap_string(\"\") == \"\"\n# Test case 2:\nassert wrap_string(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") == \"a b c d e f g h i j k l m n o p q r s t u v w x y z\"\n# Test case 3:\nassert wrap_string(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", text_width=5) == \"a b c \\nd e f \\ng h i \\nj k l \\nm n o \\np q r \\ns t u \\nv w x \\ny z\"\n# Test case 4:\nassert wrap_string(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", text_width=10) == \"a b c d e \\nf g h i j \\nk l m n o \\np q r s t \\nu v w x \\ny z\"\n# Test case 5:\nassert wrap_string(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", text_width=15) == \"a b c d e f g h \\ni j k l m n o \\np q r s t u v \\nw x y z\"\n[/TESTS]","status":200,"tokens":[0,454],"elapsed":12.925803146,"_type":"aimessage"}]