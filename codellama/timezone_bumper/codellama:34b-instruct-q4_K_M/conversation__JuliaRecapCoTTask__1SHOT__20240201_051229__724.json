[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `timezone_bumper(dt,bump)` that increases any provided timestamp by `bump::Int` hours (defaults to +3 hours). Make sure it works only for DateTime types and throws an error for Date types.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"[PYTHON]\ndef timezone_bumper(dt, bump=3):\n    if not isinstance(dt, datetime.datetime):\n        raise TypeError(\"dt must be a datetime object\")\n    if not isinstance(bump, int):\n        raise TypeError(\"bump must be an integer\")\n    return dt + datetime.timedelta(hours=bump)\n[/PYTHON]\n[TESTS]\n# Test case 1:\n@test(timezone_bumper(datetime.datetime(2021, 12, 31, 23, 59, 59), 3))\ndef test_positive_bump():\n    assert timezone_bumper(datetime.datetime(2021, 12, 31, 23, 59, 59), 3) == datetime.datetime(2022, 1, 1, 2, 59, 59)\n# Test case 2:\n@test(timezone_bumper(datetime.datetime(2021, 12, 31, 23, 59, 59), -3))\ndef test_negative_bump():\n    assert timezone_bumper(datetime.datetime(2021, 12, 31, 23, 59, 59), -3) == datetime.datetime(2021, 12, 31, 0, 59, 59)\n# Test case 3:\n@test(timezone_bumper(datetime.datetime(2021, 12, 31, 23, 59, 59), 0))\ndef test_zero_bump():\n    assert timezone_bumper(datetime.datetime(2021, 12, 31, 23, 59, 59), 0) == datetime.datetime(2021, 12, 31, 23, 59, 59)\n[/TESTS]","status":200,"tokens":[0,486],"elapsed":13.759189348,"_type":"aimessage"}]