[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```\nusing Statistics\n\ntemps = [20.5, 19.8, 18.3, 21.1, 24.7, 26.4, 25.9, 23.8, 21.9, 19.1]\n\nfunction weather_data_analyzer(temps)\n    # perform statistical analyses on the temperature data\n    if isempty(temps)\n        return (; average=nothing, max=nothing, min=nothing, trend=nothing)\n    end\n    stats = (; average=mean(temps), max=maximum(temps), min=minimum(temps), trend=trend_detector(temps))\n    return stats\nend\n\nfunction trend_detector(temps)\n    # detect the trend in the temperature data\n    if length(temps) < 3\n        return :stable\n    end\n    slopes = [ temps[i+1] - temps[i] for i in 1:length(temps)-1 ]\n    if all(slopes .> 0)\n        return :increasing\n    elseif all(slopes .< 0)\n        return :decreasing\n    else\n        return :stable\n    end\nend\n```","status":200,"tokens":[0,295],"elapsed":8.374337475,"_type":"aimessage"}]