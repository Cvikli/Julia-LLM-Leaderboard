[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"[PYTHON]\nusing Statistics\n\ntemps = [10, 20, 30, 40, 50]\n\nfunction weather_data_analyzer(temps)\n    if isempty(temps)\n        return (; :average => nothing, :max => nothing, :min => nothing, :trend => nothing)\n    end\n\n    average = mean(temps)\n    max = maximum(temps)\n    min = minimum(temps)\n\n    trend = :stable\n    if length(temps) > 1\n        trend_values = []\n        for i in 2:length(temps)\n            push!(trend_values, temps[i] - temps[i-1])\n        end\n        trend = if all(x -> x > 0, trend_values)\n            :increasing\n        elseif all(x -> x < 0, trend_values)\n            :decreasing\n        else\n            :stable\n        end\n    end\n\n    return (; :average => average, :max => max, :min => min, :trend => trend)\nend\n\nresult = weather_data_analyzer(temps)\nprintln(result)\n[/PYTHON]\n[TESTS]\n# Test case 1:\n@assert weather_data_analyzer([]) == (; :average => nothing, :max => nothing, :min => nothing, :trend => nothing)\n# Test case 2:\n@assert weather_data_analyzer([10]) == (; :average => 10.0, :max => 10, :min => 10, :trend => :stable)\n# Test case 3:\n@assert weather_data_analyzer([10, 20, 30, 40, 50]) == (; :average => 30.0, :max => 50, :min => 10, :trend => :increasing)\n# Test case 4:\n@assert weather_data_analyzer([10, 20, 30, 40, 50, 60]) == (; :average => 35.0, :max => 60, :min => 10, :trend => :increasing)\n# Test case 5:\n@assert weather_data_analyzer([10, 20, 30, 40, 50, 40]) == (; :average => 30.0, :max => 50, :min => 10, :trend => :decreasing)\n[/TESTS]","status":200,"tokens":[0,621],"elapsed":17.545229627,"_type":"aimessage"}]