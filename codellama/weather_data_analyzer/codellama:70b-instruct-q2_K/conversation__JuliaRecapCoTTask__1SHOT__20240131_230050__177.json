[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"1. Import the `Statistics` package at the beginning of your code:\n```julia\nusing Statistics\n```\n2. Define a function named `weather_data_analyzer`. It takes a list of temperature data as input, and returns a named tuple with results for average, max, min temperatures, and trend. If the list is empty, it should return a named tuple with all values set to nothing.\n3. To compute the average, maximum, and minimum temperatures, use the `mean`, `maximum`, and `minimum` functions from the Statistics package. These functions work on any iterable collection of numbers, including an array.\n4. For trend analysis, sort the list of temperatures in ascending order using the `sort!` function. If the first element is greater than the last one, it's a decreasing trend; if they're equal, it's a stable trend; otherwise, it's an increasing trend. Use the `>` and `==` operators for comparisons.\n5. Return a named tuple with keys: average, max, min, and trend. The value of trend should be one of the three options: :increasing, :decreasing, or :stable. If the list is empty, set all values to nothing.\n6. Wrap everything in an `if` statement checking if `length(temps)` is zero. In that case, return a named tuple with all values set to nothing. Otherwise, compute and return the results as described above.\n7. Make sure you're using semicolons to separate key-value pairs when creating your named tuples (e.g., `(; average=mean(temps), max=maximum(temps), ...)`).","status":200,"tokens":[19,382],"elapsed":16.068154868,"_type":"aimessage"}]