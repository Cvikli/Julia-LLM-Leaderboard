[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps::Vector{Number})\n    if length(temps) == 0\n        return (; average=nothing, max=nothing, min=nothing, trend=nothing)\n    end\n\n    mean_temp = mean(temps)\n    max_temp = maximum(temps)\n    min_temp = minimum(temps)\n\n    # Calculate temperature trend using first-order difference method\n    diffs = temps[2:end] - temps[1:(end-1)]  # This is a vector of differences\n    is_increasing = all(diffs .>= 0)\n    is_decreasing = all(diffs .<= 0)\n    is_stable = !(is_increasing || is_decreasing)\n\n    trend = ifelse(is_increasing, :increasing,\n                   ifelse(is_decreasing, :decreasing, :stable))\n\n    return (; average=mean_temp, max=max_temp, min=min_temp, trend=trend)\nend\n```\n\nThis function takes a vector of `Number`s as input and returns a named tuple with the average, maximum, minimum temperatures, and a trend indicator. If the list is empty, it returns a named tuple with all values set to `nothing`. The trend is determined using the first-order difference method, where a positive (or negative) difference for all elements indicates an increasing (or decreasing) trend, and a mix of signs indicates a stable trend.","status":200,"tokens":[0,345],"elapsed":11.4387398,"_type":"aimessage"}]