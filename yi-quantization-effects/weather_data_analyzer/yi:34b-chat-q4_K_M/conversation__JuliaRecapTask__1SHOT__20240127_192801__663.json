[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps::Vector{Number})\n    n = length(temps)\n    if n > 0\n        mean_temp = mean(temps)\n        max_temp = maximum(temps)\n        min_temp = minimum(temps)\n        # Calculate trend using moving average. For simplicity, use a window size of 3\n        moving_avg = [mean([temps[i], temps[i+1], temps[i+2]]) for i in 2:n-1]\n        trend = if length(moving_avg) > 0\n            prev_val = moving_avg[1]\n            for val in moving_avg[2:end]\n                if val > prev_val\n                    prev_val = val\n                    trend == :increasing\n                elseif val < prev_val\n                    prev_val = val\n                    trend == :decreasing\n                else\n                    trend == :stable\n                end\n            end\n        else\n            :undefined\n        end\n        return (average=mean_temp, max=max_temp, min=min_temp, trend=trend)\n    else\n        return (average=nothing, max=nothing, min=nothing, trend=nothing)\n    end\nend\n```\n\nThis function `weather_data_analyzer` takes a vector of temperatures (`temps`) and returns a named tuple with the average, maximum, minimum, and trend. The trend is determined by calculating the moving average over a window size of 3 and checking for an increasing, decreasing, or stable pattern. If the list is empty, it returns `nothing` for all values.","status":200,"tokens":[467,380],"elapsed":11.246703835,"_type":"aimessage"}]