[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"If you have any special instructions for this task, please provide them in the `Special Instructions` section above. If there are no special instructions, I will proceed with the general problem-solving steps outlined below:\n\n### Recall Julia Snippets\n```julia\n# Example Temperature Data\ntemps = [10, 20, 30] # Assuming this is a list of daily temperature data\n\n# Import Statistics Package for Calculations\nusing Statistics\n\n# Function to Analyze Weather Data\nfunction weather_data_analyzer(temps::Vector{Number})\n    if isempty(temps)\n        return (; average=nothing, max=nothing, min=nothing, trend=nothing)\n    end\n\n    average = mean(temps)\n    max_temp = maximum(temps)\n    min_temp = minimum(temps)\n\n    # Determine Trend Using Simple Slope Calculation (For Instructional Purposes)\n    n = length(temps)\n    diffs = temps[2:end] .- temps[1:(end - 1)]  # Calculate differences\n    slope = sum(diffs) / n\n    trend = if slope > 0\n        :increasing\n    elseif slope < 0\n        :decreasing\n    else\n        :stable\n    end\n\n    return (; average, max=max_temp, min=min_temp, trend)\nend\n```\n\n### Solve the Task\nDefine a function `weather_data_analyzer` that calculates the average, maximum, and minimum temperatures from the given list of daily temperature data. Additionally, determine if the temperatures are increasing, decreasing, or stable based on a simple slope calculation. If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n### Double-check that the Solution is Correct\nCheck the function definition for any syntax errors or inconsistencies with the problem statement. Ensure that the function handles edge cases (like an empty list) gracefully and that the trend determination logic is correct.","status":200,"tokens":[0,453],"elapsed":14.67103662,"_type":"aimessage"}]