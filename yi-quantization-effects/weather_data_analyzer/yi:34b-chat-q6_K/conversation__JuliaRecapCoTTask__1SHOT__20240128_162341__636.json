[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"If you have any special instructions, please provide them here and I will update the solution accordingly. If there are no special instructions, then the following function should fulfill the task:\n\n```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps::Vector{Number})\n    if isempty(temps)\n        return (average = nothing, max = nothing, min = nothing, trend = nothing)\n    end\n\n    mean_temp = mean(temps)\n    max_temp = maximum(temps)\n    min_temp = minimum(temps)\n    trend = if mean_temp > 0 && abs(mean_temp - max_temp) < 1e-6\n        :increasing\n    elseif mean_temp < 0 && abs(mean_temp - min_temp) < 1e-6\n        :decreasing\n    else\n        :stable\n    end\n\n    return (average = mean_temp, max = max_temp, min = min_temp, trend = trend)\nend\n```\n\nThis function uses the `Statistics` standard library to calculate the average (`mean`), maximum (`maximum`), and minimum (`minimum`) temperatures. For the trend analysis, it checks if the average temperature is close to the maximum or minimum temperature (within a small numerical tolerance of 1e-6) to determine if the data shows an increasing, decreasing, or stable trend. If the average temperature is within 1e-6 of the maximum temperature, it's considered an increasing trend, and vice versa for a decreasing trend. If there's no clear increase or decrease (the average is between the max and min without being close to either), the trend is labeled as stable.\n\nIf the list `temps` is empty, the function returns a named tuple with all values set to `nothing`. This is a Julia convention for indicating that a value is missing or not applicable.\n\nPlease provide your special instructions if they differ from the general approach outlined above.","status":200,"tokens":[11,434],"elapsed":16.438234951,"_type":"aimessage"}]