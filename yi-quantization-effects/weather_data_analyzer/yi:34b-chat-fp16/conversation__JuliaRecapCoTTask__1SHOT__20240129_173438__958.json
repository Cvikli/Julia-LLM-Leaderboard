[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"# Julia Snippets\n\n```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps)\n    if isempty(temps)\n        return (; average=nothing, max=nothing, min=nothing, trend=nothing)\n    end\n    mean_temp = mean(temps)\n    max_temp = maximum(temps)\n    min_temp = minimum(temps)\n    if std(temps) == 0 || (std(temps) / length(temps)) < 1e-6 # very small standard deviation, consider stable\n        trend = :stable\n    elseif mean_temp > min_temp && mean_temp < max_temp # no clear trend\n        trend = :stable\n    elseif mean_temp > max_temp || mean_temp < min_temp # strong increasing or decreasing trend\n        trend = (mean_temp > max_temp) ? :increasing : :decreasing\n    end\n    return (; average=mean_temp, max=max_temp, min=min_temp, trend=trend)\nend\n```\n\n# Solution\n\nThe `weather_data_analyzer` function above uses the `Statistics` package to calculate the mean, maximum, and minimum temperatures. It also determines the trend in the temperature data by examining the standard deviation relative to the length of the dataset. If the standard deviation is very small compared to the number of elements in the dataset, it's considered a stable trend; otherwise, if the mean is significantly different from the maximum or minimum, an increasing or decreasing trend is declared.\n\n# Double-check\n\nThe function checks for an empty list and returns `nothing` for all values when no data is provided. It uses appropriate statistical functions to calculate the average, maximum, and minimum temperatures. The trend determination is based on a heuristic that considers small standard deviation as indicative of stability and compares the mean with the extremes to determine if there's a clear increasing or decreasing trend.","status":200,"tokens":[0,431],"elapsed":33.744716913,"_type":"aimessage"}]