[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps::Vector{Number})\n    if isempty(temps)\n        return (; average=nothing, max=nothing, min=nothing, trend=nothing)\n    end\n\n    average = mean(temps)\n    max = maximum(temps)\n    min = minimum(temps)\n    diff_prev_next = sort([t - tp for t, tp in zip(temps, temps[1:end-1])])[end]\n\n    trend = if diff_prev_next > 0\n        :increasing\n    elseif diff_prev_next < 0\n        :decreasing\n    else\n        :stable\n    end\n\n    return (; average=average, max=max, min=min, trend=trend)\nend\n```\n\nThis function first checks if the list of temperatures is empty. If it is, it returns a named tuple with all fields set to `nothing`. If there are temperature data points, it calculates the average, maximum, and minimum temperatures using functions from the standard `Statistics` package. To determine the trend, it finds the difference between each temperature and its previous value (discarding the first value as it doesn't have a preceding element), then checks if the last difference is positive, negative, or zero to determine if the temperature data is increasing, decreasing, or stable respectively.","status":200,"tokens":[467,314],"elapsed":8.76803316,"_type":"aimessage"}]