[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `keep_only_names` which iterates over the provided list of words (`words`) and removes all words that do not start with a capital letter (eg, remove \"dog\" but keep \"Dog\").\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction keep_only_names(words::Vector{String})::Vector{String}\n    uppercase_first = [word[1] == uppercase(word[1]) ? word : \"\" for word in words]\n    return unique(uppercase_first)\nend\n```\n\nExplanation:\n- We create a new vector `uppercase_first` where each element is the original word with its first letter capitalized if necessary.\n- Then we use `unique` to remove any duplicate capitalized words, ensuring that each distinct name starting with a capital letter is preserved.\n\nDouble-check:\n- The function takes a list of strings as input.\n- It modifies the list by replacing each word with an uppercased version of its first letter if necessary.\n- Duplicate names are removed using `unique`, ensuring that only unique names are kept.\n- The function returns a vector of strings, which is consistent with the type of the input argument `words`.","status":200,"tokens":[0,217],"elapsed":5.809681625,"_type":"aimessage"}]