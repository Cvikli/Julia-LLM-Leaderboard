[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `timezone_bumper(dt,bump)` that increases any provided timestamp by `bump::Int` hours (defaults to +3 hours). Make sure it works only for DateTime types and throws an error for Date types.\n\n\n\n# Data\n\ntimezone_bumper(DateTime(2023, 4, 10, 12, 0),3)","variables":["task","data"],"_type":"usermessage"},{"content":"```julia\nfunction timezone_bumper(dt::DateTime, bump::Int=3)\n    if !isdate(dt)\n        throw(ArgumentError(\"timezone_bumper can only handle DateTime types, not Date types.\"))\n    end\n    return dt + Duration(bump, Unitful.Hour)\nend\n```\n\n# Testing\n\n```julia\nusing Test\n\n@testset \"Timezone Bumper Function\" begin\n    @test timezone_bumper(DateTime(2023, 4, 10, 12, 0)) == DateTime(2023, 4, 10, 15, 0)\n    @test timezone_bumper(DateTime(2023, 4, 10, 12, 0), 6) == DateTime(2023, 4, 10, 18, 0)\n    # Ensure it handles negative bumps\n    @test timezone_bumper(DateTime(2023, 4, 10, 12, 0), -6) == DateTime(2023, 4, 9, 18, 0)\n    # Ensure it works with default bump of +3 hours\n    @test timezone_bumper(DateTime(2023, 4, 10, 12, 0)) == timezone_bumper(DateTime(2023, 4, 10, 12, 0), 3)\nend\n```","status":200,"tokens":[0,360],"elapsed":16.224887279,"_type":"aimessage"}]