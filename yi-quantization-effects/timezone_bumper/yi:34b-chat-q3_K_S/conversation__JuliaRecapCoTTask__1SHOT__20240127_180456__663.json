[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `timezone_bumper(dt,bump)` that increases any provided timestamp by `bump::Int` hours (defaults to +3 hours). Make sure it works only for DateTime types and throws an error for Date types.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction timezone_bumper(dt::DateTime, bump::Int = 3)\n    hour = Dates.hour(dt) + bump\n    minute = Dates.minute(dt) % 60\n    second = Dates.second(dt) % 60\n    millisecond = Dates.millisecond(dt) % 1_000\n    return DateTime(Dates.day(dt), Dates.month(dt), Dates.year(dt), hour, minute, second, millisecond)\nend\n\nfunction timezone_bumper(dt::Date, bump::Int = 3)\n    throw(ArgumentError(\"Cannot increase Date by hours, use DateTime instead.\"))\nend\n```\n\nThe function `timezone_bumper` takes a `DateTime` object as its first argument and bumps the hour of that timestamp by `bump` hours. If no `bump` is provided, it defaults to +3 hours. The second argument `bump` can be any integer.\n\nFor convenience, the function also handles the case when only a `Date` object is passed, throwing an appropriate error message instructing the user to use a `DateTime` instead.","status":200,"tokens":[0,272],"elapsed":7.333531568,"_type":"aimessage"}]