[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `timezone_bumper(dt,bump)` that increases any provided timestamp by `bump::Int` hours (defaults to +3 hours). Make sure it works only for DateTime types and throws an error for Date types.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction timezone_bumper(dt::DateTime, bump::Int = 3)\n    if typeof(bump) <: AbstractString && (isempty(bump) || occursin(':', bump))\n        throw(ArgumentError(\"bump must be an integer number of hours, not a string or time specification\"))\n    end\n    if !(bump >= 0)\n        throw(DomainError(bump, \"bump must be greater than or equal to zero\"))\n    end\n    utc_offset = Dates.UTInstant(Dates.timestamp(dt)) - dt\n    return dt + bump * (3600 * utc_offset)\nend\n\n# Error handling for Date types\ntimezone_bumper(date::Date, bump::Int = 3) = error(\"Cannot adjust a Date by time zone; use DateTime instead\")\n```\n\nThis function `timezone_bumper` takes a `DateTime` object and increases it by the specified number of hours. If no explicit `bump` is given, it defaults to +3 hours. It also handles the case where `bump` is passed as a string or if it's not greater than or equal to zero.\n\nFor `Date` types, an error is thrown because `timezone_bumper` can only work with `DateTime` objects that have an associated time zone offset.","status":200,"tokens":[0,315],"elapsed":8.643291513,"_type":"aimessage"}]