[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString, text_width::Int = 10)\n    lines = []\n    current_line = \"\"\n    for word in split(text)\n        if length(current_line * word) > text_width\n            push!(lines, current_line)\n            current_line = word\n        else\n            current_line *= \" \" * word\n        end\n    end\n    push!(lines, current_line)\n    return join(lines, \"\\n\")\nend\n```\n\nExample usage:\n\n```julia\ntext = \"Hello World this is a long string that I want to wrap into multiple lines.\"\nwrapped_text = wrap_string(text)\nprintln(wrapped_text)\n# Output should look like:\n# Hello World\n# this is a long\n# string that I\n# want to wrap\n# into multiple\n# lines.\n```\n\nThis function works by iterating over each word in the text and appending it to the current line. If the length of the current line plus the length of the word exceeds the specified `text_width`, a new line is started. The `split` function is used to split the text into words, and `length(current_line * word)` calculates the total length of the current line with the next word appended. If this total length exceeds `text_width`, a new line is created and the process repeats until all words have been processed. The final result is a string with each line no longer than `text_width` characters.","status":200,"tokens":[0,351],"elapsed":9.809444348,"_type":"aimessage"}]