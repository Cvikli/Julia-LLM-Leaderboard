[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString, text_width::Int = 10)\n    lines = Vector{SubString{String}}(undef, 0)  # Initialize an empty vector of strings to store the wrapped lines\n    current_line = \"\"                           # Start with an empty current line\n    for word in split(text)                      # Iterate over words in the text\n        if length(word) + length(current_line) > text_width  # If adding the current word would exceed the text width\n            push!(lines, current_line)               # Add the current line to the list of lines\n            current_line = \"\"                       # Reset the current line\n        end\n        current_line *= \" \" * word             # Append the word to the current line\n    end\n    if length(current_line) > 0                 # If there is a non-empty current line, add it as the last line\n        push!(lines, current_line)\n    end\n    return lines\nend\n\n# Example usage:\ntext = \"Hello world. This is a very long sentence that should be wrapped at 10 characters per line.\"\nwrapped_text = wrap_string(text, 10)\nprintln(wrapped_text)\n```\n\nThis function splits the text into words and builds an array of strings where each element represents a line with no more than `text_width` characters. It also handles the case where the last word might not fit perfectly within the specified width by appending any remaining characters to the next line.","status":200,"tokens":[11,353],"elapsed":9.935778745,"_type":"aimessage"}]