[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString; text_width::Int = 10)\n    lines = []\n    current_line = \"\"\n    for word in split(text, ' ')\n        if length(current_line) + length(word) > text_width\n            push!(lines, current_line)\n            current_line = \"\"\n        end\n        current_line *= \" $word\"\n    end\n    # Append the last line\n    if current_line != \"\"\n        push!(lines, current_line)\n    end\n    return join(lines, \"\\n\")\nend\n\n# Example usage:\ntext = \"Hello World This is a very long sentence that needs to be wrapped into multiple lines.\"\nprintln(wrap_string(text))\n```\n\nThis function splits the text into words using `split` and then iterates over each word, appending it to a current line. If the length of the current line plus the length of the word exceeds the specified `text_width`, a newline is added, and the current_line is reset. After processing all words, the function returns a string with each line wrapped at the specified width.","status":200,"tokens":[0,274],"elapsed":9.031728535,"_type":"aimessage"}]