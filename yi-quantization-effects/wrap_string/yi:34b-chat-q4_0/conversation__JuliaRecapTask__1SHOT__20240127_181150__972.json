[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString, text_width::Int = 10)\n    lines = []\n    current_line = \"\"\n    for word in split(text, whitespace = true)\n        # Add a new line if the current line + this word would exceed the width\n        if length(current_line) + length(word) > text_width\n            push!(lines, current_line)\n            current_line = \"\"\n        end\n        append!(current_line, word)\n    end\n    # Add the last line if it has content\n    if current_line != \"\"\n        push!(lines, current_line)\n    end\n    return join(lines, \"\\n\")\nend\n\n# Example usage:\ntext = \"A very long sentence that should be wrapped into multiple lines.\"\nprint(wrap_string(text))\n```\n\nThis function splits the text into words and then iterates over them, adding each word to a line until the line exceeds the specified `text_width`. Once the width is exceeded, a new line is started. The `split()` function includes an option for specifying what characters should be considered whitespace, which is why it's passed as `true` here to use the platform-independent definition of whitespace (typically including spaces, tabs, and line endings).\n\nThe `append!()` function is used to add words to the current line without creating a copy each time, which is more efficient when dealing with large strings. After all words have been processed, the `lines` array is joined back into a single string using newline characters as separators.","status":200,"tokens":[0,368],"elapsed":9.885471998,"_type":"aimessage"}]