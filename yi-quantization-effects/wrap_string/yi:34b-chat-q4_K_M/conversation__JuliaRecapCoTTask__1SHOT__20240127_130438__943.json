[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString, text_width::Int = 10)\n    lines = split(text, \" \")\n    new_lines = Vector{Vector{Char}}()\n    current_line = Char[]\n    for word in lines\n        if length(word) + length(current_line) > text_width\n            push!(new_lines, current_line)\n            current_line = copy(word)\n        else\n            append!(current_line, word)\n            append!(current_line, ' ')\n        end\n    end\n    push!(new_lines, current_line)\n    return join.(new_lines, \"\\n\")\nend\n\n# Example usage:\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer vitae justo velit.\"\nprintln(wrap_string(text))\n```\n\nThis function splits the text into words using whitespace as a delimiter and then builds a new list of strings where each string is no longer than `text_width` characters, including spaces. It does this by checking if the current length of the word being appended plus the length of any previously appended words exceeds `text_width`. If so, it starts a new line. The resulting lines are then joined back together with newline characters between them.\n\nPlease note that in the example usage, I've printed the result to the console using `println`, but you can also return the wrapped text as a string if you prefer:\n\n```julia\ntext_wrapped = wrap_string(text)\n```\n\nThis will give you the text with line breaks inserted where necessary.","status":200,"tokens":[0,386],"elapsed":11.093728988,"_type":"aimessage"}]