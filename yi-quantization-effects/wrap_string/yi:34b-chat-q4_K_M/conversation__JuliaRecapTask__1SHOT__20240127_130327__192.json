[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString; text_width::Int = 10)\n    lines = []\n    current_line = \"\"\n    for word in split(text, ' ')\n        if length(current_line) + length(word) > text_width\n            push!(lines, current_line * '\\n')\n            current_line = word\n        else\n            current_line *= \" \" * word\n        end\n    end\n    push!(lines, current_line)\n    return join(lines)\nend\n\n# Example usage:\ntext = \"Hello World This is a very long text that should be wrapped.\"\nwrapped_text = wrap_string(text)\nprintln(wrapped_text)\n```\n\nThis function splits the input `text` into words using whitespace as a delimiter, then iterates over each word. If adding a word to the current line would exceed the specified `text_width`, the current line is appended to the list of lines and the new word becomes the next line. Otherwise, the word is appended to the current line. After processing all words, the function returns the joined lines as a wrapped version of the original text.","status":200,"tokens":[0,273],"elapsed":7.818115133,"_type":"aimessage"}]