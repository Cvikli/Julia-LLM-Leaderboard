[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString; text_width::Int = 10)\n    lines = split(text, r\"\\s+\") # Split on whitespace\n    wrapped_lines = []\n    for line in lines\n        if length(line) > text_width\n            # Calculate the number of words that fit within the width\n            num_words = min(length(line), text_width)\n            # Add a new line for each word\n            for i in 1:num_words\n                push!(wrapped_lines, line[1:i])\n                if i < length(line)\n                    # Append a newline after each word\n                    push!(wrapped_lines, \"\\n\")\n                end\n            end\n        else\n            # If the line fits within the width, add it to the result\n            push!(wrapped_lines, line)\n        end\n    end\n    return join(wrapped_lines, \"\") # Join the lines back into a string\nend\n\nwrap_string(\"This function will wrap words into lines\")  # Example usage\n```","status":200,"tokens":[0,262],"elapsed":7.57256392,"_type":"aimessage"}]