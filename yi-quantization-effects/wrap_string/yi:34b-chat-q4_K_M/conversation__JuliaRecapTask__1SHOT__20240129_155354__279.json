[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString; text_width::Int = 10)\n    lines = []\n    for word in split(text, \" \")\n        if length(word) > text_width\n            push!(lines, word[1:text_width] * \"\\n\")\n            continue\n        end\n        push!(lines, word)\n    end\n    return join(lines, \" \")\nend\n\n# Example usage:\ntext = \"Hello there this is a very long sentence that should be wrapped at 10 characters per line.\"\nprint(wrap_string(text))\n```\n\nThis function splits the text into words using whitespace as the delimiter and then iterates over those words. For each word, it checks if its length exceeds the specified `text_width`. If so, it adds only a portion of the word (up to `text_width` characters) followed by a newline character to the list of lines. If the word fits within the width limit, it is added without a newline. Finally, all the lines are joined together with spaces in between, resulting in a string that has been wrapped according to the specified width.","status":200,"tokens":[373,266],"elapsed":8.023643806,"_type":"aimessage"}]