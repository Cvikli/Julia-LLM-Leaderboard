[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString, text_width::Int=10)\n    lines = Vector{SubString}(undef, 0)\n    for word in split(text)\n        if length(lines[end] + word) + 1 > text_width || length(word) >= text_width\n            push!(lines, \"\")\n        end\n        while true\n            if length(lines[end]) == 0\n                push!(lines, word)\n                break\n            end\n            last_char = lastindex(lines[end]) + 1\n            if lines[end][last_char] == ' ' && length(word) <= text_width - last_char\n                lines[end] = lines[end][1:(last_char - 1)] * word\n                break\n            end\n            lines[end] = lines[end][1:last_char] * \" \"\n        end\n    end\n    return join(lines)\nend\n```\n\nThe function works by iterating over the words in the text and managing a vector of strings (`lines`) that will hold the wrapped version. It uses `split` to get the individual words from the text, and then decides whether each word can be appended to the current line or if a new line needs to be started. If a new line is needed, it starts a new line with an empty string in `lines`.\n\nThe example usage would look like this:\n\n```julia\ntext = \"This is a very long sentence that needs to be wrapped into multiple lines.\"\nwrap_string(text)  # Output should be similar to: \"This is a very\\n long sentence\\n that needs to be wrapped\\ninto multiple lines.\"\n```","status":200,"tokens":[0,391],"elapsed":10.181387247,"_type":"aimessage"}]