[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::String, text_width::Int = 10)\n    lines = String[]\n    word_lengths = map(String.(split(text))) do word\n        return length(word)\n    end\n    current_line_length = 0\n\n    for i in eachindex(text)[2:end]\n        if current_line_length + word_lengths[i] > text_width\n            lines += [String(take!(join([current_line_char for _ in 1:i-1], ' ')))]\n            current_line_length = 0\n        end\n        current_line_length += length(text[i]) + 1 # +1 for space\n    end\n    lines += [String(take!(join([current_line_char for _ in i:length(text)], ' ')))]\n    return join(lines, \"\\n\")\nend\n```\n\nHere's an example usage of the `wrap_string` function with a custom line width:\n\n```julia\njulia> wrap_string(\"This function will wrap words into lines. Each line should not exceed 10 characters in length, including spaces and punctuation marks. If the text exceeds this limit, it should be wrapped to the next line, adding a newline character.\", 15)\n```\n\nThe output would be something like:\n\n```text\nThis function will wrap words into lines. Each line should not exceed 10 characters in length, including spaces and punctuation marks. If the text exceeds this limit, it should be wrapped to the next line, adding a newline character.\n```","status":200,"tokens":[0,378],"elapsed":10.082754388,"_type":"aimessage"}]