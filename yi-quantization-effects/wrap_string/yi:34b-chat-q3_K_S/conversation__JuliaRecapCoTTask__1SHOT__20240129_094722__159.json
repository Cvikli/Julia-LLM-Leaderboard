[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width = 10)\n    lines = Vector{String}()\n    current_line = \"\"\n    for word in split(text)\n        if length(current_line * ' ' * word) <= text_width\n            current_line += \" \" * word\n        else\n            push!(lines, current_line)\n            current_line = word\n        end\n    end\n    push!(lines, current_line)\n    return join(lines)\nend\n\n# Example usage:\nprint(wrap_string(\"Hello world this is a very long sentence that will wrap at the 10th character.\"))\n```\n\nThis function splits the text into words using `split` and then builds up a new string line by line, ensuring that each line does not exceed the specified width. It uses a simple loop to append spaces and words to the current line until the width limit is reached, at which point it adds the current line to the result and starts a new line.\n\nPlease note that this function does not handle edge cases like very long words that might not fit perfectly at the end of a line without splitting them. It also doesn't preserve exact whitespace as entered (e.g., extra spaces between words will be removed). If these are requirements, additional logic would need to be added to handle such cases.","status":200,"tokens":[0,305],"elapsed":8.549164587,"_type":"aimessage"}]