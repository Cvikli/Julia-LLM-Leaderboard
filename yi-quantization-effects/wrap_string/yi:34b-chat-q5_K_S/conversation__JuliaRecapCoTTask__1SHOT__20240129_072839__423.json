[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Given the task and special instructions, here's how I would approach solving this problem using Julia:\n\n```julia\nusing Printf\n\nfunction wrap_string(text::AbstractString; text_width::Int=10)\n    lines = Vector{SubString{String}}()\n    for line in eachline(text)\n        current_line = \"\"\n        for word in split(line, \" \")\n            if length(current_line) + length(word) > text_width\n                push!(lines, current_line)\n                current_line = word\n            else\n                current_line *= \" $word\"\n            end\n        end\n        push!(lines, current_line)\n    end\n    return join(lines, \"\\n\")\nend\n\n# Example usage:\ntext = \"Hello there! This is a very long sentence that should be wrapped at 10 characters per line.\"\nprintln(wrap_string(text))\n```\n\nIn this implementation, the `eachline` function from the standard library is used to iterate over each line of text. The `split` function is used to split the line into words. Then, for each word, we check if adding it to the current line would exceed the `text_width` limit. If so, we add the current line to the list of lines and start a new line.\n\nThe `wrap_string` function returns a wrapped version of the input text, with new lines added as necessary to comply with the `text_width` constraint. The default value for `text_width` is set to 10 characters per line.\n\nPlease note that this implementation assumes the input text does not contain any multi-character separators (such as a comma) or control characters that should be preserved across lines. If such characters are present, additional logic would be required to handle them correctly.","status":200,"tokens":[378,410],"elapsed":20.275448009,"_type":"aimessage"}]