[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width::Int = 10)\n    lines = []\n    for word in split(text)\n        if length(word) + length(join(lines)) >= text_width\n            push!(lines, \"\") # Add an empty line if the current line is full\n            push!(lines, word) # Add the current word to the next line\n        else\n            push!(lines, word) # Append the word to the current line\n        end\n    end\n    return join(lines, \"\\n\")\nend\n\n# Example usage:\ntext = \"Hello world. This is a very long sentence that should wrap around at text_width=10 characters per line.\"\nprintln(wrap_string(text, 10))\n```\n\nThe above code defines a function `wrap_string` that splits the input text into words and then iterates over them, adding each word to a new line if the combined length of the current line plus the word exceeds the specified `text_width`. If the line is not full, the word is appended to the end of the current line.\n\nThe function returns a string with the text wrapped according to the specified width. The example usage demonstrates how the function can be called with an arbitrary text and a desired line width of 10 characters per line.","status":200,"tokens":[0,302],"elapsed":9.719285786,"_type":"aimessage"}]