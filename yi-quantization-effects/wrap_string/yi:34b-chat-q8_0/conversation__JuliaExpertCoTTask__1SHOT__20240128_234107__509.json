[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(str, text_width::Int = 10)\n    lines = split(str)\n    wrapped_lines = Vector{String}()\n\n    for line in lines\n        # Calculate the length of the current line without the trailing newline character\n        line_length = length(line) - (line[end] == ' ' ? 1 : 0)\n\n        # If the line is longer than the maximum width, wrap it and add a new line\n        if line_length > text_width\n            # Find the last space before the maximum width\n            space_index = findlast(\" \", line, text_width - 1)\n            # Trim the string at that position\n            line = SubString(line, 1:prevind(line, space_index)) * '\\n'\n        end\n\n        # Append the line to the result\n        push!(wrapped_lines, line)\n    end\n\n    return join(wrapped_lines, \"\")\nend\n\n# Example usage\nwrap_string(\"This function will wrap words into lines\") # Should return \"This function\\nwill wrap words\\ninto lines\"\n```","status":200,"tokens":[0,271],"elapsed":12.188888592,"_type":"aimessage"}]