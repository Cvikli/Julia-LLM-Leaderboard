[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width::Int = 10)\n    lines = []\n    for word in split(text)\n        if length(word) > text_width || isempty(word)\n            push!(lines, \"\")\n        end\n        push!(lines, word)\n        if length(join(lines[-2:end])) > text_width\n            push!(lines, \"\\n\")\n        end\n    end\n    return join(lines)\nend\n\n# Example usage:\ntext = \"Hello there. This is a very long sentence that I would like to wrap around at each word when it exceeds 10 characters per line.\"\nprintln(wrap_string(text))  # Output should be wrapped according to the specified text width\n```\n\nThis function splits the input text into words, and then iterates over them, adding a newline character `\\n` after each word if the total length of the current line (including the current word) exceeds the specified `text_width`. If a word itself is longer than the `text_width` or empty, it starts a new line.\n\nPlease note that this function does not handle special characters such as punctuation marks or whitespace between words in a robust way. It assumes that the input text is already properly split into words and that each word does not contain any other delimiters that need to be preserved.","status":200,"tokens":[0,314],"elapsed":11.791607444,"_type":"aimessage"}]