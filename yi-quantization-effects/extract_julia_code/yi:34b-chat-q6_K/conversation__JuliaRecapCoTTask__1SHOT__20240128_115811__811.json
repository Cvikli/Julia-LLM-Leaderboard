[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::String)::String\n    # Regular expression to match Julia code blocks\n    re = r\"^```julia\\n((?:\\r?\\n|\\r)*)```\"mx\n\n    # Match all occurrences of the regex in the markdown document\n    matches = eachmatch(re, md)\n\n    # Initialize an empty string to store the extracted code blocks\n    code_blocks = \"\"\n\n    # Iterate over matches and extract the content between code fences\n    for match in matches\n        # Get the captured group with the code block content\n        content = match.captures[1]\n\n        # Remove leading and trailing whitespace from the content\n        trimmed_content = replace(content, r\"^\\s+|\\s+$\" => \"\")\n\n        # Append the trimmed content to the code blocks string with a newline\n        code_blocks *= \"\\n$trimmed_content\\n\"\n    end\n\n    # Remove leading and trailing whitespace from the final string\n    return replace(code_blocks, r\"^\\s+|\\s+$\" => \"\")\nend\n```","status":200,"tokens":[11,263],"elapsed":9.936506219,"_type":"aimessage"}]