[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::String)\n    lines = split(md, '\\n')\n    start_line = -1\n    end_line = -1\n    output = \"\"\n\n    for (i, line) in enumerate(lines)\n        if start_line == -1 && end_line == -1 && occursin(r\"^```julia\", line)\n            start_line = i\n        end\n\n        if start_line != -1 && occursin(r\"^```\", line)\n            end_line = i\n        end\n\n        if start_line != -1 && end_line == -1\n            output *= line\n        end\n    end\n\n    return output\nend\n```\n\nThis function works by scanning through the lines of the markdown document and looking for code fence indicators (`^` followed by `julia`). When it finds a start indicator, it remembers the line number where the code block begins. Then, it continues to append each subsequent line to the output until it encounters an end indicator. The output is then returned as a string.","status":200,"tokens":[0,255],"elapsed":7.322187176,"_type":"aimessage"}]