[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::AbstractString)::AbstractString\n    lines = split(md, \"\\n\")\n    blocks = [x for x in lines if occursin(r\"^```julia\", x)]\n    if isempty(blocks)\n        return \"\"\n    end\n    start_index = findfirst(x -> occursin(r\"^```julia\", x), lines)[1] + 8 # length of code fence prefix\n    end_index = findlast(x -> occursin(r\"^```\", x), lines)[1] - 1 # last line with code fence\n    code_blocks = split(lines[start_index:end_index], \"\\n```\")[2:end-1]  # remove first and last code fences\n    joined_code = join([x for x in code_blocks if !isempty(x)], \"\\n\") # join with newlines\n    return joined_code\nend\n```\n\nThis function assumes that the markdown document is provided as a string `md` and that it contains valid Julia code blocks. The function works by finding all lines that start with ````julia`, discarding any leading or trailing code fences, and then joining the remaining code blocks together with a newline character.","status":200,"tokens":[0,298],"elapsed":8.334745104,"_type":"aimessage"}]