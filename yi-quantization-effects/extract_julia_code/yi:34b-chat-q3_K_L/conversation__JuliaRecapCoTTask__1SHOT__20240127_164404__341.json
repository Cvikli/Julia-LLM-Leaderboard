[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::AbstractString)\n    # Split the markdown into lines, removing leading and trailing whitespace\n    lines = split(strip(md), \"\\n\"; keepempty=false)\n    \n    # Initialize an empty string to store the extracted code blocks\n    extracted_code = \"\"\n    \n    # Loop over each line in the markdown document\n    for (i, line) in enumerate(lines)\n        # If the current line is a code fence open or close, we want to capture the content between them\n        if line == \"```julia\" || line == \"```\"\n            # If this is the opening code fence, start capturing\n            if line == \"```julia\"\n                start_index = i + 1\n            else\n                # If this is the closing code fence, end capturing and add the content to our extracted code\n                end_index = i - 1\n                code_block = join(lines[start_index:end_index], \"\\n\")\n                extracted_code *= \"\\n$code_block\\n\"\n            end\n        end\n    end\n    \n    # Remove the code fences from the extracted code\n    cleaned_code = replace(extracted_code, r\"```julia\" => \"\")\n    \n    return cleaned_code\nend\n```","status":200,"tokens":[0,311],"elapsed":8.701073209,"_type":"aimessage"}]