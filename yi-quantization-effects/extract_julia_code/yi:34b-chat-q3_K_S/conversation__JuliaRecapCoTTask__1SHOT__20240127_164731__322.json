[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::AbstractString)\n    # Initialize an empty string to store the extracted code blocks\n    code = \"\"\n    # Loop through each line of the markdown document\n    for line in split(md, '\\n')\n        # Check if the current line starts with three backticks (to denote a code block)\n        if startswith(line, \"```julia\") || startswith(line, \"```python\") || startswith(line, \"```bash\")\n            # If so, skip the first line (which is the language identifier)\n            continue if occursin(\"\\n\", md) && next_nonempty_line(md, 1) == \"\"\n        end\n        # Append the current line to the code string\n        code *= line * \"\\n\"\n        # Check if the current line ends with three backticks (to denote end of a code block)\n        if occursin(r\"```\\w+?\\n\", line)\n            # If so, trim trailing whitespace and newline characters from the extracted code\n            code = strip(code)\n            # And remove any leading/trailing whitespace from the final result\n            code = strip(code)\n            # Break out of the loop since we've reached the end of a code block\n            break\n        end\n    end\n    return code\nend\n```\n\nThis function expects `md` to be a string containing markdown with Julia language code blocks. It iterates over each line in the document and looks for lines starting and ending with three backticks (`````), which are used to denote code blocks in markdown syntax. When it finds a start or an end of a code block, it appends the contents to the `code` string, skipping the first line if it's just a language identifier (since that would be part of the fence itself). Finally, it trims any leading/trailing whitespace from the extracted code and returns it as a single string.","status":200,"tokens":[0,453],"elapsed":12.249459413,"_type":"aimessage"}]