[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::AbstractString)\n    # Regular expression to match code blocks\n    codeblock_re = r\"^```julia[^\\n]*\\n((?:\\s|.)*?)^```\\n\"m\n    # Initializing the output string with a newline at the beginning\n    output = \"\\n\"\n    # Loop over each match in the markdown document\n    for codeblock in eachmatch(codeblock_re, md)\n        # Get the content of the code block without the fences\n        content = strip(codeblock.captures[1])\n        # Append the content to the output with a newline at the end\n        output *= \"$content\\n\"\n    end\n    return output\nend\n```","status":200,"tokens":[0,177],"elapsed":8.010085155,"_type":"aimessage"}]