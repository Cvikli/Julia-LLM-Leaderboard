[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::AbstractString)\n    lines = split(md, \"\\n\")\n    code_blocks = []\n\n    in_code_block = false\n    current_code_block = \"\"\n\n    for (i, line) in enumerate(lines)\n        if isempty(line) || line == \"\\n\"\n            # do nothing for empty lines or newlines\n            continue\n        end\n\n        if startswith(line, \"```julia\")\n            in_code_block = true\n            current_code_block = \"\"\n            # skip the code fence line\n            continue\n        end\n\n        if endswith(line, \"```\")\n            in_code_block = false\n            push!(code_blocks, current_code_block)\n            # skip the code fence line\n            continue\n        end\n\n        if in_code_block\n            current_code_block *= line * \"\\n\"\n        else\n            # not in a code block, just append to output\n            md_out = md_out * line * \"\\n\"\n        end\n    end\n\n    # join the extracted code blocks together with newlines\n    joined_code = join(code_blocks, \"\\n\")\n\n    return joined_code\nend\n```","status":200,"tokens":[0,309],"elapsed":24.142240653,"_type":"aimessage"}]