[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::AbstractString; keep_fences::Bool = false)\n    lines = split(md, \"\\n\")\n    start_of_block = 1\n    end_of_block = 0\n    blocks = Vector{String}()\n\n    for (i, line) in enumerate(lines)\n        if start_of_block == 1 && occursin(r\"^```julia\", line)\n            start_of_block = i + 1\n        end\n        if end_of_block == 0 && occursin(r\"^```\", line)\n            end_of_block = i\n        end\n        if start_of_block > 0 && end_of_block > 0\n            blocks[end] = blocks[end] * \"\\n\" * strip(line)\n            if keep_fences || (!occursin(r\"^```julia\", line) && !occursin(r\"^```\", line))\n                end_of_block -= 1\n            else\n                start_of_block += 1\n            end\n        elseif end_of_block > 0\n            end_of_block -= 1\n        end\n    end\n\n    return join(blocks) * \"\\n\"\nend\n```\n\nThis function takes a markdown document `md` and an optional flag `keep_fences`. It iterates over the lines of the document, keeping track of the start and end of Julia code blocks using `start_of_block` and `end_of_block` indices. For each line within a code block, it strips any leading whitespace and concatenates the lines with newlines. Once it encounters an ending code fence (`````) or if `keep_fences` is false and the line does not start with ````julia` or `````, it exits the current code block.\n\nIf `keep_fences` is true, the entire Markdown code fences will be preserved in the output. Otherwise, only the code itself without the fences will be returned. The function returns a string containing all the extracted Julia code blocks joined together with newlines.","status":200,"tokens":[0,494],"elapsed":13.300119684,"_type":"aimessage"}]