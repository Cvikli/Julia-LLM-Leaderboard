[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::String)\n    # Split the markdown into lines, removing leading and trailing whitespace\n    lines = map(rstrip, split(md))\n\n    # Initialize an empty string to hold the extracted code blocks\n    extracted_code = \"\"\n\n    # Loop through each line of the markdown document\n    for (i, line) in enumerate(lines)\n        # If a line starts with ` ```julia`, it's the start of a code block\n        if startswith(line, \"```julia\")\n            # Remove the leading code fence prefix from the line\n            line = strip(line[8:end])\n            # Initialize an empty string to hold the extracted code for this language\n            current_code = \"\"\n\n            # Loop through subsequent lines until we reach the end of the block or a blank line is encountered\n            start_new_block = true\n            for j in (i + 1):length(lines)\n                if startswith(lines[j], \"```\")  # We've reached the end of the code block\n                    break\n                elseif lines[j] == \"\"  # We've reached a blank line signaling the end of this code block\n                    start_new_block = true\n                else\n                    current_code *= strip(lines[j]) * '\\n'  # Append to the current code string\n                    if start_new_block  # First line after a blank line, so start a new block\n                        current_code *= \"\\n\"  # Add an empty line between blocks\n                        start_new_block = false\n                    end\n                end\n            end\n            # Append the extracted code to the result string\n            extracted_code *= current_code\n        end\n    end\n\n    return extracted_code\nend\n```","status":200,"tokens":[0,429],"elapsed":11.616863488,"_type":"aimessage"}]