[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString, text_width::Int = 10)\n    lines = []\n    for i in eachindex(text)\n        if (i + 1) == length(text) || text[i] == ' ' && text[i + 1] == ' '\n            # End of text or whitespace encountered, add current line to output and start a new one\n            push!(lines, take!(text, i))\n        elseif (text[i] == ' ' || text[i] == '\\n') && iswhitespace_at_end_of_line(take!(text, i))\n            # Whitespace encountered, add current line to output and start a new one if necessary\n            push!(lines, take!(text, i - 1))\n        elseif (i + text_width) > length(text)\n            # Reached end of text without encountering whitespace, add remaining characters to current line\n            push!(lines, text[i:(length(text) - 1)])\n            break\n        end\n    end\n    return join(lines; separator=\"\\n\")\nend\n\nfunction iswhitespace_at_end_of_line(line::AbstractString)\n    # Check if there's at least one whitespace character at the end of the line\n    return all(iswhitespace, lastindex(line) - 1 : lastindex(line))\nend\n\nfunction take!(text::AbstractString, idx::Integer)\n    # Slice and return a substring without the terminating newline character if present\n    str = text[1:idx]\n    if text[idx] == ' ' || text[idx] == '\\n'\n        return str[1:(end - 1)]\n    else\n        return str\n    end\nend\n\n# Example usage:\nprintln(wrap_string(\"Hello World\", 5))\n```\n\nThis function `wrap_string` takes a text and splits it into lines based on the specified width. It handles both hard line breaks (e.g., \"\\n\") and spaces when splitting the text. The `take!` function is used to efficiently slice the string without allocating temporary strings.","status":200,"tokens":[0,512],"elapsed":13.847130888,"_type":"aimessage"}]