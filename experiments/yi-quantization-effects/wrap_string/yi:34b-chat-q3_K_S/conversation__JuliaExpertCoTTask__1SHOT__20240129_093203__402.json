[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width = 10)\n    lines = []\n    current_line = \"\"\n    for word in split(text)\n        if length(current_line * word) > text_width\n            # Add the line to the list and start a new one\n            push!(lines, current_line)\n            current_line = word\n        else\n            # Append to the current line\n            current_line *= \" \" * word\n        end\n    end\n    # Don't forget to add the last line\n    if current_line != \"\"\n        push!(lines, current_line)\n    end\n    return join(lines)\nend\n```\n\nThis function takes a `text` and an optional `text_width` argument. It splits the text into words using `split()` and then iterates over each word. If appending a word to the current line would exceed the specified text width, it adds the current line to the list of lines and starts a new line. Otherwise, it appends the word to the current line. Finally, it joins all the lines back together with spaces to form the wrapped text.","status":200,"tokens":[0,264],"elapsed":7.300461851,"_type":"aimessage"}]