[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString, text_width::Int = 10)\n    lines = IOBuffer()\n    for word in split(text)\n        if lines.size + length(word) > text_width\n            write(lines, '\\n')\n        end\n        write(lines, word)\n        write(lines, ' ')\n    end\n    String(take!(lines))\nend\n```\n\nThis function takes a `text` and an optional `text_width`. It splits the text into words using `split()`, and for each word, it checks if writing that word to the current line (stored in an `IOBuffer`) would exceed the specified width. If so, it starts a new line. After iterating over all words, it returns a string containing the wrapped text.\n\nHere's an example usage:\n\n```julia\ntext = \"Hello World! This is a very long sentence that needs to be wrapped into multiple lines because it exceeds the specified width of 20 characters per line.\"\nprintln(wrap_string(text, 20))\n# Output should look like this (note that the actual newlines may differ due to platform-specific line endings):\n# Hello World! This is a very long sentence that needs to be wrapped into multiple lines because it exceeds the specified width of 20 characters per line.\n```","status":200,"tokens":[0,308],"elapsed":8.636202134,"_type":"aimessage"}]