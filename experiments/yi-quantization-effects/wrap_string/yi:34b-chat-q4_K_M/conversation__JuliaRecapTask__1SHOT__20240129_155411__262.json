[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString; text_width::Int = 10)\n    lines = split(text, '\\n') # Split the text into lines\n    wrapped_lines = []\n    for line in lines\n        if length(line) > text_width\n            # Split the current line at the width and add each part to the result\n            parts = split(line, ' ', limit = text_width - 1)\n            for part in parts\n                push!(wrapped_lines, part * \"\\n\")\n            end\n        else\n            # If the line is shorter than the width, just add it as-is\n            push!(wrapped_lines, line * \"\\n\")\n        end\n    end\n    return join(wrapped_lines, \"\") # Join all wrapped lines back into a single string\nend\n\n# Example usage:\ntext = \"Hello there. This is a very long sentence that should be wrapped at 10 characters per line.\"\nprintln(wrap_string(text))\n```\n\nThis function splits the text on newlines and then processes each line individually. It checks if the length of the line exceeds the specified `text_width`. If it does, the line is split into parts based on spaces, with a maximum width of `text_width - 1` (to account for the space between words). Each part is then prepended with a newline and appended to the result.\n\nIf the line is shorter than the width, it is added directly to the result without modification. Finally, all the wrapped lines are joined back into a single string using `join`.","status":200,"tokens":[0,369],"elapsed":10.859463519,"_type":"aimessage"}]