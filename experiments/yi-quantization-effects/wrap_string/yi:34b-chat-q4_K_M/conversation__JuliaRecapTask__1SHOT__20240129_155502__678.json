[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString; text_width::Int = 10)\n    lines = split(text, '\\n') # Split the text into lines\n    wrapped_lines = []\n    for line in lines\n        if length(line) > text_width\n            # If the current line is longer than the specified width, wrap it\n            parts = split(line, ' ', keepempty=false) # Split on spaces, but don't include empty strings in the result\n            for i in 1:length(parts)-1\n                if length(parts[1:(i+1)]) > text_width\n                    # If the current part plus the next one would exceed the width, add a new line and continue with the rest of the parts\n                    push!(wrapped_lines, join(parts[1:i], \" \"))\n                    push!(wrapped_lines, \"\\n\")\n                    parts = parts[(i+1):end] # Move to the next part in the original string\n                else\n                    # Otherwise, just add the current part to the wrapped lines\n                    push!(wrapped_lines, join(parts[1:i], \" \"))\n                    break # We're done with this line since we found a part that fits within the width\n                end\n            end\n        else\n            # If the line is shorter than the specified width, just add it to the wrapped lines\n            push!(wrapped_lines, line)\n        end\n    end\n    return join(wrapped_lines, \"\\n\") # Join all the wrapped lines back into a single string with newline characters\nend\n\n# Example usage:\ntext = \"Hello there this is a very long sentence that should be wrapped at 10 characters per line.\"\nprintln(wrap_string(text))\n```\n\nThis function splits the text into words and then decides whether each word fits within the specified `text_width`. If not, it wraps the line and continues with the next word. The `join` function is used to concatenate the wrapped lines back into a single string with newline characters between them.","status":200,"tokens":[0,484],"elapsed":14.244719845,"_type":"aimessage"}]