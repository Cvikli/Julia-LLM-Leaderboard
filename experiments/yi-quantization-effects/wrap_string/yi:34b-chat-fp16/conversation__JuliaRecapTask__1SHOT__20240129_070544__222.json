[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString; text_width::Int = 10)\n    lines = Vector{String}()\n    for word in split(text, '\\n')\n        line = \"\"\n        for char in word\n            if length(line) + 1 > text_width\n                push!(lines, line)\n                line = \"\"\n            end\n            line *= char\n        end\n        if line != \"\"\n            push!(lines, line)\n        end\n    end\n    return join(lines, '\\n')\nend\n\n# Example usage:\ntext = \"Hello there, how are you today? This is a very long sentence that should wrap to the next line when it exceeds the text width.\"\nprintln(wrap_string(text))\n```\n\nThis function splits the text into words using spaces as delimiters and then iterates over each word, adding characters to a line until the line's length plus one (to account for the space between words) exceeds `text_width`. When this happens, it adds the current line to the list of lines and starts a new line. After processing all words, it joins the lines back together with newline characters and returns the wrapped text.","status":200,"tokens":[0,278],"elapsed":21.666048708,"_type":"aimessage"}]