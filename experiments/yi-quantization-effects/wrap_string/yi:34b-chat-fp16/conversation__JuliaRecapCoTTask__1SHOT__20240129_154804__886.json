[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString; text_width::Int=10)\n    lines = split(text, \" \")\n    new_lines = Vector{String}()\n    for word in lines\n        if length(word) + sum(length.(new_lines)) > text_width\n            push!(new_lines, \"\")\n        end\n        push!(new_lines, word)\n    end\n    return join(new_lines, \"\\n\")\nend\n\n# Example usage:\ntext = \"This is a very long sentence that should be wrapped at 10 characters per line.\"\nprintln(wrap_string(text))\n```\n\nThis function splits the text into words using `split` and then iterates over those words, adding each word to a new line if it would exceed the specified `text_width` when added to the current sum of line lengths. Finally, it joins the new lines back together with `\\n` characters between them.","status":200,"tokens":[0,225],"elapsed":17.524099082,"_type":"aimessage"}]