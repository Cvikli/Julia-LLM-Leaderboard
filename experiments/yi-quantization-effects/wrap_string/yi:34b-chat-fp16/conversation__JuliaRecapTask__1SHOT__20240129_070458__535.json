[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString; text_width::Int = 10)\n    lines = Vector{SubString}()\n    start_index = 1\n    while start_index <= length(text)\n        # Find the end of the line (space before or at the text width)\n        end_index = findnext(r\"\\s+|$\", text, start_index)\n        if !isnothing(end_index) && end_index - start_index > text_width\n            # If the word is too long for one line, add a newline before it\n            push!(lines, text[start_index:prevind(text, end_index)])\n            start_index = nextind(text, end_index)\n        end\n        # Handle the case where the word doesn't fit but there are no spaces left\n        if !isnothing(end_index) && end_index - start_index == text_width\n            push!(lines, SubString(text, start_index, end_index))\n            start_index = nextind(text, end_index)\n        end\n        # Handle the last word if it's shorter than the width\n        if !isnothing(end_index) && end_index - start_index <= text_width\n            push!(lines, SubString(text, start_index, end_index))\n            start_index = nextind(text, end_index)\n        end\n    end\n    # Join the lines and return\n    return join(lines, \"\\n\")\nend\n\n# Example usage:\ntext = \"Hello there this is a very long string that needs to be wrapped into multiple lines.\"\nwrapped_text = wrap_string(text)\nprintln(wrapped_text)\n```\n\nThis function iterates over the characters in the text, looking for spaces or the end of the text. If it finds a space within `text_width` characters from the start, it will add that word to the output and move the starting index forward by the length of the word plus one (to skip the space). If no space is found before `text_width` characters, it means the current word is too long for one line, so a newline is added at the end_index + 1 position (to skip the space).\n\nThe example usage demonstrates how to call the function with a default text width of 10 and prints the wrapped string to the console.","status":200,"tokens":[0,556],"elapsed":43.420017461,"_type":"aimessage"}]