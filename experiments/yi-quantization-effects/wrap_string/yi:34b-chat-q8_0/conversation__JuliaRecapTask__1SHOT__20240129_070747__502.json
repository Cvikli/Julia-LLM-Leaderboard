[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString, text_width::Int = 10)\n    lines = split(text, \" \")\n    wrapped_lines = Vector{String}()\n\n    for word in lines\n        if length(word) + count(x -> x == ' ', wrapped_lines[end]) > text_width\n            push!(wrapped_lines, word)\n        else\n            append!(wrapped_lines[end], \" \" * word)\n        end\n    end\n\n    return join(wrapped_lines, \"\\n\")\nend\n\n# Example usage:\ntext = \"Hello there this is a very long string that should be wrapped into multiple lines based on the text width provided\"\nresult = wrap_string(text, 15)\nprintln(result)\n```\n\nThis function splits the input `text` into words using `split(text, \" \")`. It then iterates over these words and checks if adding the current word to the end of the last line in the wrapped text would exceed the specified `text_width`. If so, a new line is started for the word.\n\nThe `count(x -> x == ' ', wrapped_lines[end])` part counts the number of spaces at the beginning of the last line to correctly determine if the word fits without exceeding the width.\n\nFinally, all the lines are joined with a newline character using `join(wrapped_lines, \"\\n\")` to create the final wrapped text.","status":200,"tokens":[0,340],"elapsed":15.420187272,"_type":"aimessage"}]