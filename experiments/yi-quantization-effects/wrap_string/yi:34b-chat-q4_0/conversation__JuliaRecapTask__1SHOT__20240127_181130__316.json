[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString, text_width::Int = 10)\n    lines = [\"\"]\n    start_index = 1\n    for (i, char) in enumerate(text)\n        if i - start_index >= text_width || char == ' '\n            end_of_line = i - 1\n            while end_of_line > start_index && text[end_of_line] == ' '\n                end_of_line -= 1\n            end\n            lines[end] = lines[end][:end_of_line] * \"\\n\"\n            if i < length(text)\n                lines[end + 1] = text[i + 1:end]\n            end\n            start_index = end_of_line + 2  # Skip the space and add one for the new word\n        else\n            lines[end] *= char\n        end\n    end\n    return lines\nend\n\n# Example\ntext = \"Hello there this is a very long sentence that should be wrapped into multiple lines\"\nprintln(wrap_string(text))\n```\n\nThis function works by iterating over the characters in the text and appending them to the current line, which is represented by an element of the `lines` array. Each time a space character is encountered or the number of characters in the current line exceeds the specified `text_width`, a new line is started. The function ensures that consecutive spaces are not treated as line breaks and that the last word of the text does not get truncated if it is shorter than the `text_width`.","status":200,"tokens":[373,362],"elapsed":9.947978268,"_type":"aimessage"}]