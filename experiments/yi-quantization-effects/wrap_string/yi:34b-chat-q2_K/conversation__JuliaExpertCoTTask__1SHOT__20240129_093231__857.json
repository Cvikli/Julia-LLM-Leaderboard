[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::String, text_width::Int=10)\n    lines = Vector{String}() # Initialize an empty vector to hold the wrapped text\n    current_line_length = 0\n\n    for word in split(text)  # Iterate over each word in the text\n        if current_line_length + length(word) > text_width  # Check if adding this word will exceed the line width\n            lines += [join([\" \", word], \"\\n\")] # Add a new line with just the current word and a space\n            current_line_length = 0\n        end\n\n        push!(lines, word)  # If there's room in the current line, add the word without a separator\n        current_line_length += length(word) + 1 # Add 1 for the space after the word\n    end\n\n    return join(lines, \"\\n\")  # Join all lines with newline separators\nend\n\nwrap_string(\"This function will wrap words into lines\") == \"This function will\\nwrap words into lines\"\n```","status":200,"tokens":[184,257],"elapsed":11.068417058,"_type":"aimessage"}]