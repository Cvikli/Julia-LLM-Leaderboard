[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString, text_width::Int = 10)\n    lines = split(text)\n    line_lengths = map(length, lines)\n    max_length = maximum(line_lengths)\n    wrapped_lines = Vector{SubString{String}}()\n    current_line = \"\"\n    for (i, word) in enumerate(lines)\n        if current_line * ' ' * word > text_width\n            push!(wrapped_lines, current_line)\n            current_line = word\n        else\n            current_line *= ' ' * word\n        end\n        if i == length(lines) - 1\n            if current_line != \"\"\n                push!(wrapped_lines, current_line)\n            end\n        end\n    end\n    return wrapped_lines\nend\n\n# Example usage:\ntext = \"Hello there this is a very long string that should be wrapped\"\nwrapped_text = wrap_string(text)\nfor line in wrapped_text\n    println(line)\nend\n```\n\nThis function splits the text into words and then iterates over them, building up a new line of text. Each time the current line plus a space would exceed `text_width`, it wraps to a new line and starts a new word on that line. The `wrapped_lines` vector accumulates the wrapped lines, and we return it at the end.\n\nThe example usage demonstrates how to call the function with a default value for `text_width` and then print out the wrapped text one line at a time.","status":200,"tokens":[0,365],"elapsed":12.05511496,"_type":"aimessage"}]