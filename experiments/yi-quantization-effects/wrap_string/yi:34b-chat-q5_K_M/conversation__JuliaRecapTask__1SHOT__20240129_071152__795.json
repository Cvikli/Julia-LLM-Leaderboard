[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width::Int = 10)\n    lines = []\n    current_line = \"\"\n    for word in split(text, \" \")\n        if length(current_line) + length(word) > text_width\n            push!(lines, current_line)\n            current_line = \"\"\n        end\n        current_line *= \" $word\"\n    end\n    push!(lines, current_line)\n    return join(lines, \"\\n\")\nend\n\n# Example usage:\ntext = \"Hello there this is a very long sentence that should be wrapped to fit within the text width\"\nwrapped_text = wrap_string(text, 15)\nprintln(wrapped_text)\n```\n\nThis function splits the input `text` into words using whitespace as delimiters and then iterates over each word. For each word, it checks if appending it to the current line would exceed the specified `text_width`. If so, it adds a new line and starts a new current line. After processing all words, it joins the lines back together with newline characters between them.","status":200,"tokens":[0,265],"elapsed":8.738267082,"_type":"aimessage"}]