[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(str::AbstractString, text_width::Int = 10)\n    lines = []\n    current_line = \"\"\n    for word in split(str)\n        if length(current_line) + length(word) <= text_width\n            current_line *= \" $word\"\n        else\n            push!(lines, current_line)\n            current_line = \"$word\"\n        end\n    end\n    if current_line != \"\"\n        push!(lines, current_line)\n    end\n    return join(lines, \"\\n\")\nend\n\n# Example usage:\ntext = \"Hello there this is a very long string that should be wrapped at 10 characters per line.\"\nwrapped_text = wrap_string(text, 10)\nprintln(wrapped_text)\n```\n\nThis function `wrap_string` takes an `AbstractString` and an optional `Int` argument `text_width`. It splits the string into words using `split`, and then iterates over these words, appending each word to a current line unless the length of the current line plus the length of the word exceeds `text_width`. If that limit is exceeded, the function adds the current line to the list of lines and starts a new line for the next word.\n\nThe example usage demonstrates how to use `wrap_string` with a default text width of 10 characters per line. It prints out the wrapped string.","status":200,"tokens":[0,338],"elapsed":10.882799908,"_type":"aimessage"}]