[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString, text_width::Int = 10)\n    lines = split(text, \" \")\n    line_lengths = map(lines) do line\n        length(line) + length(\"\\n\")  # include newline character\n    end\n    max_line_length = maximum(line_lengths)\n    \n    start_index = 1\n    current_line = \"\"\n    result = []\n    while start_index <= max_line_length\n        if line_lengths[start_index] + length(current_line) > text_width\n            push!(result, current_line * \"\\n\")\n            current_line = \"\"\n        end\n        current_line *= lines[start_index] * \" \"\n        start_index += 1\n    end\n    push!(result, current_line)\n    return join(result, \"\")\nend\n\n# Example usage:\ntext = \"Hello there this is a very long sentence that should wrap around multiple lines.\"\nwrapped_text = wrap_string(text, 20)\nprintln(wrapped_text)  # Output should be something like:\n                      # Hello there this is a very\n                      # long sentence that should wrap\n                      # around multiple lines.\n```\n\nThe `wrap_string` function works by splitting the text into words, calculating the length of each line with the space at the end, and then iterating over these lengths to determine where to insert newlines without exceeding the specified `text_width`. The function uses a sliding window approach to build up the lines one word at a time, ensuring that each line's length does not exceed the maximum width.","status":200,"tokens":[0,395],"elapsed":12.730356911,"_type":"aimessage"}]