[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString, text_width::Int = 10)\n    lines = []\n    current_line = \"\"\n    for word in split(text)\n        if length(current_line * ' ' * word) > text_width\n            push!(lines, current_line)\n            current_line = word\n        else\n            current_line *= ' ' * word\n        end\n    end\n    push!(lines, current_line)\n    return lines\nend\n\n# Example usage:\ntext = \"Hello World This is a very long sentence that should be wrapped\"\nwrapped_text = wrap_string(text)\nprintln(\"Wrapped text:\\n\", join(wrapped_text, \"\\n\"))\n```\n\nThis function `wrap_string` takes in a string and an optional `text_width` parameter. It splits the text into words and appends each word to a line. If the length of the current line plus the next word exceeds the specified width or the default width of 10, it starts a new line. The function then returns an array of lines that do not exceed the maximum width.\n\nThe example usage demonstrates how `wrap_string` can be called with a text string and prints out the wrapped text, joining the lines with a newline character.","status":200,"tokens":[0,299],"elapsed":8.350853207,"_type":"aimessage"}]