[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString, text_width::Int = 10)\n    lines = split(text, '\\n')\n    wrapped_lines = []\n    for line in lines\n        words = split(line)\n        current_length = 0\n        wrapped_word = \"\"\n        for word in words\n            if current_length + length(word) <= text_width\n                wrapped_word *= \" $word\"\n                current_length += length(word) + 1  # Account for the space after each word\n            else\n                push!(wrapped_lines, wrapped_word)\n                wrapped_word = word\n                current_length = length(word)\n            end\n        end\n        if wrapped_word != \"\"\n            push!(wrapped_lines, wrapped_word)\n        end\n    end\n    return join(wrapped_lines, '\\n')\nend\n\n# Example usage:\ntext = \"Hello there this is a very long string that should be wrapped to fit within the text width limit\"\nprintln(wrap_string(text))\n```\n\nThe above code defines a function `wrap_string` that takes two arguments: `text::AbstractString` and an optional argument `text_width::Int = 10`. It splits the input text into lines, then iterates over each line, splitting it into words. The function checks if the current length of the wrapped word plus the length of the next word exceeds the specified `text_width`. If so, it adds a newline and starts a new wrapped word.\n\nThe example usage prints out the wrapped text, demonstrating how the function works with a long string.","status":200,"tokens":[0,381],"elapsed":12.279135841,"_type":"aimessage"}]