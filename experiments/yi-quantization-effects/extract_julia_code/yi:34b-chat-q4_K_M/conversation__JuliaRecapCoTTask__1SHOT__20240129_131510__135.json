[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::String)\n    # Regular expression to match code blocks in markdown\n    # Code fences start with ` ```julia` and end with ` ````\n    # We use a capturing group to capture the content between the fences\n    # The backreference `\\1` refers to the first capturing group\n    code_blocks = split(md, \"\\n\") |>\n        filter(line -> occursin(r\"^\\s*```julia\", line) || occursin(r\"^```\", line)) |>\n        map(line -> match(r\"```julia?\\n([^\\n]+)\\n```\", line).captures[1]) |>\n        join\n    # Remove leading and trailing whitespace from each code block\n    code_blocks = replace(code_blocks, r\"^(\\s+)\" => \"\") * \"\\n\" * replace(code_blocks, r\"(\\s+)$\" => \"\")\n    return code_blocks\nend\n```\n\nThis function works by splitting the markdown string into lines, filtering out any line that does not start with a ````julia` or ````` (to handle both fenced and indented code blocks), and then joining these lines together. It uses a regular expression to capture the content between the code fences and removes leading and trailing whitespace from the resulting string.","status":200,"tokens":[0,317],"elapsed":9.320431177,"_type":"aimessage"}]