[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::String, instructions::String = \"\")\n    if !isempty(instructions)\n        instructions = replace(instructions, \"\\n\" => \" \")\n        instructions = Meta.parse(instructions)\n    end\n\n    # Regular expression to match code blocks\n    re_code_block = r\"```julia[^`]*\\n([^`]*)```\"m\n    matches = matchall(re_code_block, md)\n\n    # Extract the code from each matched block\n    codes = Vector{String}()\n    for m in matches\n        if !isempty(instructions) && isa(instructions, Expr)\n            # Apply instructions to each code block if provided\n            new_code = apply_instructions(m.captures[1], instructions)\n        else\n            new_code = m.captures[1]\n        end\n        push!(codes, new_code)\n    end\n\n    # Join the codes together with a newline\n    joined_code = join(codes, \"\\n\")\n\n    return joined_code\nend\n\nfunction apply_instructions(code::String, instructions::Expr)\n    for i in 1:length(instructions.args) - 1\n        if isa(instructions.args[i], Expr) && instructions.args[i].head == :macrocall\n            # Macro call found, evaluate it and apply to code\n            macroname = instructions.args[i].args[1]\n            args = instructions.args[i].args[2:end]\n            new_code = eval(Meta.parse(\"$(macroname)($(args))\")) |> String\n        elseif isa(instructions.args[i], QuoteNode) || isa(instructions.args[i], Symbol)\n            # Simple substitution, replace the text\n            new_code = replace(code, instructions.args[i] => string(instructions.args[i+1]))\n        elseif isa(instructions.args[i], AbstractString)\n            # String literal found, replace the substring\n            new_code = replace(code, instructions.args[i])\n        end\n    end\n\n    return new_code\nend\n```\n\nPlease note that this function assumes the `md` string contains valid markdown with Julia code blocks starting with ````julia` and ending with `````. The `apply_instructions` function is a placeholder for applying any special instructions provided by the user. It currently only handles simple substitutions and macro calls, but it can be extended to handle more complex scenarios if needed.","status":200,"tokens":[0,620],"elapsed":23.373098714,"_type":"aimessage"}]