[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::AbstractString)\n    lines = split(md, '\\n')\n    output = \"\"\n\n    in_fence = false\n    current_block = \"\"\n    for line in lines\n        if !in_fence && startswith(line, \"```julia\")\n            in_fence = true\n            current_block = \"\"\n        elseif in_fence && endswith(line, \"```\")\n            in_fence = false\n            output *= current_block * '\\n'\n            current_block = \"\"\n        elseif in_fence\n            current_block *= line * '\\n'\n        end\n    end\n\n    return output\nend\n```\n\nThis function works by iterating over the lines of the markdown document. If a line starts with `\"```julia\"`, we start capturing the code block. If a line ends with `\"```\"`, we stop capturing and add the current block to the output string, then reset the current block to an empty string. If a line is inside a code fence (i.e., when `in_fence == true`), we append it to the current block. The function returns the concatenated code blocks with each one on its own line.","status":200,"tokens":[0,297],"elapsed":7.967407761,"_type":"aimessage"}]