[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::AbstractString; trim::Bool = true, preserve_fences::Bool = false)\n    lines = split(md, \"\\n\")\n    output = String[]\n    in_code_block = false\n    code_start = 1\n    for (i, line) in enumerate(lines)\n        if startswith(line, \"```julia\") && !preserve_fences\n            in_code_block = true\n            code_start = i\n        end\n        if in_code_block\n            if endswith(line, \"```\")\n                in_code_block = false\n                # Preserve fences but remove the first and last line if present\n                if preserve_fences && (i == code_start || lines[i - 1] != \"\\n\")\n                    push!(output, join([lines[code_start:i-1]; lines[i+1:end]], \"\\n\"))\n                else\n                    push!(output, join(lines[code_start:i], \"\\n\"))\n                end\n            elseif trim && !isempty(line) && line â‰  \"\\n\"\n                # Trim each line in the code block if requested\n                push!(output, strip(line))\n            else\n                push!(output, line)\n            end\n        else\n            push!(output, line)\n        end\n    end\n    return join(output, \"\\n\")\nend\n```\n\nThis function takes a markdown string `md` and an optional boolean argument `trim` (default: true) to control whether the output should have whitespace trimmed from each line, and another optional boolean argument `preserve_fences` (default: false) to control whether the first and last lines of the code block (the code fences) should be preserved.\n\nThe function works by iterating over the lines of the markdown document, maintaining a state for whether it is currently in a Julia code block. When a line starts with `\"```julia\"` and `preserve_fences` is false, it signals the start of a new code block. The body of the code block is then appended to the output array, either with or without trimming depending on the value of `trim`. If `preserve_fences` is true, the first and last lines (the code fences) are preserved by not including them in the output if they are just empty lines or if they immediately follow an actual line of content.\n\nThe function returns a string containing all the extracted Julia code blocks from the markdown document, with each block joined by a newline character. If `trim` is true, whitespace is removed from the start and end of each line in the code blocks.","status":200,"tokens":[0,631],"elapsed":17.02986614,"_type":"aimessage"}]