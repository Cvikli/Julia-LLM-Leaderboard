[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::AbstractString)::AbstractString\n    # Regular expression to match markdown code blocks\n    pattern = r\"^ *```julia*?\\n((?:.|\\n)*?)^ *\\```\"m\n    # Empty string to store the extracted code\n    code = \"\"\n    # Loop through each line in the document\n    for line in split(md, '\\n')\n        # If a line matches the pattern for a code block start\n        if occursin(pattern, line)\n            # Add the line to the code string if it's not a fence line\n            if !occursin(\"```\", line)\n                code *= line\n            end\n        elseif line == \"```\"  # If we encounter the end of a code block\n            break\n        else  # For all other lines, add them to the code string\n            code *= line * '\\n'\n        end\n    end\n    return strip(code)\nend\n```\n\nThis function uses a regular expression to match markdown code blocks that start with ````julia` and end with `````. It then iterates over each line in the document, adding non-fence lines to an empty string until it encounters the ending fence of the code block. The resulting string is stripped of leading and trailing whitespace.","status":200,"tokens":[11,304],"elapsed":8.194839591,"_type":"aimessage"}]