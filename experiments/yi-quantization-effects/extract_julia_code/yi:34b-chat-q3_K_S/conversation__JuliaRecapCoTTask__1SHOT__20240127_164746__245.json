[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```jl\nfunction extract_julia_code(md::AbstractString)\n    # Regular expression to match code fences: 3 backticks followed by a language name, and then 3 more backticks.\n    code_fence = r\"`{3}(\\S+)?`{3}\"\n    # Group 1 captures the language name if present.\n    language_name = r\"(\\S+)\"\n    # Regular expression to match a code block without language: 4 spaces or more followed by a newline.\n    code_block = r\"( {4,}\\n)\"\n    # Multiline regular expression to match both types of code blocks.\n    code_blocks = MultiLine() * (code_fence | code_block)\n\n    # Replace all occurrences of 3 backticks with a single space and remove leading spaces in case of code fences without language name.\n    cleaned_md = replace(md, r\"```{3}(?!\\S+)\", \" \") * r\"\\s*(?=$|(?:${code_block}))\" => s -> join(split(s, \"\\n\"; keepempty=false), \"\\n\")[2:end]\n    # Remove any leading and trailing whitespace from code blocks.\n    cleaned_md = replace(cleaned_md, r\"^\\s+|\\s+$\", \"\")\n    # Split on newlines to get an array of code blocks.\n    code_blocks = split(cleaned_md, \"\\n\"; keepempty=false)\n    # Remove the code fence markers from each line.\n    julia_code = map(code_blocks) do block\n        if match(code_fence, block) !== nothing\n            # If it's a code fence, capture the language name and remove the markers.\n            language = match(language_name, block)[1] == \"julia\" || false\n            return replace(block, code_fence => \"\")[2:end-1] * (language ? \"# Julia\" : \"\")\n        else\n            # If it's a plain code block, remove leading spaces.\n            return join(split(block; keepempty=false), \"\\n\")\n        end\n    end\n    # Join the code blocks with newlines.\n    return join(julia_code, \"\\n\")\nend\n```","status":200,"tokens":[0,540],"elapsed":14.621605437,"_type":"aimessage"}]