[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::String)\n    # Regular expression to match code blocks with fences:\n    #   - Capturing group for the content inside ` 1` and ` 2`\n    #   - Non-capturing group for the first line which starts with ` ````\n    #     to ensure we don't include it in the result.\n    #   - Lookahead assertion to make sure there are no other characters after ` 2` except newlines.\n    code_block_rx = r\"(?m)^```julia\\n((?:\\n[^\\n]*\\n*))(?=\\n```)\"\n\n    # Split the markdown into paragraphs and check if each paragraph starts with a code fence.\n    output = \"\"\n    for p in split(md, \"\\n\\n\")\n        if startswith(p, \"```julia\") && endswith(p, \"```\")\n            # Remove the leading and trailing lines containing only ` ```` from the paragraph.\n            middle_content = strip(p[7 + 1:end - 3])  # Start index is inclusive, end index is exclusive.\n            if middle_content != \"\"\n                output *= middle_content * \"\\n\"\n            end\n        else\n            output *= p * \"\\n\"\n        end\n    end\n\n    return output\nend\n```","status":200,"tokens":[0,324],"elapsed":8.749319668,"_type":"aimessage"}]