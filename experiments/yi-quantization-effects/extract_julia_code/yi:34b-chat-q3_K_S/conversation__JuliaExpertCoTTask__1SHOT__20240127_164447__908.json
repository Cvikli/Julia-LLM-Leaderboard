[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Data\n\nextract_julia_code(\"\"\"```julia\nprintln(\"hello world\")\n```\"\"\")","variables":["task","data"],"_type":"usermessage"},{"content":"function extract_julia_code(md::AbstractString)\n    blocks = split(md, \"\\n\\n\")\n    fenced_blocks = findall(isequal('\\n'), md)[2:end]\n    fenced_blocks = map(x -> x - 1, fenced_blocks)\n    fenced_blocks = filter(x -> blocks[x][1] == '`', fenced_blocks)\n    fenced_blocks = filter(x -> length(blocks[x]) > 2, fenced_blocks)\n    fenced_blocks = map(x -> startswith(blocks[x], \"```julia\"), fenced_blocks)\n    fenced_blocks = filter(x -> x == true, fenced_blocks)\n    code = join([blocks[i + 1] for i in fenced_blocks])\n    return strip(String(code))\nend","status":200,"tokens":[0,210],"elapsed":5.579847067,"_type":"aimessage"}]