[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::String)\n    # Regular expression for matching code blocks:\n    # - Begin with 1 or more `` (backtick characters)\n    # - Followed by any number of non-linebreak characters (. means any character except \\n)\n    # - End with 2 or more ` (backtick characters) followed by a line break (?: \\r|\\n)\n    code_block_pattern = r\"`{1,}.*?\\n?(?:\\r|)`{2,}\"\n\n    # Match all code blocks in the markdown document\n    blocks = matchall(code_block_pattern, md)\n\n    # Join the code blocks together with a newline (but only if they are not empty)\n    joined_code = join(blocks[1:end-1], \"\\n\")\n\n    # Remove leading and trailing whitespace from each line\n    return replace(joined_code, r\"^\\s+|\\s+$\" => \"\")\nend\n```\n\nPlease note that the `replace` function used at the end is necessary to remove any leading or trailing whitespace from each line in case the input markdown had unbalanced backticks.","status":200,"tokens":[0,281],"elapsed":7.31868531,"_type":"aimessage"}]