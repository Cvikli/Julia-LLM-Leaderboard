[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```jl\nfunction extract_julia_code(md::String)::String\n    # Regular expression to match Julia code blocks within Markdown text\n    const JULIA_CODE_BLOCK = r\"```julia\\n([^\\n]*\\S)\\n*```\"m\n\n    # Match all occurrences of the pattern and capture the content inside\n    # (which is group 1 in the regex)\n    matches = match.(JULIA_CODE_BLOCK, md) |> collect\n\n    # If no matches found, return an empty string\n    if length(matches) == 0\n        return \"\"\n    end\n\n    # Join all matched code blocks together with a newline\n    joined = join(matches[1].captures) * \"\\n\"\n\n    # Remove leading and trailing whitespace from each line\n    lines = split(joined, '\\n')\n    return strip.(lines) |> join |> String\nend\n```","status":200,"tokens":[396,218],"elapsed":5.91159562,"_type":"aimessage"}]