[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::AbstractString)\n    blocks = findall(r\"^```julia\\n([\\s\\S]*?)\\n*^```\", md)\n    if length(blocks) > 0\n        # Join all the blocks with newlines and remove leading/trailing whitespace\n        return replace(join([String(strip(block[2:end-1])) for block in blocks], \"\\n\"), r\"^\\s+|\\s+$\" => \"\")\n    else\n        # No code blocks found\n        return \"\"\n    end\nend\n```\n\nPlease note that the regex used to find the markdown code blocks assumes a specific format:\n\n```plaintext\n^```julia\\n(.*?)\\n*^```\n```\n\nThis regex will match any line starting with ````julia` and ending with an empty or non-empty line followed by `````. The captured group is everything between the opening and closing code fence markers.","status":200,"tokens":[0,230],"elapsed":6.19964322,"_type":"aimessage"}]