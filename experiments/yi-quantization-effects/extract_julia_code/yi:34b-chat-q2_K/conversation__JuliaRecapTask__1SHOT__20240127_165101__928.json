[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::AbstractString)\n    # Create a regex pattern to match code blocks with their fences removed\n    fence_pattern = raw\"(?:\\n|)[ \\t]*```[jl-]*\\n?([^\\n]+\\n?)*[ \\t]*```[ \\t]*[\\r\\n]*\"m\n    # Compile the regex to speed up matching\n    regex = Regex(fence_pattern)\n    # Find all matches and join them together with newlines\n    result = match(regex, md) do match\n        # Remove leading whitespace from each line in the block\n        lines = map(String.(match.captures)) do line\n            leading_white = rstrip(line)[1:end-1]  # Strip last character to remove newline\n            leading_white == \"\" ? \"\\n\" : leading_white\n        end\n        # Join the lines with newlines and trim trailing whitespace from the result\n        join(lines, \"\\n\") |> strip\n    end\n    return result\nend\n```","status":200,"tokens":[0,249],"elapsed":6.472413946,"_type":"aimessage"}]