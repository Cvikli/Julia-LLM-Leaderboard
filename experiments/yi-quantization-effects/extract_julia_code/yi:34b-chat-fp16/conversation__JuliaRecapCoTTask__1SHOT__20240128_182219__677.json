[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::AbstractString)::String\n    # Regular expression to match code blocks in Markdown with leading and trailing blank lines, as well as the start and end code fences.\n    # The capturing group captures the text between the code fences without the fences themselves.\n    pattern = r\"^```julia\\n([\\s\\S]*?)^```julia\\n$\"m\n    output = \"\"\n    current_block = \"\"\n\n    for match in eachmatch(pattern, md)\n        # If there's a code block found, append it to the current block.\n        code_text = strip(String(match.captures[1])) # Remove leading and trailing whitespace from captured group 1.\n        current_block *= \"\\n\" * code_text\n    end\n\n    # If there's any non-empty current block, return it.\n    return current_block == \"\" ? nothing : current_block\nend\n```","status":200,"tokens":[11,226],"elapsed":17.616716702,"_type":"aimessage"}]