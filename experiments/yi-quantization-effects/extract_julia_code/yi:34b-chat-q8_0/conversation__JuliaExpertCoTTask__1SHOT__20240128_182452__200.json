[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Data\n\nextract_julia_code(\"\"\"```julia\nprintln(\"hello world\")\n```\"\"\")","variables":["task","data"],"_type":"usermessage"},{"content":"function extract_julia_code(md::AbstractString)\n    output = \"\"\n    in_fence = false\n    fence_char = '`'\n    multiline_fence = '$'\n    multiline_text = ''\n    for c in md\n        if !in_fence && (c == fence_char || c == multiline_fence)\n            in_fence = true\n            fence_char == '`' ? output *= \"\\n\" : nothing\n        elseif in_fence && c == fence_char\n            in_fence = false\n        elseif in_fence && (c == '\\n' || c == ' ')\n            multiline_text *= c\n        elseif in_fence && !(c == '\\n' || c == ' ')\n            multiline_text *= c\n        end\n    end\n    output = replace(output, multiline_text => \"\\n\" * multiline_text * \"\\n\")  # Replace the multiline text with a newline on both sides\n    return output\nend\n\nextract_julia_code(\"\"\"```julia\nprintln(\"hello world\")\n```\"\"\") == \"hello world\\n\"","status":200,"tokens":[0,294],"elapsed":13.223283871,"_type":"aimessage"}]