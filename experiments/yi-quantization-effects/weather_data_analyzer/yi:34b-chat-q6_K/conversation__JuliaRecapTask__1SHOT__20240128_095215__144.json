[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps::Vector{<:Number})\n    len = length(temps)\n    if len == 0\n        return (average=nothing, max=nothing, min=nothing, trend=nothing)\n    end\n\n    avg = mean(temps)\n    max_temp = maximum(temps)\n    min_temp = minimum(temps)\n    diffs = [t - prev_t for t in temps[2:end], prev_t in temps[1:(end-1)] ]\n    trend = if sum(diffs) > 0\n        \":increasing\"\n    elseif sum(diffs) < 0\n        \":decreasing\"\n    else\n        \":stable\"\n    end\n\n    return (average=avg, max=max_temp, min=min_temp, trend=trend)\nend\n```\n\nThis function uses the `Statistics` package to compute the mean (`average`) and the maximum and minimum temperatures. It then calculates the differences between consecutive temperatures to determine the overall temperature trend. The trend is classified as increasing, decreasing, or stable based on the sum of these differences. If there are no differences (i.e., the list has only one element), the trend is considered \"stable\" since there's no data to indicate a clear direction.\n\nThe function returns a named tuple with the calculated statistics and the trend. If the list is empty, it returns a named tuple with all elements set to `nothing` as instructed.","status":200,"tokens":[0,340],"elapsed":12.815726211,"_type":"aimessage"}]