[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Data\n\nweather_data_analyzer([25, 27, 23, 20, 22])","variables":["task","data"],"_type":"usermessage"},{"content":"```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps)\n    if isempty(temps)\n        return (average = nothing, max = nothing, min = nothing, trend = nothing)\n    end\n\n    mean_temp = mean(temps)\n    max_temp = maximum(temps)\n    min_temp = minimum(temps)\n    trend = if mean_temp > 0\n        if max_temp == mean_temp && min_temp == mean_temp\n            :stable\n        elseif all(x -> x >= mean_temp, temps)\n            :increasing\n        else\n            :decreasing\n        end\n    else\n        nothing\n    end\n\n    return (average = mean_temp, max = max_temp, min = min_temp, trend = trend)\nend\n\nweather_data_analyzer([25, 27, 23, 20, 22])  # Example usage\n```\n\nThis function first checks if the list is empty. If it is, it returns a named tuple with all fields set to `nothing`. If the list is not empty, it calculates the average temperature using `mean()`, the maximum and minimum temperatures using `maximum()` and `minimum()`, respectively. To determine the trend, it uses the mean temperature as a baseline and checks if all the temperatures are equal to the mean (stable), if they are greater than the mean (increasing), or if they are less than the mean (decreasing). If the list contains both higher and lower temperatures than the mean, the trend is set to `nothing` because it's not possible to determine a clear trend.","status":200,"tokens":[0,370],"elapsed":10.866980146,"_type":"aimessage"}]