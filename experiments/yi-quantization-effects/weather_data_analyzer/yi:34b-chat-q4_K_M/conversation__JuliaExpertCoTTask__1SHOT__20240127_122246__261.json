[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Data\n\nweather_data_analyzer([25, 27, 23, 20, 22])","variables":["task","data"],"_type":"usermessage"},{"content":"# Solution\n```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps::Vector{T}) where T <: Real\n    n = length(temps)\n    if n > 0\n        average = mean(temps)\n        max_temp = maximum(temps)\n        min_temp = minimum(temps)\n        trend = if std(temps) / sqrt(n) < 1e-3\n            :stable\n        elseif all(temps[2:end] .> temps[1:(end - 1)])\n            :increasing\n        elseif all(temps[2:end] .< temps[1:(end - 1)])\n            :decreasing\n        else\n            nothing\n        end\n        return (average=average, max=max_temp, min=min_temp, trend=trend)\n    else\n        return (average=nothing, max=nothing, min=nothing, trend=nothing)\n    end\nend\n```\n\n# Check\nTo check the function, we can call it with an example vector of temperatures:\n```julia\nweather_data_analyzer([25, 27, 23, 20, 22])\n```\nThis should return a named tuple with the average, maximum, minimum, and trend. If you want to test the edge case where the list is empty, you can do:\n```julia\nweather_data_analyzer([])\n```\nThis should return a named tuple with all values set to `nothing` as per the task requirements.","status":200,"tokens":[277,354],"elapsed":10.328459093,"_type":"aimessage"}]