[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps::Vector{Number})\n    n = length(temps)\n    if n > 0\n        mean_temp = mean(temps)\n        max_temp = maximum(temps)\n        min_temp = minimum(temps)\n        std_temp = std(temps)\n        trend = if n > 1\n            (std_temp / mean_temp) < (mean(diff(temps)) / mean(temps)) || (mean(diff(temps)) / mean_temp) < (std_temp / mean_temp) ? :stable : (n == 2) ? (temps[2] > temps[1]) ? :increasing : :decreasing\n        else\n            :not_enough_data\n        end\n        return (; average=mean_temp, max=max_temp, min=min_temp, trend=trend)\n    else\n        return (average=nothing, max=nothing, min=nothing, trend=nothing)\n    end\nend\n```\n\nThis function uses the `Statistics` standard library to calculate the mean, maximum, and minimum temperatures from a vector of temperature data. It also calculates the standard deviation to determine the trend in the data. If there are more than two data points, it checks if the standard deviation is less than the mean change or mean divided by the standard deviation, indicating a stable trend. If there are exactly two data points, it compares them directly to determine an increasing or decreasing trend. For lists with zero or one element, it returns `nothing` for all values in the named tuple.","status":200,"tokens":[467,364],"elapsed":16.829221694,"_type":"aimessage"}]