[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction weatherDataAnalyzer(temps)\n    if !isempty(temps)\n        average = mean(temps)\n        maxTemp = maximum(temps)\n        minTemp = minimum(temps)\n        trend = if average > maxTemp / 2.0 && average < minTemp / 2.0\n            :stable\n        elseif average > maxTemp / 2.0\n            :decreasing\n        elseif average < minTemp / 2.0\n            :increasing\n        end\n    else\n        average = nothing\n        maxTemp = nothing\n        minTemp = nothing\n        trend = nothing\n    end\n    return (; Average=average, MaxTemperature=maxTemp, MinTemperature=minTemp, Trend=trend)\nend\n```\n\nLet's test the function:\n\n```julia\ntemps1 = [50.0, 60.0, 70.0]  # Data with increasing trend\ntemps2 = [40.0, 35.0, 25.0]  # Data with decreasing trend\ntemps3 = []                 # Empty data set, should return all `nothing`s\n```\n\nUsage:\n```julia\nWeatherDataAnalyzer(temps1)  # Should return (; Average=60.0, MaxTemperature=70.0, MinTemperature=50.0, Trend=:increasing)\nWeatherDataAnalyzer(temps2)  # Should return (; Average=32.5, MaxTemperature=40.0, MinTemperature=25.0, Trend=:decreasing)\nWeatherDataAnalyzer(temps3)  # Should return (; Average=nothing, MaxTemperature=nothing, MinTemperature=nothing, Trend=nothing)\n```","status":200,"tokens":[467,415],"elapsed":11.139623922,"_type":"aimessage"}]