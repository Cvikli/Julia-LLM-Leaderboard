[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Data\n\nweather_data_analyzer([25, 27, 23, 20, 22])","variables":["task","data"],"_type":"usermessage"},{"content":"```julia\nfunction weather_data_analyzer(temps)\n    n = length(temps)\n    if n == 0\n        return (average=nothing, max=nothing, min=nothing, trend=nothing)\n    end\n\n    # Calculate statistics\n    mean_temp = mean(temps)\n    max_temp = maximum(temps)\n    min_temp = minimum(temps)\n\n    # Trend analysis\n    is_increasing = all(t -> t <= temps[n - 1], temps[1:(end - 1)])\n    is_decreasing = all(t -> t >= temps[n - 1], temps[1:(end - 1)])\n\n    trend = if is_increasing\n        :increasing\n    elseif is_decreasing\n        :decreasing\n    else\n        :stable\n    end\n\n    return (average=mean_temp, max=max_temp, min=min_temp, trend=trend)\nend\n\n# Example usage\nweather_data_analyzer([25, 27, 23, 20, 22]) # Output will be printed here\n```\n\nPlease note that the `weather_data_analyzer` function is defined with a placeholder for the `temps` list. To use it with actual temperature data or example data as provided in the task, you would need to call the function with the appropriate list of temperatures. The output will be a named tuple with the average, maximum, minimum, and trend values. If the list is empty, all fields in the named tuple will be `nothing`.","status":200,"tokens":[0,361],"elapsed":9.646256534,"_type":"aimessage"}]