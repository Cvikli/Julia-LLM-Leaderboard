[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps::Vector{Number})::NamedTuple{(:average, :max, :min, :trend), T} where {T<:Union{Missing, Number}}\n    if isempty(temps)\n        return (; average = nothing, max = nothing, min = nothing, trend = nothing)\n    end\n\n    averages = mean(temps)\n    max_temp = maximum(temps)\n    min_temp = minimum(temps)\n\n    # Trend analysis: We consider a list to be stable if the difference between the max and min of each pair of consecutive daily means is less than 1 degree.\n    daily_averages = [mean(temps[end - day + 1 : end]) for day in 1:length(temps) - 1]\n    is_stable = all(abs(max_temp - min_temp) < 1 for max_temp, min_temp in zip(daily_averages, daily_average[2:end]))\n\n    return (; average=averages, max=max_temp, min=min_temp, trend=(is_stable ? :stable : (temps[end] > averages ? :increasing : :decreasing)), )\nend\n```\n\nThis function uses the `Statistics` package for calculating the mean and extrema of the temperature data. It then performs a simple trend analysis by checking if the difference between the maximum and minimum temperatures of each pair of consecutive daily means is less than 1 degree. If so, the trend is considered stable. Otherwise, it classifies the trend as either increasing or decreasing based on the last value in the sequence relative to the average of the previous days.","status":200,"tokens":[0,388],"elapsed":10.487453243,"_type":"aimessage"}]