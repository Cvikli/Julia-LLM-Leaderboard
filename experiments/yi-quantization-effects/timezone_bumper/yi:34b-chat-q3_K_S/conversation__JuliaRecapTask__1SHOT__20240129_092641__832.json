[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `timezone_bumper(dt,bump)` that increases any provided timestamp by `bump::Int` hours (defaults to +3 hours). Make sure it works only for DateTime types and throws an error for Date types.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction timezone_bumper(dt::DateTime, bump::Integer = 3)\n    if isnan(bump) || !isinteger(bump)\n        throw(ArgumentError(\"`bump` must be a non-NaN integer\"))\n    end\n    return DateTime(Int64(dt.time + Dates.Second(bump * 3600)))\nend\n```\n\nThe function `timezone_bumper` accepts two arguments: a `DateTime` object and an optional `Integer` for the time zone bump in hours. If no explicit bump is provided, it defaults to adding three hours (`3600 * 3 seconds`). The function returns a new `DateTime` with the specified time zone adjustment applied.\n\nThe check for `isnan(bump)` ensures that non-numeric values like strings or dates are not accepted as time zone bumps. The `isinteger(bump)` ensures that the bump is an integer, which is required for seconds arithmetic. If the `DateTime` object is a date without a time component (i.e., if it has a time of 0 seconds), adding hours will result in a non-zero time, and thus a different DateTime.\n\nThe function throws an error if you try to pass a `Date` type as input because Date lacks the time information necessary for this operation.","status":200,"tokens":[0,300],"elapsed":8.414634726,"_type":"aimessage"}]