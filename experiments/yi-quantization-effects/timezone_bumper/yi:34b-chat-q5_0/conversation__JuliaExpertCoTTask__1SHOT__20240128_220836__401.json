[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `timezone_bumper(dt,bump)` that increases any provided timestamp by `bump::Int` hours (defaults to +3 hours). Make sure it works only for DateTime types and throws an error for Date types.\n\n\n\n# Data\n\ntimezone_bumper(DateTime(2023, 4, 10, 12, 0),3)","variables":["task","data"],"_type":"usermessage"},{"content":"```julia\nfunction timezone_bumper(dt::DateTime, bump::Int = 3)\n    if bump >= 0\n        return DateTime(dt.year, dt.month, dt.day, dt.hour + bump, dt.minute, dt.second, dt.millisecond, tz=\"UTC\")\n    else\n        throw(ArgumentError(\"bump must be non-negative\"))\n    end\nend\n```\n\nThis function works as follows:\n\n1. If `bump` is provided and is greater than or equal to zero, it increments the hour of the given `DateTime` by `bump` hours while keeping the rest of the date and time components unchanged.\n2. The resulting `DateTime` object is converted back to a string in UTC timezone for easy printing and comparison.\n3. If `bump` is less than zero, an `ArgumentError` is thrown indicating that the bump value must be non-negative.\n\nTest cases:\n\n```julia\ntimezone_bumper(DateTime(2023, 4, 10, 12, 0), 3)  # Should return DateTime(2023, 4, 10, 15, 0, 0)\ntimezone_bumper(DateTime(2023, 4, 10, 12, 0), -3) # Throws ArgumentError\n```","status":200,"tokens":[0,321],"elapsed":10.224751818,"_type":"aimessage"}]