[{"content":"你是一名资深的 Julia 编程语言专家，通晓最新的 Julia 语法。 你的回复总是简洁而准确，请只在对你的答案非常确信的情况下作答。","variables":[],"_type":"systemmessage"},{"content":"# 题目\n\n实现一个 `wrap_string` 函数，遍历给定字符串中的每个单词，如果当前行的长度超过了 `text_width::Int=10`，那么在末尾单词前插入换行符。提供给一个例子","variables":["ask"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width::Int = 10)\n    lines = split(text, \"\\n\"; keepempty = false)\n    for (i, line) in enumerate(lines)\n        if length(line) > text_width\n            # 在单词间查找最后一个小于等于 text_width 的位置\n            position = findlast(s -> s <= text_width, eachindex(line)) - 1\n            # 如果找到，插入换行符\n            if position >= 1\n                lines[i] = line[1:position] * \"\\n\" * line[(position+1):end]\n            end\n        end\n    end\n    return join(lines, \"\\n\")\nend\n\n# 例子\ntext = \"这是一个很长的句子，我们希望它在换行时能保持格式。\"\nprintln(wrap_string(text))\n```\n\n这个函数会返回一个新字符串，其中每个单词都在新的一行开始，除非该行的长度超过 `text_width`。如果当前行的长度超过限制，则会尝试在最后一个小于等于 `text_width` 的位置插入换行符，并将剩余的单词移动到下一行。如果找不到这样的位置（即所有单词的长度都大于 `text_width`），则不会进行任何操作。","status":200,"tokens":[0,293],"elapsed":9.822334488,"_type":"aimessage"}]