[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a DataFrame `df_cars` with car data with columns `manufacturer` and `model`. Write a function audi_filter that filters down the dataset to only the rows with manufacturer “audi” and model being “a4 or “a4 quattro”, then it should create a new column `audi_a4_type` that equals `true` across all rows. Then return the resulting DataFrame.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Assuming you're using DataFrames from Pandas:\n\n```julia\nfunction audi_filter(df::DataFrame; instructions=\"\")\n    # Filter down to just Audi cars and create a new column for them.\n    df[:audi] = (df[:manufacturer].==\"Audi\") .& (df[:model].isin([\"a4\", \"quattro\"]))\n\n    if !isempty(instructions)  # If instructions are provided, prioritize them.\n        eval(parse(Meta.parse(instructions)))\n\n    df\nend\n```\n\nFor example: `df = audi_filter(df; \"df[df[:model] .== 'a4', :model] = \\\"A4\\\";\")`","status":200,"tokens":[0,171],"elapsed":1.385897279,"_type":"aimessage"}]