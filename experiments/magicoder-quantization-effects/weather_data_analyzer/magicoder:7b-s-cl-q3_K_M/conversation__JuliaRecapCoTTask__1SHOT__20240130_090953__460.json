[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's an example solution for this problem. Note that you need to install the Statistics package if it's not already installed using Pkg.add(\"Statistics\"). \n\n```julia\nusing Statistics, NamedTupleTools\n\nweather_data_analyzer(temps) = begin\n    isempty(temps) && return (; average=nothing, max=nothing, min=nothing, trend=nothing)\n    \n    avg = mean(temps)\n    max_temp = maximum(temps)\n    min_temp = minimum(temps)\n    trend_symbol = if max_temp > min_temp \"increasing\" elseif max_temp < min_temp \"decreasing\" else :stable end \n    \n    (; average=avg, max=max_temp, min=min_temp, trend=trend_symbol)\nend\n```\nIn this code, the function `weather_data_analyzer` takes in a list of daily temperature data and calculates the mean (`mean`), maximum (`maximum`), and minimum temperatures. It then checks if the maximum temperature is greater than or lesser than the minimum temperature to determine the trend, i.e., it will be `:increasing`, `:decreasing`, or `:stable`. If the list of temps is empty (i.e., no data), it returns a named tuple with all values set to `nothing`.\n\nThis solution handles edge cases and considers the instructions given in the problem statement, so if there are any specific instructions that need to be added, they would be included in this function.","status":200,"tokens":[0,352],"elapsed":2.841810335,"_type":"aimessage"}]