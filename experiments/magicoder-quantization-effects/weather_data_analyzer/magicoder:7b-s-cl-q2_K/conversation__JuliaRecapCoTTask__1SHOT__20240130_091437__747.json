[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's an example solution that uses Julia's `Statistics` package:\n\n```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps)::NamedTuple{(:avg, :max, :min, :trend), Tuple{Union{Float64, Nothing}, Union{Float64, Nothing}, Union{Float64, Nothing}, Symbol}}\n    if isempty(temps)\n        return (avg = nothing, max = nothing, min = nothing, trend = nothing)\n    else\n        avg = mean(temps)\n        max_temp = maximum(temps)\n        min_temp = minimum(temps)\n        \n        if avg > max_temp \n            return (avg=avg,max=max_temp,min=min_temp,trend=:decreasing)\n        elseif avg < min_temp \n            return (avg=avg,max=max_temp,min=min_temp,trend=:increasing)\n        else\n            return (avg=avg,max=max_temp,min=min_temp,trend=:stable)\n        end\n    end\nend\n```\n\nThis function first checks if the `temps` array is empty. If it is, it returns a named tuple with all values set to `nothing`. If the list has elements in it, it calculates the average (`avg`), maximum (`max`), and minimum (`min`) temperatures from the input list. It then checks which temperature is greater or smaller than the average. Based on this comparison, it assigns one of three possible trends: `:decreasing`, `:increasing`, or `:stable`.","status":200,"tokens":[0,380],"elapsed":2.986643136,"_type":"aimessage"}]