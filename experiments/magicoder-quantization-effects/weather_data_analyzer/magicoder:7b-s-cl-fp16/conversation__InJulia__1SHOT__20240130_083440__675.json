[{"content":"Act as a helpful AI assistant","variables":[],"_type":"systemmessage"},{"content":"In Julia, You are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.","variables":[],"_type":"usermessage"},{"content":"```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps)\n    if isempty(temps)\n        return (average=nothing, max=nothing, min=nothing, trend=nothing)\n    end\n\n    average = mean(temps)\n    max_temp = maximum(temps)\n    min_temp = minimum(temps)\n    \n    if length(unique(diff([max_temp; temps]))) == 1 && diff([max_temp; temps])[1] > 0\n        trend = :increasing\n    elseif length(unique(diff([min_temp; temps]))) == 1 && diff([min_temp; temps])[1] < 0\n        trend = :decreasing\n    else\n        trend = :stable\n    end\n\n    (average=average, max=max_temp, min=min_temp, trend=trend)\nend\n```\n\nThis function first checks if the `temps` list is empty. If it's not empty, then calculates mean, maximum and minimum temperatures using the statistics package functions. Then, checks the temperature changes for a trend. The trend can be only :increasing, :decreasing or :stable. It uses diff function to compute differences of consecutive elements and unique function to check if all differences are equal (i.e., it's stable). \n\nFor example:\n```julia\ntemps = [23, 24, 21, 25]\nweather_data_analyzer(temps)\n```\nThis will return a named tuple containing average temperature, max, min and trend.","status":200,"tokens":[0,375],"elapsed":6.587701335,"_type":"aimessage"}]