[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's an example solution in Julia:\n\n```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps)\n    if isempty(temps)\n        return (average = nothing, max = nothing, min = nothing, trend = nothing)\n    end\n    \n    average = mean(temps)\n    maxTemp = maximum(temps)\n    minTemp = minimum(temps)\n    \n    if average < temps[1] && temps[2:end-1] > temps[1]\n        trend = :increasing\n    elseif average > temps[1] && temps[2:end-1] < temps[1]\n        trend = :decreasing\n    else\n        trend = :stable\n    end\n    \n    return (average = average, max = maxTemp, min = minTemp, trend = trend)\nend\n```\n\nThis function first checks if the `temps` list is empty. If it is, it returns a named tuple with all values set to `nothing`. \n\nIf the list is not empty, it calculates the average temperature, maximum and minimum temperatures using the `mean`, `maximum` and `minimum` functions from Julia's standard library. It then checks the trend of the weather data by comparing the first day's temperature with all subsequent days. If the average temperature is lower than the first day's temperature and all subsequent days are warmer, it sets the trend to `:increasing`. If the average temperature is higher than the first day's temperature and all subsequent days are cooler, it sets the trend to `:decreasing`. Otherwise, it sets the trend to `:stable`.\n\nFinally, it returns a named tuple containing the calculated values.","status":200,"tokens":[0,392],"elapsed":6.897827357,"_type":"aimessage"}]