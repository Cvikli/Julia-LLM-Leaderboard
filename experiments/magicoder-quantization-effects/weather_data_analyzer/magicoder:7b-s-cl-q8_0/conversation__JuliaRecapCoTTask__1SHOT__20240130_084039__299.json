[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's an example solution for the problem:\n\n```julia\nusing Statistics \n\nfunction weather_data_analyzer(temps)::NamedTuple\n    if isempty(temps)\n        return (average = nothing, max = nothing, min = nothing, trend = nothing)\n    end\n    \n    average = mean(temps)\n    maxTemp = maximum(temps)\n    minTemp = minimum(temps)\n    \n    if average > first(temps)\n        trend = :increasing\n    elseif average < first(temps)\n        trend = :decreasing\n    else\n        trend = :stable\n    end\n    \n    return (average = average, max = maxTemp, min = minTemp, trend = trend)\nend\n```\n\nThis function works by first checking if the list of temperatures is empty. If it is, then a named tuple with all values set to `nothing` is returned.\n\nIf the list is not empty, the mean (average), maximum and minimum temperature values are calculated using built-in functions from the `Statistics` package. \n\nThen, based on the comparison of the average temperature to the first temperature in the list, it sets the trend value to either `:increasing`, `:decreasing`, or `:stable`.\n\nFinally, a named tuple is returned containing the calculated values.","status":200,"tokens":[0,310],"elapsed":3.565270906,"_type":"aimessage"}]