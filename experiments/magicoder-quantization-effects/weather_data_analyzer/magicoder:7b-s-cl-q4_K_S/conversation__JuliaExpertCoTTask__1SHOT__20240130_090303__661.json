[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Data\n\nweather_data_analyzer([25, 27, 23, 20, 22])","variables":["task","data"],"_type":"usermessage"},{"content":"In Julia, you can use built-in libraries like Statistics and NamedTuple for this task. Here is the function `weather_data_analyzer`:\n\n```julia\nusing Statistics: mean, extrema, describe\n\nfunction weather_data_analyzer(temps)\n    if isempty(temps)\n        return (; average=nothing, max=nothing, min=nothing, trend=nothing)\n    else\n        avg = mean(temps)\n        minmax = extrema(temps)\n        desc = describe(temps)\n        \n        trend = ifelse(desc.mean > desc.min, :increasing, \n                       (ifelse(desc.mean < desc.min, :decreasing, :stable)))\n\n        return (; average=avg, max=minmax[2], min=minmax[1], trend=trend)\n    end\nend\n```\n\nYou can then call the function with your data:\n\n```julia\ntemps = [25, 27, 23, 20, 22]\nweather_data_analyzer(temps)\n```\n\nThe `describe` function provides a lot of useful information about your data. In this case, we're using it to get the minimum and maximum values (`minmax`). If all temperatures are greater than or equal to the mean (average), the trend is `:increasing`. Otherwise, if all temperatures are less than or equal to the average, then it's `:decreasing`, otherwise it's `:stable`.","status":200,"tokens":[0,358],"elapsed":2.772901289,"_type":"aimessage"}]