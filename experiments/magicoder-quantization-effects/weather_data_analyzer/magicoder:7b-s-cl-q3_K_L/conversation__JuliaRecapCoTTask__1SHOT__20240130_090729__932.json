[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"In Julia, the solution could look like: \n\n```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps)\n    if isempty(temps)\n        return (; average=nothing, max=nothing, min=nothing, trend=nothing)\n    else\n        avg = mean(temps)\n        maxTemp = maximum(temps)\n        minTemp = minimum(temps)\n        \n        temp_diff = [temp - avg for temp in temps]\n        if all(temp_diff .<= 0, dims=1)\n            trend = :decreasing\n        elseif all(temp_diff .>= 0, dims=1)\n            trend = :increasing\n        else \n            trend = :stable\n        end\n        \n        return (; average=avg, max=maxTemp, min=minTemp, trend=trend)\n    end\nend\n```\nThis function first checks if the array is empty. If it is, it constructs a named tuple with all values set to `nothing`.\n\nIf the array is not empty, it calculates the average, maximum and minimum temperatures using the `mean`, `maximum` and `minimum` functions from the Statistics package respectively. \n\nThe function then computes the difference between each temperature and the average for all days. If this difference is always less than or equal to zero, the trend is classified as `:decreasing`. If the difference is always greater than or equal to zero, the trend is classified as `:increasing`. Otherwise, the trend is classified as `:stable`.\n\nFinally, it constructs and returns a named tuple with all these values.","status":200,"tokens":[0,382],"elapsed":3.185717567,"_type":"aimessage"}]