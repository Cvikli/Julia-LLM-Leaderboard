[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's how you might approach this problem:\n\n```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps)::NamedTuple\n    # check if the list is empty\n    if isempty(temps)\n        return (average=nothing, max=nothing, min=nothing, trend=nothing)\n    end\n    \n    avg = mean(temps)\n    max_temp = maximum(temps)\n    min_temp = minimum(temps)\n    \n    # check if temperature is increasing, decreasing or stable\n    trend = ifelse(max_temp - avg > 0, :increasing, ifelse(avg - min_temp > 0, :decreasing, :stable))\n\n    return (average=avg, max=max_temp, min=min_temp, trend=trend)\nend\n```\n\nThis function first checks whether the list of daily temperatures is empty. If it is, it returns a named tuple with all values set to `nothing`. \n\nIf the list isn't empty, it calculates the average temperature, the maximum and minimum temperatures in the list, and then determines the trend based on these three values. The trend is set to `:increasing` if the maximum temperature exceeds the average of the rest of the list, to `:decreasing` if the average of the rest of the list exceeds the minimum temperature, and to `:stable` otherwise. \n\nFinally, it returns a named tuple containing the calculated values.","status":200,"tokens":[0,345],"elapsed":3.093580852,"_type":"aimessage"}]