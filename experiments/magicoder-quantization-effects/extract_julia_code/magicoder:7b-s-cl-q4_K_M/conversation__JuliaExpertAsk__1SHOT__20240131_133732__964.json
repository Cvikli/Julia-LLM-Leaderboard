[{"content":"You are a world-class Julia language programmer with the knowledge of the latest syntax. Your communication is brief and concise. You're precise and answer only when you're confident in the high quality of your answer.","variables":[],"_type":"systemmessage"},{"content":"# Question\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.","variables":["ask"],"_type":"usermessage"},{"content":"Here is a Python solution using the `markdown` library to parse Markdown text:\n\n```python\nimport markdown\nfrom markdown import Extension\nfrom markdown.blockprocessors import BlockProcessor\nfrom markdown.util import etree\n\nclass JuliaCodeBlockProcessor(BlockProcessor):\n    FENCE_RE = r'^```(.*)$'\n    \n    def test(self, parent, block):\n        return bool(self.FENCE_RE.match(block))\n        \n    def run(self, parent, blocks):\n        code = '\\n'.join(blocks[1:-1])  # remove first and last line (fences)\n        etree.SubElement(parent, 'pre').text = code\n        return []  # empty list means block was used\n        \nclass JuliaCodeExtension(Extension):\n    def extendMarkdown(self, md, md_globals):\n        md.parser.blockprocessors['juliacode'] = JuliaCodeBlockProcessor(md.parser)\n        \ndef extract_julia_code(markdown_doc):\n    md = markdown.Markdown(extensions=[JuliaCodeExtension()])\n    html = md.convert(markdown_doc)\n    \n    return html  # this will be the pre-formatted code block\n```\nThis script defines a new extension for Markdown that looks for blocks of text between three backticks (```) to define Julia code blocks. The `test` method in the `JuliaCodeBlockProcessor` class checks if a line is a fence, and the `run` method extracts the content inside the fences (excluding the fences themselves) and places it into a `<pre>` element in the HTML output.\n\nThe `extract_julia_code` function creates an instance of the Markdown parser with our new extension and then uses it to convert the input markdown document into HTML. The result is the pre-formatted code block as a string.\n\nRemember, you'll need to install the `markdown` library if you haven't done so already:\n```bash\npip install markdown\n```","status":200,"tokens":[0,476],"elapsed":3.830278584,"_type":"aimessage"}]