[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"The following function `extract_julia_code` uses Regex to match all Julia language code fences (```julia) and then concatenates the matched strings without the fences:\n\n```julia\nusing RegularExpressions\n\nfunction extract_julia_code(md::AbstractString; instructions=\"\")\n    regex = r\"```julia(.+?)```\"s\n    matches = collect(eachmatch(regex, md))\n    if isempty(matches)\n        return \"\"\n    end\n    \n    code_blocks = mapreduce(m -> m.captures[1], join, matches) do s\n        replace(s, r\"```\" => \"\")\n    end\n\n    # Apply any special instructions here...\n\n    join(code_blocks, \"\\n\")\nend\n```\nPlease note that the function `extract_julia_code` only deals with extracting and joining code blocks. Your task also requires you to handle the \"Special Instructions\". The handling of these instructions will depend on what the specific instructions are. You may need to parse them into a structured format (like an AbstractDict or similar), then apply different operations depending on their content. If there are no special instructions, just return the joined code blocks as is.","status":200,"tokens":[0,285],"elapsed":5.062179784,"_type":"aimessage"}]