[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"The problem doesn't specify exactly what kind of markdown document `md` has been given as input, but generally the task would be to parse the document and extract Julia code blocks, which are delimited by triple back ticks. \n\nHere is a possible implementation in Python using the `mistune` library to parse the markdown:\n\n```python\nimport mistune\n\ndef extract_julia_code(md):\n    parser = mistune.create_markdown(renderer=mistune.AstRenderer())\n    root = parser(md)\n    \n    code_blocks = [node for node in root if node[\"type\"] == \"code\"]\n    \n    return \"\\n\".join([node[\"text\"].strip() for node in code_blocks])\n```\n\nHere is how it works:\n1. We create a markdown parser using the `mistune` library, which is designed to parse markdown into an abstract syntax tree (AST). \n2. Then we parse our input string `md`. This will result in a list of dictionaries, where each dictionary represents one markdown element. The type of the markdown element is given by the key `\"type\"`. If it's a code block (`node[\"type\"] == \"code\"`), then we store its contents into the variable `code_blocks`.\n3. We create our result string, which is formed by joining all Julia code blocks from the input string together with a newline character between each block (`\"\\n\".join(...)`). The `strip()` function is used to remove leading and trailing white spaces from the code blocks. \n\nNote: This implementation assumes that the markdown document uses standard triple back ticks for code blocks. If it uses any specific type of fence (like tilde, or any other special character), this solution will need adjustments to fit those.","status":200,"tokens":[0,406],"elapsed":3.192349369,"_type":"aimessage"}]