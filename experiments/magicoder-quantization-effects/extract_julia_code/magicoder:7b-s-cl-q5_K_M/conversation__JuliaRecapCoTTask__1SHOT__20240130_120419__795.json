[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is how you might solve this problem in Julia:\n\n```julia\nusing Markdown\n\nfunction extract_julia_code(md::AbstractString; instructions=\"\")\n    md_ast = parse_markdown(md)\n    code_blocks = findall(md_ast) do node\n        isa(node, Gist.CodeBlock) && occursin(\"julia\", lowercase(node.info))\n    end\n    code_lines = join([node.code for node in code_blocks], \"\\n\")\n    return String(code_lines)\nend\n```\n\nThis function first parses the markdown document into an Abstract Syntax Tree (AST), which can be used to traverse and analyze the structure of the document. It then finds all code blocks that contain \"julia\" in their info string, indicating they are Julia code blocks. These code blocks are then joined together with a newline character.\n\nIf you want to extract specific code blocks or only certain types of code blocks (such as those with a given keyword), you would need to adjust the `findall` function accordingly. If there's any chance that code could contain multiple lines, you might want to handle that case too - currently, this solution assumes that each code block is a single line.\n\nThe instructions argument allows for special instructions for this task. You can update it in your function call.","status":200,"tokens":[0,304],"elapsed":2.725812519,"_type":"aimessage"}]