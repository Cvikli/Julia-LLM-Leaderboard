[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Data\n\nextract_julia_code(\"\"\"```julia\nprintln(\"hello world\")\n```\"\"\")","variables":["task","data"],"_type":"usermessage"},{"content":"You can use the `each_line` function from Julia's standard library to iterate through each line of the markdown document. If a line starts with three backticks (```), it means that we have reached the start of a code block. We can then collect all lines till we find another line with three backticks as end of the code block.\n\nHere is the implementation:\n\n```julia\nfunction extract_julia_code(md)\n    in_block = false\n    code = []\n    \n    for line in eachline(IOBuffer(md)) # Parse each line from markdown document \n        if startswith(line, \"```\")\n            in_block = !in_block # Toggle whether we are in a code block or not. \n            continue              # Skip this line as it's just a delimiter of code blocks.\n        end\n        \n        if in_block && !startswith(line, \"```\") # If we are in the code block and encounter non-delimiter lines.\n            push!(code, chomp(line))             # Remove trailing newline and add to our code collector.\n        end\n    end\n    \n    join(code, \"\\n\")                              # Join all the code blocks together with a new line. \nend\n```\nNow you can use `extract_julia_code` function:\n\n```julia\nprintln(extract_julia_code(\"```julia\\nprintln(\\\"hello world\\\")\\n```\"))\n```","status":200,"tokens":[0,342],"elapsed":2.770876092,"_type":"aimessage"}]