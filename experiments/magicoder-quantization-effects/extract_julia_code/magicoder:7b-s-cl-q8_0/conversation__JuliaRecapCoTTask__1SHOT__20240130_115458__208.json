[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Below is an implementation in Julia:\n\n```julia\nusing Markdown\nusing CodeSearch\n\nfunction extract_julia_code(md::String)\n    blocks = filter(b -> b.language == \"julia\", CodeSearch.blocks(md))\n    code = join([replace(b.code, r\"```julia\" => \"\") for b in blocks], \"\\n\")\n    return strip(code)  # remove trailing/leading whitespaces\nend\n```\nThis function uses the `Markdown` and `CodeSearch` packages to find all Julia code blocks in a markdown string. It then joins these code blocks together, removing any remaining code fences (backticks). The resulting string is returned after stripping leading and trailing whitespace. \n\nPlease install required packages with:\n```julia\nPkg.add(\"Markdown\")\nPkg.add(\"CodeSearch\")\nusing Markdown\nusing CodeSearch\n```","status":200,"tokens":[0,211],"elapsed":2.460483963,"_type":"aimessage"}]