[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is an example function that could extract the Julia code from Markdown document:\n\n```julia\nusing Markdown\n\nfunction extract_julia_code(md::String)\n    blocks = split(md, \"\\n\")\n    lines = Vector{AbstractString}()\n    inblock = false\n    \n    for line in blocks\n        if startswith(line, \"```julia\") || startswith(line, \"``` julia\")\n            push!(lines, \"\")\n            inblock = true\n        elseif inblock && endswith(line, \"```\")\n            inblock = false\n        elseif inblock\n            line = replace(line, r\"```\" => \"\")\n            line = replace(line, \"`\" => \"\")\n            push!(lines, line)\n        end\n    end\n    \n    return join(lines[2:end], \"\\n\")\nend\n```\n\nHere's how it works:\n- It splits the markdown document into blocks by newline character. \n- Then checks each block to see if it starts or ends with a Julia code fence.\n- If it does, it adds an empty string to `lines` array and changes the value of `inblock`.\n- If a line is within a block (i.e., `inblock` is true), it removes the code fences from that line. \n- Finally, it joins all the lines together with newline character and returns the result.","status":200,"tokens":[0,322],"elapsed":2.82439377,"_type":"aimessage"}]