[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"# Solution in Julia Programming Language:\n\n```julia\nfunction extract_julia_code(md::AbstractString; instructions=\"\")\n    code_blocks = []\n    lines = split(md, '\\n')\n    \n    for line in lines\n        if occursin(\"``\" * \"```\", line) && length(line) >= 3 && startswith(line, '`' * '`') && endswith(line, '`' * '`')\n            code = replace(line[2:end-1], \"`\" => \"\")\n            if instructions == \"\" || occursin(\"{{instructions}}\", code) || !occursin(\"{{instructions}}\", code)\n                push!(code_blocks, code)\n        end\n    end\n    \n    return join(code_blocks, '\\n')\nend\n```\nThe above function `extract_julia_code` scans each line of the markdown document `md`. If it encounters a line with three backticks surrounding code (which is a markdown syntax for indicating a block of code), it extracts the code, removes any enclosing backticks, and pushes it into an array. After scanning all lines, it joins the codes in the array into a single string with newline characters between each code block.\n\nIf special instructions are provided (via `instructions`), we check if they're included within the code or not. If they are, then we keep it. If not, we discard the code blocks.","status":200,"tokens":[0,339],"elapsed":2.812329153,"_type":"aimessage"}]