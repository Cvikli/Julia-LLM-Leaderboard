[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Sure, here is a simple function that would do the task:\n\n```julia\nfunction extract_julia_code(md::AbstractString; instructions::AbstractString=\"\")\n    code_blocks = collect(eachmatch(r'```julia(.*?)```', md))  # get all matching blocks\n    \n    if isempty(code_blocks)\n        return \"\"\n    end\n\n    code = reduce((x, y)->string(x,\"\\n\",y), map(m->match(r'^julia(.*?)', m.captures[1]).captures[1], code_blocks)) # extract the code and join \n\n    return instructions == \"\" ? code : replace(code, \"\\\"{instructions}\\\"\", instructions) # if special instructions are provided, replace them in the code  \nend\n```\nThis function extracts all the julia language code blocks from the markdown string, joins them together with newline characters and returns a string. If special instructions are provided, these instructions are replaced within the resulting code. \n\nPlease note that this function assumes that there is only one syntax block in each code fenced section. If there are multiple syntax blocks (like python), this would require more complex logic to handle properly.","status":200,"tokens":[0,280],"elapsed":2.174405997,"_type":"aimessage"}]