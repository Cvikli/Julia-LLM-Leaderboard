[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"You can use regular expressions to find markdown code fences and extract Julia code blocks from them. Here is a function `extract_julia_code` that does exactly this:\n\n```julia\nfunction extract_julia_code(md::AbstractString, instructions::AbstractString=\"\")\n    # Regular expression pattern to find markdown fenced code blocks\n    # The pattern matches lines starting with three backticks followed by a language declaration (optional) and ends with three backticks. \n    # Inside the code block, anything can appear except a line starting with three backticks.\n    pattern = r\"```(julia\\n|)(.*?)\\n```\"s\n    \n    matches = collect(eachmatch(pattern, md))\n    if isempty(matches)\n        return \"\"  # No code blocks found\n    end\n    \n    # Extract and join the matched strings together with a newline character\n    code_blocks = mapreduce((m)->String(m.captures[2]), *, matches)\n   \n    # Instructions are prioritized over general guidelines \n    if !isempty(instructions)\n        return instructions\n    end\n    \n    # Default is to return the concatenated code blocks\n    return code_blocks\nend\n```\n\nPlease note that this function uses non-greedy matching `.*?` which allows it to match as few characters as possible between fence markers. The `\\n` at the start and end of the pattern makes sure that we're only capturing the lines inside the code block, not any surrounding text. \n\nYou can use this function by calling `extract_julia_code(md::AbstractString)` on your markdown document string. If there are instructions in {{instructions}}, these will be prioritized over the general guidelines, otherwise the concatenated code blocks will be returned.","status":200,"tokens":[0,422],"elapsed":3.929866951,"_type":"aimessage"}]