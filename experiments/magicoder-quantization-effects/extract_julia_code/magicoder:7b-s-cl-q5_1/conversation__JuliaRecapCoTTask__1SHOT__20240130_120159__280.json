[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is an example of how you could implement this in Julia:\n\n```julia\nfunction extract_julia_code(md::String)\n    code = \"\"\n    inside_block = false\n    for c in md\n        if c == '`'\n            if inside_block \n                return code\n            else \n                inside_block = true\n                continue\n            end\n        elseif c == '\\n' && inside_block\n            inside_block = false\n            continue\n        end\n        \n        if inside_block\n            code *= string(c)\n        end\n    end\n\n    return code\nend\n```\nThis function goes through every character of the markdown document `md`. If it encounters a backtick (which is used to denote code blocks in markdown), it toggles the \"inside_block\" flag. If it's inside a block, it simply appends whatever character comes next to `code`. Once it hits a newline while inside a block, it knows that the block has ended and returns `code` containing all of the Julia code.\n  \nNote: This function assumes that there are no nested code blocks within each other. If there might be, additional logic will need to be added to properly handle this case.","status":200,"tokens":[0,277],"elapsed":2.539222637,"_type":"aimessage"}]