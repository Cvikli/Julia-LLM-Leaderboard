[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is the solution in Julia:\n\n```julia\nfunction wrap_string(s, text_width::Int = 10)\n    words = split(s, \" \")\n    result = \"\"\n    line = \"\"\n    \n    for word in words\n        if length(line * \" \" * word) > text_width\n            result *= \"\\n\" * (line * \" \")\n            line = \"\"\n        end\n        \n        line *= word * \" \"\n    end\n    \n    # Add the last line.\n    if !isempty(line)\n        result *= \"\\n\" * line\n    end\n    \n    return result\nend\n\nprintln(wrap_string(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"))\n```\nIn this code `wrap_string` function takes a string and an optional argument for text width. The function splits the input string into words and then checks if adding each word to the current line would exceed the maximum allowed length. If it does, it appends the current line to the result and starts a new one. At the end of the loop, if there is still some text left in the `line` variable (not yet added to `result`), it adds that to the output too.\n\n{{instructions}}  # insert instructions here if provided\n\nPlease replace `\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"` with your own text and adjust the `text_width` as needed.","status":200,"tokens":[0,337],"elapsed":3.00831274,"_type":"aimessage"}]