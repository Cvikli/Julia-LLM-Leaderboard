[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"# Special Instructions\n\n- Use Julia language\n- Don't use any special packages unless explicitly requested. Only standard libraries should be used.\n- Keep the code performance in mind, write clear and efficient code. \n\n# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example:\n\n```julia\nfunction wrap_string(s::String, text_width::Int=10)\n    words = split(s, \" \")\n    lines = Vector{String}()\n    line = \"\"\n    \n    for word in words\n        if length(line * \" \" * word) > text_width\n            push!(lines, line)\n            line = \"\"\n        end\n        \n        line *= word * \" \"\n    end\n    \n    if !isempty(line) # add the last line which is not added yet\n        push!(lines, line)\n    end\n    \n    return join(lines, \"\\n\")\nend\n\nprintln(wrap_string(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc lobortis nibh quam, non iaculis arcu aliquam a.\", text_width=30))\n```\nThis script will wrap the input string `s` into multiple lines with each line having at most `text_width` characters. The function `split(s, \" \")` is used to split the string into words. Then it goes through the list of words and checks if adding a new word would exceed the maximum width. If so, it starts a new line. It appends each line to a vector `lines`, which will contain all lines of the wrapped text. Finally, it joins all lines with newline characters and returns them as a string.","status":200,"tokens":[0,419],"elapsed":3.757821362,"_type":"aimessage"}]