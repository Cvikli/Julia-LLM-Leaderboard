[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is a Julia program that implements the `wrap_string` function according to your specifications:\n\n```julia\nfunction wrap_string(text::AbstractString, text_width::Int=10)\n    words = split(text, ' ')\n    lines = String[]\n    \n    cur_line = \"\"\n    for word in words\n        if length(cur_line * \" $word\") > text_width  # check if line with current word can exceed width\n            push!(lines, cur_line)\n            cur_line = \"\"  # start new line\n        end\n        cur_line *= \" $word\"  # append the word to the current line\n    end\n    \n    if !isempty(cur_line)  # append last line which might exceed the width\n        push!(lines, cur_line)\n    end\n    \n    return join(lines, \"\\n\") * \"\\n\"  # join lines with new lines and add a final newline\nend\n```\n\nLet's use this function to wrap a string. Here is an example:\n\n```julia\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque condimentum lacinia nunc ac ullamcorper. In hac habitasse platea dictumst. Integer a lorem sed diam volutpat ultricies id et enim. Suspendisse potenti. Nulla facilisi.\"\nprintln(wrap_string(text, 30))\n```\nIn this example, the `text` string is being wrapped into multiple lines with each line having a maximum of 30 characters. The output should be similar to:\n\n```julia\n\"Lorem ipsum dolor sit amet,\\nconsectetur adipiscing elit.\\nQuisque condimentum lacinia nunc ac\\nullamcorper. In hac habitasse platea dictumst.\\nInteger a lorem sed diam volutpat ultricies id et enim.\\nSuspendisse potenti.\\nNulla facilisi.\"\n```","status":200,"tokens":[0,469],"elapsed":3.686434392,"_type":"aimessage"}]