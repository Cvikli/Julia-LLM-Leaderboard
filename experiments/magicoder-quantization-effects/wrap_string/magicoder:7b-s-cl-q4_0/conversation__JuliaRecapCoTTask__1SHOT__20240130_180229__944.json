[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Below is the function to solve this task:\n```julia\nfunction wrap_string(str, text_width::Int = 10)\n    words = split(str, ' ')   # Split string into array of words.\n    result = \"\"              # Initialize final result as empty string.\n    line = \"\"                # Initialize current line as empty string.\n\n    for word in words\n        if length(line * \" $word\") > text_width  # If adding the next word exceeds the width, start a new line.\n            result *= \"\\n\"                       # Append newline to result.\n            line = \"\"                             # Reset current line.\n        end\n        line *= \" $word\"                          # Add word to current line.\n    end\n    result *= \"$line\\n\"   # Append the last, non-wrapped line to the result and a newline.\n    return result\nend\n```\n\nFor example:\n```julia\nprint(wrap_string(\"Hello world, this is an example of wrapping text\", 15))\n```\nThis function takes a string `str` and an optional integer `text_width=10`. It splits the string into individual words using the space character as a delimiter. It then iterates over each word, adding it to a line. When the length of this line exceeds the provided text width, a newline is added to the final result and the current line is reset. Finally, after all words have been processed, the last non-wrapped line is appended along with a newline character.","status":200,"tokens":[0,348],"elapsed":2.701118328,"_type":"aimessage"}]