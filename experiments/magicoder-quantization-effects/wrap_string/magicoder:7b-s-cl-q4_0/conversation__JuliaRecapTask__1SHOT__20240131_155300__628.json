[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's the code for the function `wrap_string`:\n```julia\nfunction wrap_string(words, text_width::Int = 10)\n    result = \"\"\n    current_length = 0\n    \n    for word in words\n        if (current_length + length(word) > text_width) || (length(result) == 0 && length(word) > text_width)\n            result *= \"\\n\"\n            current_length = 0\n        end\n        \n        if length(word) > text_width\n            error(\"Word '$(word)' is too long to fit in the line width $(text_width)\")\n        end\n        \n        result *= word\n        result *= \" \"\n        current_length += length(word) + 1 # space after each word\n    end\n    \n    return result\nend\n```\nThis function takes a list of words and an optional `text_width` parameter. It iterates over the words, adding a newline character whenever the current line would exceed the maximum width (or if this is the first word in the sentence). Each word is then added to the result string along with a space. The length of each word plus one (for the space) is added to `current_length` for the next iteration.\n\nExample usage:\n```julia\nwords = [\"This\", \"is\", \"a\", \"test\", \"sentence\"]\ntext_width = 10\nprintln(wrap_string(words, text_width))\n# Output: \n# This is a \n# test sentence\n```\nIn this example, the words \"This\" and \"is\" fit in one line (because their combined length is less than `text_width`), while \"a\", \"test\", and \"sentence\" are each added on a new line.","status":200,"tokens":[0,405],"elapsed":3.15668339,"_type":"aimessage"}]