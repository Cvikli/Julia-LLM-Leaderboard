[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is the Julia code that solves this problem:\n```julia\nfunction wrap_string(s::String, text_width::Int=10) \n    words = split(s, ' ')\n    str = \"\"\n    for word in words\n        if length(str) + length(word) > text_width && !isempty(str) \n            println(str)\n            str = \" \" * string(word)\n        elseif isempty(str)\n            str = string(word)\n        else\n            str *= \" \" * word\n        end\n    end\n    println(str)\nend\n\n# example usage: \nwrap_string(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis nec nibh non tortor convallis condimentum.\")\n```\nThis code creates a function `wrap_string` that accepts a string and an optional integer for the maximum length of text per line (default is 10). The string is then split into words using space as the delimiter. For each word, it checks if adding it to the current string would cause it to exceed the maximum length. If so, it prints the current string and starts a new one with the current word. Otherwise, it simply adds the word to the end of the current string. At the end, it prints the final line of text (in case there are words left over that do not fit).","status":200,"tokens":[364,316],"elapsed":2.50218645,"_type":"aimessage"}]