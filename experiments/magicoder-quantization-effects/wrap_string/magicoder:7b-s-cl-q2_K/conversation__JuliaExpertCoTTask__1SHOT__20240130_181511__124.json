[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"Here is the Julia solution:\n```julia\nfunction wrap_string(s::String, text_width::Int = 10)\n    words = split(s)\n    nwords = length(words)\n    i = 1\n    wrapped = \"\"\n    while i <= nwords\n        word = words[i]\n        if text_width == -1 || text_width <= length(wrapped)+length(word)\n            wrapped *= \"\\n\"*word\n            i += 1\n        else\n            wrapped *= \" \"*word\n        end\n    end\n    return wrapped\nend\n```\nExample:\n```julia\nprint(wrap_string(\"This function will wrap words into lines\", -1))\n```\nIn the above code, we are splitting the input string into separate words and checking if adding a new word to the `wrapped` string would exceed the specified width. If it would, we add a newline before the word; otherwise, we just space it out in the current line.\nWe use `-1` for `text_width` as this will allow us to have an unlimited line length without specifying a specific width limit. The function will therefore wrap each word on its own new line.","status":200,"tokens":[0,272],"elapsed":2.063904796,"_type":"aimessage"}]