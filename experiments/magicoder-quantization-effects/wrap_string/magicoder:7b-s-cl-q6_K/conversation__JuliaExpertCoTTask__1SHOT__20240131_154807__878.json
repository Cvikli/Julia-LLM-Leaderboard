[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"Here is the Julia code for your task:\n\n```julia\nfunction wrap_string(input::String, text_width::Int=10)\n    words = split(input)\n    output = \"\"\n    line = \"\"\n\n    for word in words\n        if length(line * \" \" * word) > text_width\n            output *= \"\\n\" * line\n            line = \"\"\n        end\n        line *= \" \" * word\n    end\n    \n    return output * (length(line) > 0 ? \"\\n\" * line : \"\")\nend\n```\n\nThe function `wrap_string` takes two arguments: the input string and an optional maximum width of the text. It splits the input string into words, then iterates over these words. For each word, it checks if adding this word to the current line would exceed the maximum width. If so, it appends the current line to the output (with a newline in front), and starts a new line with just this word. At the end of the input string, it adds any remaining text on the last line to the output.","status":200,"tokens":[0,244],"elapsed":2.335860971,"_type":"aimessage"}]