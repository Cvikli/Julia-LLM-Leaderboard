[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's the code:\n\n```julia\nfunction wrap_string(text::String, text_width::Int=10)\n    words = split(text, ' ')\n    output = \"\"\n    \n    for word in words \n        if length(output) + length(word) > text_width\n            output *= \"\\n\"\n        elseif !isempty(output)\n            output *= \" \"\n        end\n        \n        output *= word\n    end\n    \n    return output\nend\n\nprint(wrap_string(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\", 50))\n```\n\nThe `wrap_string` function splits the input string into words and checks if adding the current word to the output would exceed the given width. If it does, a new line is added to the output; otherwise, a space character is added to preserve natural word spacing. The final wrapped string is then returned.\n\nThe example print statement will return a multi-line string with each line having at most 50 characters.","status":200,"tokens":[0,263],"elapsed":2.584605074,"_type":"aimessage"}]