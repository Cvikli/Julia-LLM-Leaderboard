[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is the Julia function that accomplishes this task:\n\n```julia\nfunction wrap_string(s::String, text_width::Int = 10)\n    words = split(s, \" \")\n    result = \"\"\n    line = \"\"\n    \n    for word in words\n        if length(line * word) > text_width\n            result *= \"\\n\" * line\n            line = word\n        else\n            line *= \" \" * word\n        end \n    end\n\n    return result * \"\\n\" * line  \nend\n```\n\nThis function splits the input string into words and checks whether adding a new word to an existing line would exceed `text_width`. If yes, it appends the current line to the final result and starts a new line with the current word. Otherwise, it just adds the new word to the current line. After iterating over all words, it appends the last line (without newline) to the final result.\n\nFor example, if you call `wrap_string(\"Hello World! How are you?\", 10)`, the output would be:\n```\nHello World!\nHow are you?\n```","status":200,"tokens":[0,259],"elapsed":2.542718491,"_type":"aimessage"}]