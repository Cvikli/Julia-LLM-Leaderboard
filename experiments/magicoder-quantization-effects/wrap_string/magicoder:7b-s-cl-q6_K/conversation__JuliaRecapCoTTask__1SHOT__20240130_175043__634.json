[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text, text_width = 10)\n    words = split(text, ' ')\n    result = \"\"\n    current_line_length = 0\n    \n    for word in words\n        if length(word) > text_width\n            # If a word is longer than the maximum line width\n            # then we need to start a new line and add this word there.\n            if !isempty(result)\n                result *= \"\\n\"\n            end\n            result *= word\n        elseif current_line_length + length(word) > text_width\n            # If the next word would exceed the maximum line width,\n            # then start a new line and add this word there.\n            if !isempty(result)\n                result *= \"\\n\"\n            end\n            result *= word\n        elseif current_line_length == 0 && !isempty(word)\n            # If the first word of a line is longer than the maximum line width, then we start a new line and add this word there.\n            if !isempty(result)\n                result *= \"\\n\"\n            end\n            result *= word\n        elseif current_line_length != 0\n            # If we are not on a new line yet, then append a space before the word.\n            result *= \" $word\"\n        else\n            # Otherwise just add this word to our result string.\n            result *= word\n        end\n        \n        current_line_length = length(result)\n    end\n    \n    return result\nend\n```\n\nAn example usage of the `wrap_string` function would look something like this:\n\n```julia\ntext = \"This is a test string which will be used for wrapping text. The maximum width is 10 and we will check if it exceeds that limit.\"\nprint(wrap_string(text))\n```\n\nThis code creates a new line after every word that would exceed the `text_width` limit, including the first word of each line. It also ensures that there's at least one space before each word and that words are not split in half. If no instructions are provided for wrapping text, this is how it will be done by default.","status":200,"tokens":[11,506],"elapsed":5.037549524,"_type":"aimessage"}]