[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is the Julia function `wrap_string`:\n```julia\nfunction wrap_string(str::String, text_width::Int=10)\n    words = split(str, ' ')\n    output = \"\"\n    line = \"\"\n    \n    for word in words\n        if length(line * \" \" * word) > text_width\n            output *= \"\\n\" * line\n            line = \"\"\n        end\n        line *= word * \" \"\n    end\n    return output * line\nend\n```\nYou can call the function with a string and an optional `text_width` parameter like this:\n```julia\nprintln(wrap_string(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. In hac habitasse platea dictumst\", 20))\n```\nThis function splits the input string into words and checks each word if it fits to the current line or not. If a new line would be too long with this word, a newline character is appended to `output` (which contains the wrapped text) and an empty `line` is started. After that, the word and a space are added to the current line `line`. At the end of the string, the remaining non-empty line is also added to `output`, which now contains the wrapped text. \n\nRemember that this function only wraps words at spaces but you can easily modify it if you want to wrap on character or other conditions.","status":200,"tokens":[0,324],"elapsed":2.969829818,"_type":"aimessage"}]