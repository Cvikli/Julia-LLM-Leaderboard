[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(str, text_width::Int=10)\n    words = split(str, \" \")   # Split the string into a list of words.\n    result = \"\"               # Initialize an empty output string.\n    current_line_len = 0      # Initialize a counter for characters in current line.\n\n    for word in words\n        if length(word) > text_width - current_line_len   # If the next word would exceed the limit, start a new line.\n            result *= \"\\n\"                                # Append the newline character to the output string.\n            current_line_len = 0                          # Reset the counter for characters in current line.\n        end\n        if length(word) > text_width                      # If the word itself would exceed limit, add a new line.\n            result *= \"\\n\"                                # Append newline character to output string.\n            current_line_len = 0                          # Reset counter for characters in current line.\n        end\n        result *= \" $word\"                               # Append the word and a space to the output string.\n        current_line_len += length(word) + 1             # Update the character count on the current line.\n    end\n    \n    return result\nend\n\nstr = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\nprintln(wrap_string(str))\n```","status":200,"tokens":[0,327],"elapsed":2.590746247,"_type":"aimessage"}]