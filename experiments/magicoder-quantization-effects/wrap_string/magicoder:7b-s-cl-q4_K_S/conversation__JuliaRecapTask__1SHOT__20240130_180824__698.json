[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is the Julia code for your task:\n```julia\nfunction wrap_string(str, text_width::Int = 10)\n    words = split(str, \" \")\n    res = \"\"\n    line = \"\"\n\n    for word in words\n        if length(line * \" $word\") <= text_width\n            if isempty(line)\n                line = \"$word\"\n            else\n                line *= \" $word\"\n            end\n        else\n            res *= \"\\n$line\"\n            line = \"$word\"\n        end\n    end\n\n    return \"$res\\n$line\"\nend\n```\n\nYou can call the function `wrap_string` with a string and an optional integer specifying the maximum character width of each line.\nFor example: \n- `wrap_string(\"Hello World!\")` will return `\"Hello \\nWorld!\"` because \"World!\" exceeds the default text_width of 10 characters. \n- `wrap_string(\"This is a long sentence that should be wrapped\", 20)` will return `\"This is a long sentence that\\nshould be wrapped\"`. Here, \"long sentence\" and \"should\" are on different lines because they exceed the text_width of 20 characters.","status":200,"tokens":[0,281],"elapsed":2.214468433,"_type":"aimessage"}]