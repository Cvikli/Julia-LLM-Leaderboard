[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::String, text_width::Int = 10)\n    words = split(text)\n    result = \"\"\n    line = \"\"\n    for word in words\n        if length(line * \" \" * word) > text_width\n            result *= \"\\n\" * line\n            line = word\n        else\n            line *= \" \" * word\n        end\n    end\n    return result * \"\\n\" * line  # Add the last line\nend\n\nprint(wrap_string(\"This function will wrap words into lines\"))\n```\nIn this code, we first split the input string `text` into a list of words. Then for each word in the list, if adding it to the current line would exceed the maximum width, we start a new line and add it there. If not, we just append the word to the current line. At the end, we also add the last line.","status":200,"tokens":[0,209],"elapsed":1.671208327,"_type":"aimessage"}]