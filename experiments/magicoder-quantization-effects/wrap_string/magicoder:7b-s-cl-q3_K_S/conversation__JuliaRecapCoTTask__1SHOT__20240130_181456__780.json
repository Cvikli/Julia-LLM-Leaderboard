[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Your instructions could be something like:\n- Add spaces at the beginning and end of your string, before wrapping it. \n- Do not add new lines between words if doing so would cause a line length longer than `text_width`.  \n\nHere's an implementation for that:\n\n```julia\nfunction wrap_string(str::AbstractString, text_width::Int=10)\n    words = split(str, \" \")\n    output_str = \"\"\n    line_len = 0\n    for word in words\n        if line_len + length(word) > text_width\n            output_str *= \"\\n\"\n            line_len = 0\n        elseif !isempty(output_str) && line_len != 0\n            output_str *= \" \"\n            line_len += 1\n        end\n        output_str *= word\n        line_len += length(word)\n    end\n    return output_str\nend\n```\nThe function takes a string and the `text_width` as input. It splits the string into words, checks each word if adding it to the current line would cause this line to exceed `text_width`. If so, it starts a new line. At the end of all words are concatenated together, spaces between lines are added.","status":200,"tokens":[0,292],"elapsed":2.341009975,"_type":"aimessage"}]