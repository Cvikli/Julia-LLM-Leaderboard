[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"In Julia, we can write the function like this:\n\n```julia\nfunction wrap_string(text::AbstractString; text_width::Int=10)\n    words = split(text, \" \")\n    lines = []\n    \n    curr_line = \"\"\n    for word in words\n        if length(curr_line * \" \" * word) <= text_width\n            push!(lines, curr_line * \" \" * word)\n            curr_line = \"\"\n        else\n            push!(lines, curr_line)\n            curr_line = word\n        end\n    end\n    \n    if !isempty(curr_line)\n        push!(lines, curr_line)\n    end\n\n    return join(lines, '\\n')\nend\n```\n\nNow let's test this function with the text `\"Hello World\"`. Its length exceeds 10. If we set `text_width=10`, then it will break into two lines. Otherwise, it is a single line.\n\n```julia\nprint(wrap_string(\"Hello World\"; text_width=12))\nprint(wrap_string(\"Hello World\"; text_width=20))\n```\n\nThe output would be:\n```\nHello \nWorld\n\nHello World\n```","status":200,"tokens":[0,289],"elapsed":2.315774872,"_type":"aimessage"}]