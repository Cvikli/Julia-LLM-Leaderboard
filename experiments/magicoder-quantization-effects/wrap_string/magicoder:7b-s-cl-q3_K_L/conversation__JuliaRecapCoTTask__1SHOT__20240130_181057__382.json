[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is the code for the task:\n```julia\nfunction wrap_string(input::AbstractString, text_width::Int = 10)\n    words = split(input, ' ')\n    output = \"\"\n    \n    for word in words\n        if length(output * \" $word\") > text_width\n            output *= \"\\n\"\n        end\n        \n        output *= \"$word \"\n    end\n    \n    return output[1:end-1] # remove last whitespace at the end of string\nend\n\n# Example usage: \ninput = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam nec diam justo.\"\nprintln(wrap_string(input))\n```\nThis function uses a simple rule to check if the length of output + current word will exceed `text_width`. If it does, we append a newline character (`\\n`) to the `output` string. \n\nThe resulting string is then returned after removing the last whitespace at the end.\n\nNote: The `*` operator in Julia concatenates strings, and we need to add a trailing space after each word to avoid this from happening accidentally. We also ensure that the last character of the output is not a whitespace.","status":200,"tokens":[0,279],"elapsed":2.28495741,"_type":"aimessage"}]