[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `keep_only_names` which iterates over the provided list of words (`words`) and removes all words that do not start with a capital letter (eg, remove \"dog\" but keep \"Dog\").\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's how you can write the function:\n\n```julia\nfunction keep_only_names(words)\n    filter(word -> first(word) == uppercase(first(word)), words)\nend\n```\nHere, `filter` is a higher-order function that applies its first argument (a condition) to each element of the collection (the second argument) and keeps only those elements for which the condition is true. In our case, we use it to filter out words that do not start with a capital letter by checking if the first character in the word is the same as the uppercase version of itself.\n\nLet's test this function:\n\n```julia\nwords = [\"Dog\", \"cat\", \"Cat\", \"dog\"]\nprintln(keep_only_names(words)) # returns [\"Dog\", \"Cat\"]\n```","status":200,"tokens":[0,187],"elapsed":1.466857834,"_type":"aimessage"}]