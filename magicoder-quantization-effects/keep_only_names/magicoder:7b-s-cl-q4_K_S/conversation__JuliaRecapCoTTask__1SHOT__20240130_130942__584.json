[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `keep_only_names` which iterates over the provided list of words (`words`) and removes all words that do not start with a capital letter (eg, remove \"dog\" but keep \"Dog\").\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is a simple solution using Julia. In this script, we define a function `keep_only_names` which takes in a list of words and removes all the words that do not start with an uppercase letter.\n\n```julia\nfunction keep_only_names(words)\n    return filter(word -> isuppercase(first(word)), words)\nend\n```\nIn this function, we use the built-in `filter` function to iterate over every word in the provided list. For each word, we check if the first letter (accessed with `first`) of the string is an uppercase letter using `isuppercase`. If it is, we keep that word; otherwise, we discard it.\n\nThis solution assumes that the provided words are strings. If they can be something other than a string (like symbols or numbers), you might want to modify this function accordingly.\n\nIf there are special instructions given in the prompt, these would usually involve tweaking the implementation of the `keep_only_names` function. For example, if the instruction was to ignore all words that contain any number of specific characters, we could add a condition to check for those characters and discard those words.","status":200,"tokens":[0,257],"elapsed":2.035303317,"_type":"aimessage"}]