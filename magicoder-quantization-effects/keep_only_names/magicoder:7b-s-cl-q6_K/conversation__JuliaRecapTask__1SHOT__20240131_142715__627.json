[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `keep_only_names` which iterates over the provided list of words (`words`) and removes all words that do not start with a capital letter (eg, remove \"dog\" but keep \"Dog\").\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is a Julia function that solves your problem:\n\n```julia\nfunction keep_only_names(words)\n    return filter(word -> isuppercase(first(word)), words)\nend\n```\nThis function uses the `filter` function from Julia's standard library to iterate over each word in the provided list (`words`). The `isuppercase` function checks if the first character of a string (`first(word)`) is an uppercase letter. If it is, the function includes that word in the output.\n\nYou can test this function with some example inputs:\n\n```julia\nprintln(keep_only_names([\"Dog\", \"cat\", \"Cat\", \"doggy\"])) # Output: [\"Dog\", \"Cat\"]\n```","status":200,"tokens":[0,169],"elapsed":1.645525662,"_type":"aimessage"}]