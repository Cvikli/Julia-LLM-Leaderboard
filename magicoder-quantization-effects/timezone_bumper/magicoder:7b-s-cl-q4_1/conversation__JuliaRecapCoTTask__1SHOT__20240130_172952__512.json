[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `timezone_bumper(dt,bump)` that increases any provided timestamp by `bump::Int` hours (defaults to +3 hours). Make sure it works only for DateTime types and throws an error for Date types.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Below is the implementation of your problem in Julia:\n\n```julia\nusing Dates, ArgCheck\n\nfunction timezone_bumper(dt::DateTime; bump = 3)\n    @argcheck dt isa DateTime \"Input must be a DateTime\"\n    return dt + Hour(bump)\nend\n```\nIn the code above we're using the `Dates` and `ArgCheck` libraries. The function `timezone_bumper` expects a `DateTime` as an argument and a default value of `3` hours for `bump`. It checks if the input is indeed a DateTime using `@argcheck` from ArgCheck library, else throws an error message. \n\nIt then returns the new DateTime by adding `bump` hours to the original date time.\n\nYou can call this function as below:\n```julia\njulia> dt = now()\n2021-03-17T14:38:56.931\n\njulia> timezone_bumper(dt)\n2021-03-17T17:38:56.931\n```","status":200,"tokens":[0,259],"elapsed":2.16058397,"_type":"aimessage"}]