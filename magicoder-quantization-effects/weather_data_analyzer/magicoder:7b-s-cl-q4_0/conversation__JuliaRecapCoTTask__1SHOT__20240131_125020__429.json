[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's how you can define this function in Julia:\n\n```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps)\n    if isempty(temps)\n        return (; average=nothing, max=nothing, min=nothing, trend=nothing)\n    end\n    \n    stats = map(x -> (average=mean(temps), max=maximum(temps), min=minimum(temps)), temps)\n    trends = [ifelse(s.max > s.min, :increasing, ifelse(s.max < s.min, :decreasing, :stable)) for s in stats]\n    \n    return (; average=mean(temps), max=maximum(temps), min=minimum(temps), trend=trends[1])\nend\n```\nThis function first checks if the list of temperatures is empty. If it is, it returns a named tuple with all values set to `nothing`. \n\nOtherwise, it computes the mean and maximum/minimum temperature for each day using the `map` function and stores these in a new array called `stats`. It then creates an array of trend symbols (either `:increasing`, `:decreasing`, or `:stable`) based on whether the maximum temperature is greater than, less than, or equal to the minimum temperature for each day.\n\nFinally, it returns a named tuple containing the average, maximum, and minimum temperatures from `stats` as well as the trend symbol from `trends`.","status":200,"tokens":[0,339],"elapsed":2.641508909,"_type":"aimessage"}]