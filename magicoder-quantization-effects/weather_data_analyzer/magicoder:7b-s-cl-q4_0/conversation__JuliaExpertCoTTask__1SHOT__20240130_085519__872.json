[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Data\n\nweather_data_analyzer([25, 27, 23, 20, 22])","variables":["task","data"],"_type":"usermessage"},{"content":"Here is an implementation in Julia using the Statistics.jl package:\n```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps)\n    if isempty(temps)\n        return (average=nothing, max=nothing, min=nothing, trend=nothing)\n    end\n    \n    avg = mean(temps)\n    max_temp = maximum(temps)\n    min_temp = minimum(temps)\n    trend = ifelse(avg > first(temps), :increasing, \n                   (max_temp == last(temps)) ? :stable : :decreasing)\n    \n    return (; average=avg, max=max_temp, min=min_temp, trend=trend)\nend\n```\n\nThis function calculates the average and extremes of the list, then compares them to the first and last values respectively. If they are greater than or equal to those, it sets `trend` as `:increasing`; otherwise, it checks if the maximum temperature equals the last value in `temps`, setting `trend` as `:stable` if true, and `:decreasing` if false. \n\nIf the `temps` list is empty, this function will return a named tuple with all values set to `nothing`.","status":200,"tokens":[0,287],"elapsed":2.228134908,"_type":"aimessage"}]