[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's an example of how you can solve this problem using Julia:\n```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps)\n    if isempty(temps)\n        return (average=nothing, max=nothing, min=nothing, trend=nothing)\n    end\n\n    average = mean(temps)\n    max = maximum(temps)\n    min = minimum(temps)\n    \n    trend_symbol = :increasing\n    if temps[1] < temps[2]\n        trend_symbol = :decreasing\n    elseif temps[1] == temps[2]\n        trend_symbol = :stable\n    end\n\n    return (average=average, max=max, min=min, trend=trend_symbol)\nend\n``` \nIn the function `weather_data_analyzer`, if the `temps` list is empty it returns a named tuple with all values set to nothing. If the list isn't empty, it calculates the average, maximum and minimum temperature. Based on the first two temperatures in the array, it determines the trend as either increasing, decreasing or stable (if they are equal). \n\nYou can use this function like so: \n```julia\ntemps = [23, 24, 25, 23, 20]\nprintln(weather_data_analyzer(temps)) # returns a named tuple with average=23.4, max=25, min=20 and trend=:decreasing\n```","status":200,"tokens":[0,355],"elapsed":3.319851237,"_type":"aimessage"}]