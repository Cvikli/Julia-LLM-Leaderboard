[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's an example of how you might solve this problem. In the code below we're using the `Statistics` package, which is a part of Julia standard library, for calculating statistical values:\n\n```julia\nusing Statistics # Importing required package\n\nfunction weather_data_analyzer(temps)\n    if length(temps) == 0 # If list is empty\n        return (; average = nothing, max = nothing, min = nothing, trend = nothing)\n    end\n    \n    average = mean(temps)\n    minTemp = minimum(temps)\n    maxTemp = maximum(temps)\n    \n    if average < temps[1] # Checking for decreasing trend\n        trend = :decreasing\n    elseif average > temps[1] # Checking for increasing trend\n        trend = :increasing\n    else \n        trend = :stable\n    end\n    \n    return (; average = average, max = maxTemp, min = minTemp, trend = trend)\nend\n```\n\nYou can call the function with an array of daily temperature data as argument. For example: `weather_data_analyzer([23, 26, 20, 25])` would return a named tuple containing the average temperature (24), max temperature (26), min temperature (20) and trend `:increasing`.\n\nYou can replace special instructions with your specific requirements.\n\nPlease ensure that you have installed `Statistics` package in your Julia environment before running this code.","status":200,"tokens":[0,348],"elapsed":3.08484632,"_type":"aimessage"}]