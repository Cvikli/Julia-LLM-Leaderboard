[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Sure, here is the solution for your task:\n\n```julia\nfunction wrap_string(text, text_width = 10)\n    words = split(text)\n    wrapped_text = \"\"\n    line_length = 0\n\n    for word in words\n        if line_length + length(word) > text_width\n            wrapped_text *= \"\\n\"\n            line_length = 0\n        else\n            if !isempty(wrapped_text) && line_length != 0\n                wrapped_text *= \" \"\n            end\n            line_length += length(word) + 1\n        end\n\n        wrapped_text *= word\n    end\n\n    return wrapped_text\nend\n```\nThis function takes a `String` and an optional `Int` as input. The default value of the second parameter is `10`. It splits the string into words, then checks for each word if adding it to the current line would exceed the allowed width (`text_width`). If that's the case, it starts a new line. In any case, it adds the word to the current line (after making sure not to add a leading space when it's the first word on its line). \n\nIf some instructions are provided in the task description, they should be clearly stated and would influence the function implementation accordingly.","status":200,"tokens":[0,301],"elapsed":2.46934312,"_type":"aimessage"}]