[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is the solution:\n```julia\nfunction wrap_string(str::AbstractString, text_width::Int = 10)\n    words = split(str, ' ')\n    lines = Vector{Vector{SubString}}()\n    current_line = Vector{SubString}()\n\n    for word in words\n        if length(word) + length(current_line) > text_width\n            push!(lines, current_line)\n            current_line = [word]\n        elseif isempty(current_line)\n            push!(current_line, word)\n        else\n            push!(current_line, word)\n        end\n    end\n\n    if !isempty(current_line)\n        push!(lines, current_line)\n    end\n\n    join(join.(lines), '\\n')\nend\n```\nThis function splits the input string into words and checks each word against the text width. If adding a new word would exceed the maximum text width, it starts a new line. The result is a multi-line string where each line does not exceed the specified text width.","status":200,"tokens":[364,247],"elapsed":4.341308265,"_type":"aimessage"}]