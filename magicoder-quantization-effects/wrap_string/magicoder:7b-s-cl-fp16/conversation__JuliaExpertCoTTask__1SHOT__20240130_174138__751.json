[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"Here is the solution in Julia:\n\n```julia\nfunction wrap_string(s::AbstractString, text_width=10)\n    words = split(s, ' ')\n    current_line_len = 0\n    lines = String[]\n    for word in words\n        if length(word) + current_line_len > text_width\n            push!(lines, s[current_line_len+1:end])\n            current_line_len = 0\n        end\n        current_line_len += length(word) + 1 # add one for the space\n    end\n    push!(lines, s[current_line_len+1:end])\n    return join(lines, '\\n')\nend\n\n@assert wrap_string(\"This function will wrap words into lines\") == \"This\\nfunction\\nwill\\nwrap\\nwords\\ninto\\nlines\"\n```\n\nIn this program, `split` is used to split the string into words and iterate over each word. If adding a word would exceed the maximum line width, a new line is started and the current line's length reset to zero. The characters of the remaining string are appended to the last line after the loop ends.","status":200,"tokens":[0,274],"elapsed":4.794469517,"_type":"aimessage"}]