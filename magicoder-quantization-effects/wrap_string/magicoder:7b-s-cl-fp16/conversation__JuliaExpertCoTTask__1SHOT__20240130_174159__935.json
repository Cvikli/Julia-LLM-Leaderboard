[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(s::String; text_width::Int = 10)\n    words = split(s, \" \")\n    result = \"\"\n    line = \"\"\n    for word in words\n        if length(line*word) > text_width\n            result *= \"\\n\" * line\n            line = word\n        else\n            line *= \" \" * word\n        end\n    end\n    return result * \"\\n\" * line\nend\n```\nThis function `wrap_string` takes a string and an optional keyword argument `text_width`, which defaults to 10. It splits the string into words, then iterates over each word. If the current line plus the next word would exceed `text_width`, it appends the current line (with newline) to the result string and starts a new line with the next word. If not, it adds the next word to the current line. After all words have been processed, it appends the final line to the result string.\n\nYou can test it out:\n```julia\nprintln(wrap_string(\"This function will wrap words into lines\", text_width=10))\n```","status":200,"tokens":[0,261],"elapsed":4.558081788,"_type":"aimessage"}]