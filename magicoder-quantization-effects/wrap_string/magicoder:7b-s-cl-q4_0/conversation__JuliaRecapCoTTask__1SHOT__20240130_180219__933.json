[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is the Julia code for your request:\n\n```julia\nfunction wrap_string(s, text_width=10)\n    words = split(s, ' ')\n    result = \"\"\n    line = \"\"\n    for word in words\n        if length(line * \" \" * word) > text_width\n            result *= \"\\n\" * line\n            line = \"\"\n        end\n        line *= \" \" * word\n    end\n    result *= \"\\n\" * line # append the remaining line after loop ends\n    return result\nend\n```\nYou can call this function with a string and optionally specify `text_width`. This will split the string into words, and for each new word added to an existing line, it checks whether the length of that line plus the space followed by the new word exceeds the specified `text_width`. If it does, it adds the current line (including newline) to the result, and then starts a new line with just the current word. This continues until all words have been processed, at which point it appends any remaining text to the end of the result.\n\nExample:\n```julia\nprint(wrap_string(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit\"))\n```","status":200,"tokens":[0,281],"elapsed":2.204905806,"_type":"aimessage"}]