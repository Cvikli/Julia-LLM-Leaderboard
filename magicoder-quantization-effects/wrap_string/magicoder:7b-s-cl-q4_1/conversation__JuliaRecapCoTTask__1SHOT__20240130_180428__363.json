[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Sure, here is the solution for your problem:\n\n```julia\nfunction wrap_string(text::AbstractString; text_width::Int=10)\n    words = split(text, ' ')\n    lines = Any[]\n    current_line = String[]\n    for word in words\n        if length(word) + length(current_line) > text_width\n            push!(lines, current_line)\n            current_line = [word]\n        else\n            push!(current_line, word)\n        end\n    end\n    # add the last line of words if it doesn't exceed the width\n    if length(current_line) > 0\n        push!(lines, current_line)\n    end\n    join(map(join, lines), '\\n')\nend\n```\nThis function splits the input string into an array of words, then iterates over each word. If adding a new word to the current line would cause it to exceed `text_width`, it pushes the current line onto `lines` and starts a new line with this word. After the loop, if there's still some words left in the current line, it will add that into lines as well. Finally, it joins all lines together using newline characters to create a string where each line is separated by one newline character.\n\nThe special instructions are usually more specific than the general instructions above. For example, you can specify the maximum width of the text in terms of how many characters can be displayed on your screen. The instructions also tell what exactly should be done about handling some particular cases.","status":200,"tokens":[0,346],"elapsed":2.840795768,"_type":"aimessage"}]