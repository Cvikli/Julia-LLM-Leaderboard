[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is the solution to the problem:\n```julia\nfunction wrap_string(s, text_width = 10)\n    words = split(s, ' ')\n    lines = String[]\n    current_line = \"\"\n    \n    for word in words\n        if length(current_line) + length(word) > text_width\n            push!(lines, current_line)\n            current_line = word\n        else\n            current_line *= \" \" * word \n        end\n    end\n    push!(lines, current_line)\n\n    return join(lines, \"\\n\")\nend\n```\nThe special instructions are to wrap text at `text_width` characters. If the string contains a space or a newline character, it will be considered as two separate words. \n\nThis function works by iterating over each word in the input string and adding them to lines where each line does not exceed `text_width`. When that happens, it starts a new line with the current word. The last remaining line is also added after the loop finishes.","status":200,"tokens":[0,237],"elapsed":1.945197176,"_type":"aimessage"}]