[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's a simple function that meets the described criteria:\n\n```julia\nfunction wrap_string(str, text_width::Int=10)\n    words = split(str, ' ')\n    result = \"\"\n    for word in words\n        if length(result) + length(word) + 1 > text_width\n            result *= \"\\n\"\n        elseif !isempty(result)\n            result *= \" \"\n        end\n        result *= word\n    end\n    return result\nend\n```\n\nNow, we can use it on an example:\n\n```julia\nprintln(wrap_string(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam viverra fermentum nunc.\"))\n```\n\nThis will output:\n```shell\nLorem\nipsum\ndolor\nsit\namet,\nconsectetur\nadipiscing\nelit.\nEtiam\nviverra\nfermentum\nnunc.\n```\n\nThe `wrap_string` function splits the input string into words and then iterates over each word to determine if adding it to the result would cause the text width limit to be exceeded. If so, a newline character is appended to the result. If not, a space is added instead. The final result is then returned.\n\nYou can adjust the `text_width` parameter as needed for different contexts. For example, if you wanted words to only wrap at 5 characters per line, you could call `wrap_string(\"Lorem ipsum\", 5)`.","status":200,"tokens":[0,359],"elapsed":3.147319457,"_type":"aimessage"}]