[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is your function:\n```julia\nfunction wrap_string(s, text_width::Int=10)\n    words = split(s, \" \")\n    wrapped_str = \"\"\n    line = \"\"\n    for word in words\n        if length(line * \" \" * word) > text_width\n            wrapped_str *= \"\\n\" * line\n            line = word\n        else\n            line *= \" \" * word \n        end\n    end\n    wrapped_str *= \"\\n\" * line # Add the last line not added in the loop\n    return wrapped_str\nend\n```\nHere is an example:\n```julia\nprintln(wrap_string(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer id erat non nunc volutpat fermentum.\"))\n```\nThis function splits the input string into words and then checks if adding a new word would exceed `text_width`. If it does, it adds the current line to `wrapped_str` (and resets `line`), otherwise, it just adds the new word to `line`. After iterating over all words, it adds the remaining `line` not added in the loop.","status":200,"tokens":[0,274],"elapsed":2.389096642,"_type":"aimessage"}]