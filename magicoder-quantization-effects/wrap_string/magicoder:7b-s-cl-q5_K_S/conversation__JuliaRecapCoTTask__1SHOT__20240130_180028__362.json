[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's how you might write the function:\n```julia\nfunction wrap_string(str, text_width::Int = 10)\n    words = split(str, ' ')\n    output = \"\"\n    line = \"\"\n    for word in words\n        if length(line * \" \" * word) <= text_width\n            append!(line, \" \" * word)\n        else\n            append!(output, \"$line\\n\")\n            line = word\n        end\n    end\n    return output * \"$line\"\nend\n```\nExample:\n```julia\nprintln(wrap_string(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\", 15))\n```\nThe function `wrap_string` takes in a string and an optional argument `text_width` which is 10 by default. It splits the input string into words using the `split` function. Then it iterates over each word. If adding the current word to the line exceeds the `text_width`, it appends the current line to the output and starts a new line with the current word. At the end, if there is still some text left after going through all words, it gets appended to the output as well. The resultant string has each line ending with a newline character. \n\nYou can customize `text_width` to wrap the sentence at different lengths. For example, to wrap the sentence every two words, you could use:\n```julia\nprintln(wrap_string(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\", 8))\n```","status":200,"tokens":[0,360],"elapsed":3.158041066,"_type":"aimessage"}]