[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Your instructions are to use a `String` as input, `text`, and output the same string but wrapped on different lines based on a maximum width specified by the variable `text_width`. The function should also maintain the original indentation of each line. For example:\n```\nfunction wrap_string(text::AbstractString, text_width::Int=10)\n    words = split(text)\n    result = IOBuffer()\n    current_line_len = 0\n\n    for word in words\n        if current_line_len + length(word) > text_width\n            println(result, \"\\n\")\n            current_line_len = 0\n        end\n        \n        current_line_len += length(word) + 1 # +1 for space after the word\n        print(result, word, \" \")\n    end\n    \n    return String(take!(result))\nend\n```","status":200,"tokens":[11,202],"elapsed":1.599111311,"_type":"aimessage"}]