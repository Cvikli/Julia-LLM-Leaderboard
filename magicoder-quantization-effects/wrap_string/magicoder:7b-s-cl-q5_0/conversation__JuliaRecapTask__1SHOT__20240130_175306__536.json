[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is the implementation:\n```julia\nfunction wrap_string(s, text_width = 10)\n    words = split(s, \" \") # split into words\n    result = \"\"\n    line = \"\"\n    for word in words\n        if length(line * \" \" * word) <= text_width\n            push!(result, \"$line$word \")\n            line = \"\"\n        else\n            push!(result, \"\\n$word \")\n        end\n    end\n    join(result) # join the result to get a string\nend\n\nprint(wrap_string(\"Lorem ipsum dolor sit amet consectetur adipiscing elit\", 12))\n```\nIn this example, we are wrapping at every 12th character. If you want it to be based on words instead of characters, adjust the condition in the loop accordingly (for instance `length(line * \" \" * word) <= text_width`). Note that we're using `push!` to add strings to a result vector and then joining them with `join`. \n\nPlease ensure to replace the parameters as per your requirements.","status":200,"tokens":[0,249],"elapsed":2.17149884,"_type":"aimessage"}]