[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"Here is your Julia solution:\n\n```julia\nfunction wrap_string(text, text_width = 10)\n    words = split(text, \" \")\n    result = \"\"\n    line = \"\"\n    for word in words\n        if length(line * \" \" * word) > text_width\n            result *= \"\\n\" * line\n            line = \"\"\n        end\n        line *= word * \" \"\n    end\n    return result * line\nend\n```\nHere's an example: \n```julia\nwrap_string(\"This function will wrap words into lines\")\n```\n\nIn the above code, a string of text is split into separate words. Then for each word in the list, it checks if adding this word to the current line would exceed `text_width`. If so, a new line is started. Finally, all lines are concatenated together with newline characters between them.","status":200,"tokens":[0,204],"elapsed":1.581444355,"_type":"aimessage"}]