[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is your solution in Julia:\n```julia\nfunction wrap_string(text::AbstractString, text_width::Int = 10)\n    words = split(text, ' ') # split the string into individual words\n    result = \"\"\n    for word in words\n        if length(result) + length(word) > text_width - 1\n            result *= \"\\n\" # add a new line\n        end\n        result *= \" \" * word # append the next word to the current line\n    end\n    return chomp(result) # remove the extra trailing newline that might have been added at the end\nend\n\n# Example usage:\nprintln(wrap_string(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec at diam nec erat imperdiet auctor ut ac nulla. Nullam lacus odio, tincidunt sed semper eget, fermentum id purus. Etiam consequat dui quis mi lobortis, a bibendum orci dictum.\"))\n``` \nThis function will break lines whenever it's about to exceed the `text_width`. The chomp is used to remove extra newline that might have been added at the end of the text.","status":200,"tokens":[0,282],"elapsed":3.254604759,"_type":"aimessage"}]