[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"Here is your solution written in Julia programming language:\n\n```julia\nfunction wrap_string(str, text_width::Int=10)\n    strs = split(str, ' ') # Split the string by spaces\n    nchars = 0\n    out_lines = String[]\n    line = \"\"\n\n    for word in strs\n        if nchars + length(word) > text_width\n            push!(out_lines, line)\n            line = word\n            nchars = length(word)\n        else\n            line *= \" $(word)\" # append space and the word to line\n            nchars += length(word) + 1\n        end\n    end\n\n    if !isempty(line)\n        push!(out_lines, line)\n    end\n\n    return join(out_lines, '\\n')\nend\n```\n\nExample:\n\n```julia\nprintln(wrap_string(\"This function will wrap words into lines\", 20))\n```\nThe `wrap_string` function splits the string by spaces and checks if adding a word to the current line would exceed the text width. If it does, it starts a new line with that word. The function returns a newline-separated string where each line is no longer than `text_width`.","status":200,"tokens":[0,294],"elapsed":2.651307523,"_type":"aimessage"}]