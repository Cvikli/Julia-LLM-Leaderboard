[{"content":"You are a world-class Julia language programmer with the knowledge of the latest syntax. Your communication is brief and concise. You're precise and answer only when you're confident in the high quality of your answer.","variables":[],"_type":"systemmessage"},{"content":"# Question\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.","variables":["ask"],"_type":"usermessage"},{"content":"Here is an example of how you can implement this in Python using BeautifulSoup library:\n\n```python\nfrom bs4 import BeautifulSoup\n\ndef extract_julia_code(md):\n    soup = BeautifulSoup(md, 'html.parser')\n    code_blocks = soup.find_all('code', class_='language-julia')  # Assuming the class for julia language is 'language-julia'\n    \n    if len(code_blocks) == 0:\n        return ''\n    \n    cleaned_codes = [code.text.strip() for code in code_blocks]\n    joined_codes = '\\n'.join(cleaned_codes)\n    \n    return joined_codes\n```\n\nThis function first parses the markdown document to a BeautifulSoup object. Then it finds all 'code' blocks with 'class' attribute set to 'language-julia'. If no code block is found, it returns an empty string. Otherwise, it extracts the text of each 'code' block, removes leading and trailing whitespaces, then joins them together with newline character in between. The resulting string will be all Julia language code blocks joined into a single string separated by newlines.","status":200,"tokens":[0,275],"elapsed":3.107040802,"_type":"aimessage"}]