[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is an example of a function that can accomplish this:\n\n```julia\nusing Markdown\n\nfunction extract_julia_code(md::String; instructions=\"\")\n    # Parse markdown string into blocks\n    blocks = parse_raw_markdown(md)\n\n    # Iterate over code blocks in the block list\n    codeblocks = String[]\n    for block in blocks \n        if typeof(block) == Markdown.CodeBlock && occursin(\"julia\", block.info.lang)\n            # Remove fences and join into a single string\n            push!(codeblocks, replace(join([block.content], \"\\n\"), r\"^ *\" => \"\")) \n        end\n    end\n\n    # Return the joined code blocks with newline delimiter\n    return join(codeblocks, \"\\n\")\nend\n```\n\nThis function uses the `parse_raw_markdown` function from the `Markdown.jl` package to parse a markdown string into an array of AST (Abstract Syntax Tree) objects, which are then iterated over in order to check if each block is a code block with julia as its language. If it satisfies these conditions, then we remove fences and join the content of the blocks together with newline characters.\n\nThe function also takes an optional argument `instructions` to provide special instructions, but this can be implemented based on the specific problem requirements.","status":200,"tokens":[0,313],"elapsed":2.564192986,"_type":"aimessage"}]