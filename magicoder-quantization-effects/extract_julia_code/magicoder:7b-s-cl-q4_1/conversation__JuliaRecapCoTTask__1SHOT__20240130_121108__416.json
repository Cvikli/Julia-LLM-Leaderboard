[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nimport Markdown\n\nfunction extract_julia_code(md::String; instructions = \"\")\n    # Parse the markdown document into blocks of code and other elements\n    elements = Markdown.parse(md)\n    \n    # Extract all code blocks, join them together with a newline character\n    code_blocks = map(elements) do element\n        if isa(element, Markdown.Code)\n            join([join(split(string(element.code), \"\\n\"))])\n        end\n    end\n    \n    # Return the joined string of all code blocks\n    return join(map(code_blocks))\nend\n```\n\nThe function `extract_julia_code` takes a markdown document as input, parse it into elements (e.g., paragraphs, headings), then iterates through these elements to check if they are code blocks. If they are, it extracts their contents and joins them together with newline characters. The resulting string is returned as the output of the function. \n\nThe special instructions can be passed to the function via keyword argument instructions. This allows users to customize how the function behaves based on specific requirements.","status":200,"tokens":[0,262],"elapsed":2.152575145,"_type":"aimessage"}]