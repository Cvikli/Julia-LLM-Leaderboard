[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::String, instructions::String=\"\")\n    code_blocks = [\"\" for _ in eachmatch(\"```julia\\n\", md)]\n    i = 1\n    while true\n        m = match(r\"```julia\\n(.*?)```\", md, Cse(i))\n        if !m || m.off === 0\n            break\n        end\n        code_blocks[i] = m.captures[1]\n        i += 1\n    end\n\n    # Remove code fences\n    for (j, block) in enumerate(code_blocks)\n        code_blocks[j] = replace(block, \"`\" => \"\")\n    end\n    \n    if isempty(instructions) || instructions == \"None\"\n        return join(code_blocks, \"\\n\")\n    elseif instructions == \"Join with empty lines\"\n        # Add empty lines between each code block\n        new_str = \"\"\n        for (i, block) in enumerate(code_blocks)\n            if i != 1 && block != \"\"\n                new_str *= \"\\n\\n\"\n            end\n            new_str *= block\n        end\n        return new_str\n    elseif instructions == \"Join without empty lines\"\n        # Join code blocks together with no empty lines between\n        new_str = join(code_blocks, \"\")\n        return replace(new_str, \"\\n\\n\" => \"\\n\")\n    end\nend\n```","status":200,"tokens":[0,356],"elapsed":3.27592271,"_type":"aimessage"}]