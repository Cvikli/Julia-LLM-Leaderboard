[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"In Julia, you can use the `Markdown` package to extract code from markdown files. Here's an example:\n\n```julia\nusing Markdown\n\nfunction extract_julia_code(md::String)\n    blocks = split(md, \"```\")\n    code = \"\"\n    for block in blocks[2:end]\n        lines = split(block, \"\\n\")\n        for line in lines\n            if !isempty(line) && (startswith(line, \"#!\") || startswith(line, \"#=\"))\n                continue\n            elseif isempty(code)\n                code = line\n            else\n                code *= \"\\n\" * line\n            end\n        end\n    end\n    return code\nend\n```\nThis function splits the input string by occurrences of ``` and then it goes through each part that is found between ``` pairs. If the current block contains a line starting with `#!` or `#=` (which are comments in Julia), this part is ignored, otherwise the content is appended to the `code` variable.\nAfter all code blocks have been processed, the function returns the resulting string.","status":200,"tokens":[0,254],"elapsed":2.107347216,"_type":"aimessage"}]