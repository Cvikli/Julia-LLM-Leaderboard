[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"The special instructions are usually custom to each problem, but here is a general solution using a simplified form of what the `extract_julia_code` function might look like:\n\n```julia\nfunction extract_julia_code(md::String; instructions=\"\")\n    # Assume that md is already well-formed markdown. \n    # This function will not handle invalid markdown input.\n    \n    code_blocks = []\n    lines = split(md, '\\n')\n    i = 1\n    while i <= length(lines)\n        line = lines[i]\n        if line[1:3] == \"```\"\n            push!(code_blocks, \"\")\n            i += 2\n            # Skip over the fence until we reach an empty line.\n            while i <= length(lines) && !isempty(lines[i])\n                code_blocks[end] *= lines[i][4:end]\n                i += 1\n            end\n        elseif line[1] == '`'\n            # Skip over inline code.\n            i += 1\n        else\n            if !isempty(code_blocks) && (instructions != \"\" ? lines[i] == instructions : true)\n                # If we're on a new block, join the old blocks together with a newline and reset.\n                code = join([String[]], code_blocks...; \"\\n\")\n                push!(code_blocks, \"\")\n            end\n        end\n    end\n    \n    if isempty(code_blocks)\n        return \"\"\n    elseif length(code_blocks) == 1\n        return String(code_blocks[1])\n    else\n        return String(join([String[]], code_blocks...; \"\\n\"))\n    end\nend\n```\n\nPlease note that this function assumes each \"code block\" is surrounded by \"`````\". If you have another syntax, or multiple forms of defining a code block, then you will need to modify the function accordingly. \n\nThe special instructions are checked at the end of every code block. If it matches with the given instruction, all the previous code blocks are joined together and added to the next code block.","status":200,"tokens":[0,499],"elapsed":4.08127921,"_type":"aimessage"}]