[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's an example of how this function could be structured in Julia:\n\n```julia\nusing Markdown\n\nfunction extract_julia_code(md::String)\n    # Parse markdown to HTML\n    html = parse_html(md)\n  \n    # Find all code blocks\n    codeblocks = findall(\"<pre><code class=\\\"language-julia\\\">\", html)\n  \n    # Extract code from each block and join into one string\n    result = \"\"\n    for i in 1:length(codeblocks)\n        start_index = searchstart(html, \"<pre><code class=\\\"language-julia\\\">\") + length(\"<pre><code class=\\\"language-julia\\\">\")\n        end_index = findfirst(\"</code></pre>\", html)\n  \n        code = html[start_index:end_index-1]\n        result *= code*\"\\n\"\n    end\n  \n    return result\nend\n```\n\nThis function first parses the markdown into HTML, then finds all Julia language code blocks and concatenates their content with newline characters. The `parse_html` function is provided by the Markdown package in Julia which can be installed using `Pkg.add(\"Markdown\")`.\n\nThe instructions for the special case would need to be handled within this function itself, based on what needs to be done differently when the instructions are provided.\n\nPlease note that the example code assumes you're working with a string of markdown text. Depending on how you've structured your program or your data, you might need to adjust this function accordingly.","status":200,"tokens":[0,363],"elapsed":3.071756754,"_type":"aimessage"}]