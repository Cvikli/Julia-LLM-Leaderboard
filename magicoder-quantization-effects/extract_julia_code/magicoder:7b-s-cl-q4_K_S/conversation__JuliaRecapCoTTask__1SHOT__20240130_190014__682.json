[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is the function `extract_julia_code` written in Julia:\n\n```julia\nimport Markdown\n\nfunction extract_julia_code(md::String; instructions=nothing)\n    # Remove code fences and join all code blocks together with newline\n    code = \"\"\n    md_parsed = Markdown.parse(md, linkify_github=false)\n    for block in md_parsed.content\n        if isa(block, Markdown.CodeBlock) && (instructions === nothing || occursin(\"julia\", lowercase(block.language)))\n            code *= join([split(line, \"\\n\")[1] for line in split(block.code, '\\n')], '\\n') * \"\\n\"\n        end\n    end\n    return code\nend\n```\nThis function uses the `Markdown` package to parse markdown into a tree of blocks. It then iterates over these blocks and checks if each one is a Julia code block (defined by having \"julia\" as its language). If it is, it removes any line breaks within the code and joins all lines together with newline characters. The resulting string contains all of your julia code blocks in a single string.","status":200,"tokens":[0,273],"elapsed":2.107639769,"_type":"aimessage"}]