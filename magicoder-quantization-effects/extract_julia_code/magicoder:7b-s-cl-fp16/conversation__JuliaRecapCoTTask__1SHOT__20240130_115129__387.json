[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"The function `extract_julia_code` is implemented in Julia language as follows:\n\n```julia\nfunction extract_julia_code(md::String)\n    code_blocks = [match.captures[1] for match in eachmatch(r\"```julia(.+?)```\", md, seed=1)]\n    if isempty(code_blocks)\n        return \"\"\n    elseif length(code_blocks) == 1\n        return code_blocks[1]\n    else\n        return join(code_blocks, \"\\n\\n\")\n    end\nend\n```\nThe function `extract_julia_code` takes a string argument `md`, which contains the markdown document. It uses regular expression to find all code blocks with Julia as the language. The result is an array of strings where each string is a piece of code from the Markdown document. If there are no matches (no code blocks), it returns an empty string. \n\nIf there is only one block, it directly returns this single block. Otherwise, it joins all blocks with two newlines in between to form a single string and returns that.\n\nThe argument `md` should be provided as:\n```julia\nmd = \"\"\"\n# Title\nSome text before the code block...\n```julia\na = 10\nb = 20\nc = a + b\n```\nMore text after the last code block...\n\"\"\"\n```","status":200,"tokens":[0,330],"elapsed":5.873075147,"_type":"aimessage"}]