[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"The function `extract_julia_code` will work as follows:\n\n1. It takes the markdown document `md` and an additional argument, a dictionary with special instructions.\n2. It scans through each line of the markdown document checking if it is a code block. \n3. If it finds a code block, it extracts the contents of that block.\n4. If there are multiple consecutive code blocks, it joins them together using a newline as separator.\n5. Finally, it removes the backticks (`) from the resulting code.\n6. The function returns this resulting string, which is all Julia language code in `md` without any markdown syntax.\n\nHere's an example implementation:\n\n```julia\nfunction extract_julia_code(md::AbstractString)\n    # Initialize result with empty string\n    result = \"\"\n    \n    lines = split(md, '\\n')\n    in_block = false\n    for line in lines\n        if occursin(\"```julia\", line)\n            if !in_block\n                # Start of a new block\n                in_block = true\n            else\n                # End of the current block\n                in_block = false\n            end\n            \n            continue\n        end\n        \n        if in_block && length(line)>0 \n            result *= line[3:end-3] * \"\\n\"   # Remove fences, add newline\n        end\n    end\n    \n    return result\nend\n```","status":200,"tokens":[0,337],"elapsed":2.977588877,"_type":"aimessage"}]