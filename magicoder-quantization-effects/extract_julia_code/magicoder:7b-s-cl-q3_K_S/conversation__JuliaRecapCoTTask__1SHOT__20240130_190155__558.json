[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is a possible implementation for `extract_julia_code` function:\n```python\nimport re\nfrom typing import Optional\n\ndef extract_julia_code(md: str, instructions: dict) -> Optional[str]:\n    code_blocks = re.findall(r'```(.*?)\\n(.*?)\\n```', md, re.DOTALL | re.MULTILINE)  # Find all code blocks in markdown doc\n    if not code_blocks: return None  # Return None if no code blocks found\n    \n    langs = [lang for _, lang in code_blocks]  # Get languages of each code block\n    if instructions.get(\"language\", \"\") != \"\":\n        if instructions[\"language\"] not in langs or len(set(langs)) > 1:\n            return None  # If specific language is requested and it does not match any/all languages, return None\n            \n    joined_code = \"\\n\".join([code for _, code in code_blocks])  # Join all code blocks together with newline\n    \n    return joined_code.strip()  # Return stripped string to remove leading/trailing whitespace if any\n```\nThis function uses regex to match the markdown code blocks and extract the languages and codes separately. It then checks if there's a specific language requested or if there are multiple different languages in the code blocks. If either of these conditions is met, it returns `None`. Otherwise, it joins all the codes into one string with each newline, strips leading/trailing whitespaces and returns the result. Note that this function assumes that markdown uses ``` for inline code and ```` or indentation for block code. \n\nIf you want to use this function in a specific language setting, you can provide `instructions[\"language\"] = \"desired_language\"` where `\"desired_language\"` is the required Julia language. This will return `None` if the desired language doesn't match or isn't present.","status":200,"tokens":[0,441],"elapsed":3.610206893,"_type":"aimessage"}]