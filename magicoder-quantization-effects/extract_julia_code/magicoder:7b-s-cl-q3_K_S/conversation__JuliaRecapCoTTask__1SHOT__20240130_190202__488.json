[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"This problem requires knowledge of Markdown syntax and the ability to parse and manipulate strings in Julia. Here is a possible solution:\n```julia\nfunction extract_julia_code(md::AbstractString; instructions=\"\")\n    blocks = split(replace(md, r\"^```.*?```\", \"\"), \"\\n\\n\")  # split by paragraphs\n    codes = String[]  # to hold extracted code snippets\n    \n    for block in blocks\n        m = match(r\"```(.*)\\n(.*)\\n```\", block)  # match a fenced code block\n        if m !== nothing && startswith(m[1], \"julia\")\n            push!(codes, m[2])\n        end\n    end\n    \n    if isempty(instructions)\n        join(codes; \"\\n\\n\") # concatenate the codes with newlines\n    elseif instructions == \"special\"  # perform special instruction for concatenation\n        join(codes, '\\n')  # concatenate the codes without a newline after each code block\n    end\nend\n```\nThis function works by iterating over each paragraph (`\\n\\n` separated) in the markdown string. For each paragraph it searches for a fenced code block (i.e., enclosed within ```). If found and the language specified is \"julia\", the respective code block content gets added to `codes`. After going through all paragraphs, we join the contents of codes into one string separated by newlines.\n\nThe function also accepts a parameter named instructions which allows for special handling based on what needs to be done with the extracted code blocks. If instructions are not provided (or an empty String), it will simply concatenate the blocks with a newline separator. However, if instructions are \"special\", then it will join the blocks without a newline separator between each block of code.","status":200,"tokens":[0,406],"elapsed":3.324434218,"_type":"aimessage"}]