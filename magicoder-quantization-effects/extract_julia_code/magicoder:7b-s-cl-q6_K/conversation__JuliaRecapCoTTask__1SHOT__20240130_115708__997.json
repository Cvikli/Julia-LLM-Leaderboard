[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::AbstractString; instructions=nothing)\n    code = []\n    in_block = false\n\n    for line in split(md, '\\n')\n        if startswith(line, '```' || startswith(line, \"```julia\")) && !in_block  # start of a block\n            push!(code, \"\")\n            in_block = true\n        elseif in_block  # lines inside a code block\n            line = strip(line)\n            if startswith(line, '```' || startswith(line, \"```\")) && !endswith(line, \"::\")  # end of a block\n                push!(code, \"\")\n                in_block = false\n            else\n                push!(code[end], line[3:end-3])  # remove code fences and append to the last element of 'code' array\n            end\n        end\n    end\n    \n    join(code, \"\\n\")  # join all the elements with newline\nend\n```\n\nThe above function `extract_julia_code` takes a markdown document `md` as input and splits it into lines. It then iterates over each line, identifying whether a code block is starting or ending. If it's starting, an empty string is pushed to the `code` array, and if it's ending, an empty string is pushed again. The code fences are removed using string slicing in lines inside the block, and the resulting strings are joined together with a newline character.\n\nThe instructions parameter allows for special handling of some specific rules that may be needed when extracting code from more complex documents.","status":200,"tokens":[11,374],"elapsed":3.759452184,"_type":"aimessage"}]