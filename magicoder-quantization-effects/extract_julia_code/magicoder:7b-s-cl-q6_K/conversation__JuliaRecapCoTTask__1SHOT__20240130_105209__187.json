[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::String, instructions=\"\")\n    fenced_code = r\"(?s)(?<=\\n|^)~~~(.*?)(?=\\n~~~\\n)\"\n    code_blocks = collect(eachmatch(fenced_code, md))\n    \n    if length(code_blocks) > 0\n        raw_code = join([match.captures[1] for match in code_blocks], \"\\n\\n\")\n        \n        # Remove code fences and leading/trailing whitespace\n        cleaned_code = replace(raw_code, \"~~~\" => \"\") |> x -> replace(x, \"^\" => \"\") \n        \n        if instructions == \"remove_julia_comments\"\n            cleaned_code = replace(cleaned_code, '#=.*?\\n' => \"\\n\") # remove multiline comments\n            cleaned_code = replace(cleaned_code, '\"\"\".*?\"\"\"' => \"\")  # remove multiline strings\n        end\n    else\n        cleaned_code = \"\"\n    end\n    \n    return cleaned_code\nend\n```\nThe `extract_julia_code` function first identifies all the code blocks in the markdown string using a regular expression. Then, it concatenates and removes the fences from each block of code, resulting in a single string of Julia code. If the instructions specify to remove Julia comments (`\"remove_julia_comments\"`), the function also removes these. The result is then returned as a String.","status":200,"tokens":[0,356],"elapsed":3.523459841,"_type":"aimessage"}]