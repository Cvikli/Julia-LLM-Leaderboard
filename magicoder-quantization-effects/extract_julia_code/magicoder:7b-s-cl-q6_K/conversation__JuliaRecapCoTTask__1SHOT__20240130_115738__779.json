[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nusing Markdown\n\nfunction extract_julia_code(md::String)\n    # Parse the markdown string into an AST (Abstract Syntax Tree).\n    parsed = parse_raw(\"$(md)\", :markdown)\n    \n    code_blocks = []\n\n    for item in parsed.content\n        if isa(item, GFM.CodeBlock)\n            push!(code_blocks, strip(String(item.lang), [' ', '\\n']) * \"\\n\" * join(strip.(collect(item.text))))\n        end\n    end\n    \n    # Remove code fences and join the code blocks together with a newline.\n    all_code = join(code_blocks, \"\\n\\n\")\n\n    return all_code\nend\n```\nThis function first parses the markdown string into an Abstract Syntax Tree (AST) using `Markdown`'s `parse_raw` function. Then it iterates over the items in this AST, checking if each item is a code block (`GFM.CodeBlock`). If it is, it strips off the language specification and newline characters from the code block and joins them together with a newline character to form one string of all code blocks. Finally, it returns this single string of all joined code blocks.\n  \nPlease note that this solution assumes you have `GFM` package installed in your Julia environment. If not, install using Pkg: `Pkg.add(\"GFM\")`.","status":200,"tokens":[0,327],"elapsed":3.268463928,"_type":"aimessage"}]