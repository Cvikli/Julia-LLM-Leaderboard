[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is an example of how to write this function in Julia:\n\n```julia\nfunction extract_julia_code(md::AbstractString, instructions)\n    code_blocks = eachmatch(r\"```julia(.+?)```\", md)\n    code_strings = [m.captures[1] for m in code_blocks]\n\n    if length(code_strings) == 0\n        return \"\"\n    end\n    \n    if instructions != :skip\n        # Perform some operation on the extracted code blocks here, for example:\n        code_strings = [replace(c, r\"^|\\n\" => \"\") for c in code_strings]\n    end\n\n    joined_code = join([strip(c) for c in code_strings], \"\\n\\n\")\n    return joined_code\nend\n```\nThe function `extract_julia_code` takes the markdown as a string and instructions. The instructions can be used to perform any operation on the extracted code blocks, but here we're just joining them together with newline characters between each block. \n\nPlease replace \"{{instructions}}\" in the special instructions with your specific operations or instructions.","status":200,"tokens":[0,268],"elapsed":2.079589122,"_type":"aimessage"}]