[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"You can use the `Gumbo` package to parse Markdown, then use its DOM structure to extract and manipulate Julia code blocks. \n\nHere's a basic outline for how you could implement this:\n\n```julia\nusing Gumbo\n\nfunction extract_julia_code(md)\n    # Parse the markdown into a DOM tree\n    dom = parsehtml(md)\n\n    # Find all code blocks\n    codeblocks = findall(dom, \"pre > code\")\n\n    # Extract and join all Julia codes into one string\n    julia_code = join([text(node) for node in codeblocks if language(node) == \"julia\"], \"\\n\\n\")\n\n    return julia_code\nend\n```\n\nThis function will return the text of all `pre > code` elements with a `language` attribute that equals `\"julia\"`, concatenated with two newlines between each block.\n\nNote: This assumes that the markdown document is well-formed and contains valid Julia code blocks. If there are other types of code blocks or if they don't have the correct language attribute, this function may not behave as expected.\n\nIf you need to handle additional special instructions, you can add them inside `extract_julia_code` function.","status":200,"tokens":[0,291],"elapsed":2.528608187,"_type":"aimessage"}]