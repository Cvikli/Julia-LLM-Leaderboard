[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```python\n#!/usr/bin/env python3\nfrom typing import List, NamedTuple\nimport statistics as stats\n\nclass WeatherDataAnalyzer(NamedTuple):\n \naverage: float\nmax_temp: int\nmin_temp: int\ntrend: str\n\n\ndef weather_data_analyzer(temps: List[float]) -> WeatherDataAnalyzer:\n \nif not temps:\nreturn WeatherDataAnalyzer(0, 0, 0, 'nothing')\n\naverage = sum(temps) / len(temps)\nmax_temp = max(temps)\nmin_temp = min(temps)\n\ntrend = None\n \nif temps[-1] > temps[0]:\ntrend = 'increasing'\nelif temps[-1] < temps[0]:\ntrend = 'decreasing'\nelse:\ntrend = 'stable'\n\nreturn WeatherDataAnalyzer(average, max_temp, min_temp, trend)\n\n\n# Test case\ntemps = [25.2, 24.8, 27.5, 26.3]\nresult = weather_data_analyzer(temps)\nprint(\"Average: \", result.average)# Expected output: Average: 25.425\nprint(\"Max Temperature: \", result.max_temp)# Expected output: Max Temperature: 27.5\nprint(\"Min Temperature: \", result.min_temp)# Expected output: Min Temperature: 24.8\nprint(\"Trend: \", result.trend)# Expected output: Trend: increasing\n```","status":200,"tokens":[439,377],"elapsed":11.800340084,"_type":"aimessage"}]