[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Based on the provided problem statement and special instructions, here's how I would approach it as a world-class Julia programmer:\n\n1. Recall Julia snippets that will be useful for this task:\n   - Use of the `Statistics` package to perform statistical analysis.\n   - Named tuple construction syntax.\n\n2. Solve the task:\n\n```julia\nusing Statistics\nfunction weather_data_analyzer(temps::AbstractVector{<:Number})\n    length(temps) == 0 && return ((; average=nothing, max=nothing, min=nothing, trend=nothing))\n\n    stats = Statistics.mean(temps), Statistics.maximum(temps), Statistics.minimum(temps)\n\n    if length(temps) > 1\n        diff = last(temps) - temps[begin]\n        diff > 0 && (trend=:increasing)\n        diff < 0 && (trend=:decreasing)\n        else\n            trend = :stable\n    end\n\n    return ((; average=stats[1], max=stats[2], min=stats[3], trend=trend))\nend\n```\n\n3. Double-check that the solution is correct:\n   - The function `weather_data_analyzer` accepts an abstract vector of numbers as input.\n   - If the input is empty, it returns a named tuple with all values set to `nothing`.\n   - Otherwise, it performs statistical analysis using the `Statistics` package and sets the trend based on the difference between the first and last temperature in the list.\n   - The function returns a named tuple containing the average, max, min temperatures, and the trend.","status":200,"tokens":[464,387],"elapsed":18.141155792,"_type":"aimessage"}]