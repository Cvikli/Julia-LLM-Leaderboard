[{"content":"Act as a helpful AI assistant","variables":[],"_type":"systemmessage"},{"content":"You are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.","variables":[],"_type":"usermessage"},{"content":"Here is a Python function that does what you requested using the `Statistics` library to perform the statistical analyses:\n\n```python\nfrom statistics import mean, max as max_val, min as min_val\nfrom collections import namedtuple\n\nWeatherData = namedtuple('WeatherData', 'average, max, min, trend')\n\ndef weather_data_analyzer(temps):\n    if len(temps) == 0:\n        return WeatherData(None, None, None, None)\n        \n    average = mean(temps)\n    maxTemp = max_val(temps)\n    minTemp = min_val(temps)\n    \n    trend = 'increasing' if temps[-1] > temps[0] else \\\n            ('decreasing' if temps[-1] < temps[0] else 'stable')\n            \n    return WeatherData(average, maxTemp, minTemp, trend)\n```\n\nThis function first checks whether the list is empty. If it is, it returns a named tuple with all values set to `None`. \nOtherwise, it calculates the average, maximum and minimum temperatures by using functions from the `statistics` library. \nThe trend is determined based on comparing the last temperature in the list with the first one: if it's greater than the first one, the trend is 'increasing'. If it's less, the trend is 'decreasing'; otherwise, it's 'stable'. \nThe function then returns a named tuple containing these results.","status":200,"tokens":[152,346],"elapsed":11.008632625,"_type":"aimessage"}]