[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's a possible implementation of the `weather_data_analyzer` function in Julia:\n```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps::AbstractVector{<:Real})\n    if isempty(temps)\n        return (; average=nothing, max=nothing, min=nothing, trend=nothing)\n    else\n        average = mean(temps)\n        max_temp = maximum(temps)\n        min_temp = minimum(temps)\n\n        if length(temps) == 1\n            trend = :stable\n        else\n            sorted_temps = sort(temps)\n            first_temp = first(sorted_temps)\n            last_temp = last(sorted_temps)\n            if first_temp < last_temp\n                trend = :increasing\n            elseif first_temp > last_temp\n                trend = :decreasing\n            else\n                trend = :stable\n            end\n        end\n\n        return (; average, max_temp, min_temp, trend)\n    end\nend\n```\nThe function takes a vector of real numbers `temps` as input and checks if it is empty. If it is empty, it returns a named tuple with all values set to `nothing`. Otherwise, it calculates the `average`, `max`, and `min` temperatures using the `mean`, `maximum`, and `minimum` functions from the `Statistics` package, respectively.\n\nTo calculate the trend, the function first sorts the temperatures in ascending order. If the list has only one element, the trend is considered `:stable`. Otherwise, it compares the first and last temperatures in the sorted list. If the first temperature is less than the last temperature, the trend is `:increasing`. If the first temperature is greater than the last temperature, the trend is `:decreasing`. If the first and last temperatures are equal, the trend is `:stable`.\n\nNote that the function uses abstract types (`AbstractVector{<:Real}`) to make it more general and applicable to different types of data. However, it is assumed that the input data is a vector of real numbers.","status":200,"tokens":[455,484],"elapsed":24.576437583,"_type":"aimessage"}]