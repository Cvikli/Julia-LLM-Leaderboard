[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's the `weather_data_analyzer` function using Julia's `Statistics` package to compute the required statistics and a helper function to build the named tuple:\n```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps::Array{Number})\nif length(temps) == 0\nreturn WeatherData(\"none\", \"\", \"\")\nend\n\navg = mean(temps)\nmax_temp = max(temps)\nmin_temp = min(temps)\ntrend = case avg:truncat(String)\nwhen \"increasing\" then \":increasing\"\nwhen \"decreasing\" then \":decreasing\"\nelse :stable\nend\n\nreturn WeatherData(avg, max_temp, min_temp, trend)\nend\n\nfunction WeatherData(average, max, min, trend)\nreturn (; average, max, min, trend)\nend\n```\nTo use the function with sample data:\n```julia\ntemps = [30, 35, 40, 45, 50]\nresult = weather_data_analyzer(temps)\nprintln(\"Average temperature: \", result.average)\nprintln(\"Max temperature: \", result.max)\nprintln(\"Min temperature: \", result.min)\nprintln(\"Trend: \", result.trend)\n```","status":200,"tokens":[445,297],"elapsed":6.959089291,"_type":"aimessage"}]