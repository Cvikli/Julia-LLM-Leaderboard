[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nusing Statistics\n\nstruct WeatherDataAnalyzer {\naverage: Number,\nmax_temp: Number,\nmin_temp: Number,\ntrend: String\n}\n\nfunction weather_data_analyzer(temps::Array{Number})\nif isempty(temps)\nreturn WeatherDataAnalyzer(nothing, nothing, nothing, nothing)\nend\n\nanalysis = Statistics.describe!(temps)[1:4]\ntrends = [if x > 0 -> 'increasing', else if x < 0 -> 'decreasing', else -> 'stable' end for x in analysis[3]]\n\nreturn WeatherDataAnalyzer(analysis[2], analysis[3], analysis[4], join(trends, \",\"))\nend\n```\n\nThis function first checks if the input list is empty. If it is, it returns a `WeatherDataAnalyzer` with all values set to `nothing`. Otherwise, it uses the `describe!` function from the `Statistics` package to calculate the average, maximum, and minimum temperatures of the input list. It then determines the trend by comparing each temperature value with its neighbors (as defined by the `trends` array), which is constructed using a list comprehension. Finally, it returns a `WeatherDataAnalyzer` containing the calculated statistics and the determined trend.","status":200,"tokens":[442,299],"elapsed":9.622265292,"_type":"aimessage"}]