[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Data\n\nweather_data_analyzer([25, 27, 23, 20, 22])","variables":["task","data"],"_type":"usermessage"},{"content":"To solve this problem, I will follow these steps:\n1. Check if the input list `temps` is empty. If it is empty, return named tuple with all values set to `nothing`.\n2. Calculate the average, maximum, and minimum temperatures from the input list `temps`.\n3. Determine the trend by comparing the first and last elements of the list:\n   - If the first temperature is greater than the last temperature, set the trend to `:decreasing`.\n   - If the first temperature is less than the last temperature, set the trend to `:increasing`.\n   - Otherwise, set the trend to `:stable`.\n4. Return the results in a named tuple.","status":200,"tokens":[255,140],"elapsed":1.372629916,"_type":"aimessage"}]