[{"content":"Act as a helpful AI assistant","variables":[],"_type":"systemmessage"},{"content":"In Julia, You are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.","variables":[],"_type":"usermessage"},{"content":"For `trend` calculation, you can use the following rules:\n* if there are less than 2 values, it is `:stable`;\n* otherwise, compare the first and second elements in sorted order; if they are equal, check next pair of values, until you get two different numbers (first that is higher and second that is lower); if such a pair exists, the trend is `:increasing`, and if no such pair exists, then it is `:decreasing`.\n\nExamples:\n```jldoctest\njulia> weather_data_analyzer([15.30, 2.20, 2.78])\n(; average = 10.69667, max = 15.3, min = 2.2, trend = :decreasing)\n\njulia> weather_data_analyzer([-11, -4.3, -14.3])\n(; average = -8.36667, max = -11, min = -14.3, trend = :increasing)\n```\n\"\"\"\nfunction weather_data_analyzer(temps::Vector{T}) where {T<:Real}\n    length(temps) < 2 ? (; average=nothing, max=nothing, min=nothing, trend=:stable) :\n        (; average = Statistics.mean(sort!(temps)), max = maximum(temps), min = minimum(temps), trend = _trend_calculation(sort!(temps)))\nend\n\nfunction _trend_calculation(sorted_temperatures::Vector{T}) where {T<:Real}\n    length(sorted_temperatures) < 2 ? :stable :\n        first(sorted_temperatures), last(sorted_temperatures) = @views sorted_temperatures[1], sorted_temperatures[end]\n    if first == last\n        return _trend_calculation(Base.view(sorted_temperatures, 2:length(sorted_temperatures)))\n    elseif !isapprox(first,last) && (first < last || isapprox(first,last; atol=1))\n        :decreasing\n    else\n        :increasing\n    end\nend","status":200,"tokens":[137,506],"elapsed":28.518906625,"_type":"aimessage"}]