[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"# Solution\n\nHere is a solution to the task in Julia:\n```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps::Vector{Number})::NamedTuple{(; average=Number, max=Number, min=Number, trend=Symbol), NamedTuple{(; average=nothing, max=nothing, min=nothing, trend=nothing)}\n    if isempty(temps)\n        return (average = nothing, max = nothing, min = nothing, trend = nothing)\n    end\n    \n    average_temp = mean(temps)\n    maximum_temp = maximum(temps)\n    minimum_temp = minimum(temps)\n    \n    if all(temp -> temp >= average_temp, temps)\n        return (average = average_temp, max = maximum_temp, min = minimum_temp, trend = :increasing)\n    elseif all(temp -> temp <= average_temp, temps)\n        return (average = average_temp, max = maximum_temp, min = minimum_temp, trend = :decreasing)\n    else\n        return (average = average_temp, max = maximum_temp, min = minimum_temp, trend = :stable)\n    end\nend\n```\nThis function first checks if the list of temperatures is empty. If it is, it returns a named tuple with all values set to `nothing`. Otherwise, it computes the average temperature using the `mean` function from the `Statistics` package. Then, it finds the maximum and minimum temperatures in the list using the `maximum` and `minimum` functions from the same package.\n\nNext, the function checks if all temperatures are greater than or equal to the average temperature. If they are, it returns a named tuple with the average temperature as both the maximum and minimum, and the trend set to `:increasing`. Similarly, if all temperatures are less than or equal to the average temperature, it sets the trend to `:decreasing`. Otherwise, it sets the trend to `:stable`.\n\nFinally, the function returns the named tuple containing the average, maximum, minimum, and trend values.","status":200,"tokens":[466,481],"elapsed":31.019710291,"_type":"aimessage"}]