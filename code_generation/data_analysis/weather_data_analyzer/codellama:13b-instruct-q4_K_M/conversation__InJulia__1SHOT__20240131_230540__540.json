[{"content":"Act as a helpful AI assistant","variables":[],"_type":"systemmessage"},{"content":"In Julia, You are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.","variables":[],"_type":"usermessage"},{"content":"```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps::Vector{<:Number})::NamedTuple{(:average, :max, :min, :trend), Tuple{Float64, Float64, Float64, Symbol}}\n    if isempty(temps)\n        return (; average=nothing, max=nothing, min=nothing, trend=nothing)\n    end\n    \n    # Compute the statistics\n    avg_temp = mean(temps)\n    max_temp = maximum(temps)\n    min_temp = minimum(temps)\n    trend = if temps[2] > temps[1]\n        :increasing\n    elseif temps[2] < temps[1]\n        :decreasing\n    else\n        :stable\n    end\n    \n    return (; average=avg_temp, max=max_temp, min=min_temp, trend=trend)\nend\n```\nThis function takes a vector of `Number`s as input and returns a named tuple with the following keys:\n\n* `average`: The average temperature.\n* `max`: The maximum temperature.\n* `min`: The minimum temperature.\n* `trend`: A symbol indicating whether the trend is increasing, decreasing, or stable (if the list is empty, this value will be set to `nothing`).","status":200,"tokens":[0,310],"elapsed":4.133415197,"_type":"aimessage"}]