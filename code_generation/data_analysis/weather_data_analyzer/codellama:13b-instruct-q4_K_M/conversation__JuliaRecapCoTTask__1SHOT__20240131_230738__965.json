[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps::Vector{Number})::NamedTuple{(:average, :max, :min, :trend), Tuple{Float64, Float64, Float64, Symbol}}\n    # Return nothing if the list is empty\n    if isempty(temps)\n        return (; average=nothing, max=nothing, min=nothing, trend=nothing)\n    end\n\n    # Calculate the statistics and determine the trend\n    average = mean(temps)\n    max_temp = maximum(temps)\n    min_temp = minimum(temps)\n    if length(temps) == 1\n        trend = :stable\n    elseif all(x -> x >= temps[1], temps[2:end])\n        trend = :increasing\n    elseif all(x -> x <= temps[1], temps[2:end])\n        trend = :decreasing\n    else\n        trend = :stable\n    end\n\n    # Return the named tuple with the results\n    return (; average, max_temp, min_temp, trend)\nend\n```\n\nHere is an example usage of the function:\n```julia\n# Sample input data\ntemps = [23.4, 25.1, 26.7, 27.8, 28.9, 29.3]\n\n# Call the function and print the results\nresult = weather_data_analyzer(temps)\nprintln(\"Average temperature: \", result.average)\nprintln(\"Maximum temperature: \", result.max)\nprintln(\"Minimum temperature: \", result.min)\nif result.trend == :increasing\n    println(\"Trend is increasing.\")\nelseif result.trend == :decreasing\n    println(\"Trend is decreasing.\")\nelse\n    println(\"Trend is stable.\")\nend\n```","status":200,"tokens":[0,442],"elapsed":6.223449803,"_type":"aimessage"}]