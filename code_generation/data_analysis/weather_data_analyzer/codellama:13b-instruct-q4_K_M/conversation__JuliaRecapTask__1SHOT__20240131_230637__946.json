[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps::Vector{T}) where T <: Number\n    if isempty(temps)\n        return (; average=nothing, max=nothing, min=nothing, trend=nothing)\n    end\n    avg = mean(temps)\n    maximum = maximum(temps)\n    minimum = minimum(temps)\n    trend = if temps[1] < temps[2]\n        :increasing\n    elseif temps[1] > temps[2]\n        :decreasing\n    else\n        :stable\n    end\n    (; average=avg, max=maximum, min=minimum, trend=trend)\nend\n```\nExplanation:\n\n* We start by defining the function `weather_data_analyzer` that takes a vector of numbers `temps`.\n* We check if the list is empty and return a named tuple with all values set to `nothing` if it is.\n* Otherwise, we calculate the average temperature using `mean(temps)`.\n* We find the maximum and minimum temperatures using `maximum(temps)` and `minimum(temps)`, respectively.\n* We use an `if` statement to determine the trend of the temperatures: if the first two elements are in increasing order, we set the trend to `:increasing`; if they are in decreasing order, we set it to `:decreasing`; otherwise, we set it to `:stable`.\n* We return a named tuple containing the average temperature, maximum temperature, minimum temperature, and trend.","status":200,"tokens":[0,353],"elapsed":4.847246239,"_type":"aimessage"}]