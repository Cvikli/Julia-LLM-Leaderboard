[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is a solution:\n\n```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps::Vector{<:Real})\n    if length(temps) == 0\n        return (; average=nothing, maximum=nothing, minimum=nothing, trend=nothing)\n    else\n        average = mean(temps)\n        maximum = maximum(temps)\n        minimum = minimum(temps)\n\n        if length(temps) == 1 || all(x->x==first(temps), temps)\n            trend = :stable\n        elseif issorted(temps)\n            trend = :increasing\n        elseif issorted(temps, rev=true)\n            trend = :decreasing\n        else\n            trend = :unpredictable\n        end\n    \n        return (; average=average, maximum=maximum, minimum=minimum, trend=trend)\n    end \nend\n```\n\nThis function takes a list of temperatures and computes the `mean` (average), `maximum`, `minimum` values. Then it checks for the trend in temperature data based on whether the temperatures are strictly increasing, strictly decreasing or neither. If all temperatures are equal then trend is considered stable. For an empty vector, function returns a named tuple with all fields set to `nothing`.\n\nRemember to use `using Statistics` at the top of your script to be able to use the `mean()`, `maximum()` and `minimum()` functions. The `<:Real` in the type annotation for `temps` means that it can accept any real number (integer or float) as elements.","status":200,"tokens":[492,376],"elapsed":75.089188125,"_type":"aimessage"}]