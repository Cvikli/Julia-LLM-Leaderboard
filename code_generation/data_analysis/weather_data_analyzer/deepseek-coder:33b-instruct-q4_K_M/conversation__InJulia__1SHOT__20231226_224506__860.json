[{"content":"Act as a helpful AI assistant","variables":[],"_type":"systemmessage"},{"content":"In Julia, You are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.","variables":[],"_type":"usermessage"},{"content":"```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps)\n    if isempty(temps)\n        return (average=nothing, max=nothing, min=nothing, trend=nothing)\n    end\n    \n    avg = mean(temps)\n    mx = maximum(temps)\n    mn = minimum(temps)\n    \n    if length(temps) == 1\n        trend = :stable\n    else\n        slope = (temps[end] - temps[1]) / (length(temps) - 1)\n        \n        if slope > 0\n            trend = :increasing\n        elseif slope < 0\n            trend = :decreasing\n        else\n            trend = :stable\n        end\n    end\n    \n    return (average=avg, max=mx, min=mn, trend=trend)\nend\n```\nIn this function, we first check if the list of temperature data is empty. If it is, we return a named tuple with all values set to `nothing`. \n\nIf the list isn't empty, we calculate the average, maximum and minimum temperatures using `Statistics.mean`, `maximum`, and `minimum` functions respectively. We also compute the trend by calculating the slope of the line that connects first and last points in the data, and then determining if it's positive, negative or zero (which would correspond to an increasing, decreasing, or stable trend). If there is only one temperature datum, we assign a default `:stable` value.","status":200,"tokens":[163,358],"elapsed":61.816577917,"_type":"aimessage"}]