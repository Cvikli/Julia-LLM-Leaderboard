[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is the Julia code that defines function `weather_data_analyzer`:\n\n```julia\nusing Statistics  # use statistics functions, such as mean and maximum/minimum\n\nfunction weather_data_analyzer(temps::AbstractVector{<:Number})\n    if isempty(temps)\n        return (average = nothing, max = nothing, min = nothing, trend = nothing)\n    end\n    \n    avg_temp = mean(temps)  # average temperature\n    max_temp = maximum(temps)  # maximum temperature\n    min_temp = minimum(temps)  # minimum temperature\n    \n    if length(temps) == 1  # only one data point, no trend analysis\n        trend_status = :stable\n    else\n        prev_temp = temps[1]\n        ups = 0  # number of increases (ups) in temp\n        downs = 0  # number of decreases (downs) in temp\n        \n        for temp in temps[2:end]\n            if temp > prev_temp  # increase\n                ups += 1\n            elseif temp < prev_temp  # decrease\n                downs += 1\n            end\n            \n            prev_temp = temp\n        end\n        \n        trend_status = cmp(ups, downs)  # compare counts: less ups => decreasing; more ups => increasing; equal => stable\n    end\n    \n    return (average=avg_temp, max=max_temp, min=min_temp, trend=trend_status)\nend\n```\n\nYou can call the function as `weather_data_analyzer([25.3, 24.8, 26.1])` to get statistics for these temperatures. Please note that in Julia, strings are case-sensitive (uppercase and lowercase letters are different). Also, note that the trend is determined by comparing counts of increasing/decreasing temperature changes, not based on actual numbers.\n\nYou can test this function with various cases such as `weather_data_analyzer([25.3])` which should return a named tuple with `average = max = min = 25.3` and `trend = :stable`; or with an empty list like `weather_data_analyzer([])` to check what happens when the input is empty.","status":200,"tokens":[490,534],"elapsed":101.847467042,"_type":"aimessage"}]