[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's an example implementation of the `weather_data_analyzer` function in Julia that satisfies the given task and special instructions.\n```julia\nusing Statistics # Import Statistics package for statistical analysis\nfunction weather_data_analyzer(temps)\n    if isempty(temps) # Check if the list is empty\n        return (; average=nothing, max=nothing, min=nothing, trend=nothing)\n    end\n    avg = mean(temps)  # Calculate the average temperature\n    maximum = maximum(temps) # Get the highest temperature\n    minimum = minimum(temps) # Get the lowest temperature\n    if length(temps) == 1  # If there is only one temperature, it cannot have a trend\n        return (; average=avg, max=maximum, min=minimum, trend=:stable)\n    end\n    if maximum == minimum  # Check if all temperatures are the same\n        return (; average=avg, max=maximum, min=minimum, trend=:stable)\n    end\n    sorted_temps = sort(temps) # Sort the list of temperatures in ascending order\n    differences = diff(sorted_temps)  # Calculate the difference between adjacent temperatures\n    if all(x -> x > 0, differences)  # Check if all differences are positive (increasing trend)\n        return (; average=avg, max=maximum, min=minimum, trend=:increasing)\n    elseif all(x -> x < 0, differences)  # Check if all differences are negative (decreasing trend)\n        return (; average=avg, max=maximum, min=minimum, trend=:decreasing)\n    end\n    return (; average=avg, max=maximum, min=minimum, trend=:stable)  # If neither of the above conditions hold, then it is a stable trend\nend\n```\nThe `weather_data_analyzer` function takes a list of daily temperatures (`temps`) as input and performs statistical analysis on this data. It returns a named tuple containing the average temperature, maximum, minimum, and trend (either `:increasing`, `:decreasing`, or `:stable`). If the list is empty, it returns a named tuple with all values set to `nothing`.","status":200,"tokens":[0,530],"elapsed":28.832730916,"_type":"aimessage"}]