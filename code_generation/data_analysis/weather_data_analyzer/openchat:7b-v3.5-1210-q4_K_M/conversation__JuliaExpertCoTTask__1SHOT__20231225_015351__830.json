[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Data\n\nweather_data_analyzer([25, 27, 23, 20, 22])","variables":["task","data"],"_type":"usermessage"},{"content":"# Approach\n- Import the necessary functions from the Statistics package.\n- Create a function `weather_data_analyzer` that accepts one argument `temps`.\n- Check if the list is empty, if so return a named tuple with all values set to nothing.\n- Otherwise calculate the average, max, and min temperatures.\n- Calculate the trend based on the data.\n- Return a named tuple containing the calculated values.\n\n# Code\n```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps::Vector)\n    if isempty(temps)\n        return (; average=nothing, max=nothing, min=nothing, trend=:stable)\n    end\n    \n    avg = Statistics.mean(temps)\n    max = maximum(temps)\n    min = minimum(temps)\n\n    if all(temps .== [min, avg]) || all(temps .== [max, avg])  # Check if temperatures are constant (stable trend)\n        trend = :stable\n    elseif temps[1] < temps[end]  # Check if temperatures are increasing\n        trend = :increasing\n    else  # Must be decreasing\n        trend = :decreasing\n    end\n    \n    return (; average=avg, max=max, min=min, trend=trend)\nend\n```\n\n# Test\n```julia\nweather_data_analyzer([25, 27, 23, 20, 22])\n```","status":200,"tokens":[302,353],"elapsed":21.919122583,"_type":"aimessage"}]