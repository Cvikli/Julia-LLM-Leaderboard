[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"# [[1]]\nusing Statistics\n\nfunction weather_data_analyzer(temps::Vector{<:Number})\n    # Initialize results as a named tuple\n    results = (; average=nothing, max=nothing, min=nothing, trend=nothing)\n    \n    # Check if the input list is empty\n    if isempty(temps)\n        return results\n    end\n    \n    # Calculate average temperature\n    results.average = mean(temps)\n    \n    # Find maximum and minimum temperatures\n    results.max = maximum(temps)\n    results.min = minimum(temps)\n    \n    # Determine trend (increasing, decreasing, or stable)\n    if length(temps) > 1\n        slope = cov(temps)[2, 1] / var(temps[1])\n        if slope > 0.5\n            results.trend = :increasing\n        elseif slope < -0.5\n            results.trend = :decreasing\n        else\n            results.trend = :stable\n        end\n    else\n        results.trend = :stable\n    end\n    \n    return results\nend","status":200,"tokens":[0,266],"elapsed":7.491229399,"_type":"aimessage"}]