[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are given a list of daily temperature data `temps` (numbers). Write a function `weather_data_analyzer` that performs statistical analyses on this data (use `Statistics` package). The function should return results in named tuple (construct it with `(; key1=value1,key2=value2)` syntax) containing the `average`, `max`, `min` temperatures, and a `trend` (can be only: `:increasing`, `:decreasing`, or `:stable`). If the list is empty, the function should return a named tuple with all values set to `nothing`.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's a Julia function to perform the required statistical analyses on the given list of daily temperature data.\n\n```julia\nusing Statistics\n\nfunction weather_data_analyzer(temps::Vector{Number})\n    n = length(temps)\n    \n    if n == 0\n        return (average=nothing, max=nothing, min=nothing, trend=nothing)\n    end\n    \n    average = Statistics.mean(temps)\n    max = maximum(temps)\n    min = minimum(temps)\n    \n    if average > temps[1] && average > temps[end]\n        trend = :increasing\n    elseif average < temps[1] && average < temps[end]\n        trend = :decreasing\n    else\n        trend = :stable\n    end\n    \n    return (average, max, min, trend)\nend\n```\n\nThis function first checks if the given list of temperatures is empty. If it is, it returns a named tuple with all values set to `nothing`. Otherwise, it calculates the average, maximum, and minimum temperatures using functions from the `Statistics` package. Finally, it determines the trend based on whether the average temperature is higher than both the first and last values in the list. If so, it's increasing; if it's lower than both, it's decreasing; otherwise, it's stable. The function then returns a named tuple with the calculated values for `average`, `max`, `min`, and `trend`.","status":200,"tokens":[471,344],"elapsed":13.106609458,"_type":"aimessage"}]