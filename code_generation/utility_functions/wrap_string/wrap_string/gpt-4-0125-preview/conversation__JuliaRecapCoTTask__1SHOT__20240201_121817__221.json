[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"## Solution\n\nWe'll create a function named `wrap_string` that takes two inputs: a string `text` and an optional integer `text_width` with a default value of 10. This function will split the given string into words, iterate through these words, and concatenate them into a new string, inserting a newline character (`\\n`) whenever adding the next word would exceed the specified `text_width`. \n\nTouches to keep in mind:\n\n- Ensure that the function cleanly handles edge cases such as empty strings or extremely long single words that exceed `text_width`.\n- Preserve white spaces between words in the resulting string, except where newlines are inserted.\n\n### Code Snippet\n\n```julia\nfunction wrap_string(text::AbstractString, text_width::Int=10) :: AbstractString\n    words = split(text)  # Split the input text into individual words\n    wrapped_text = \"\"  # Initialize an empty string to accumulate the result\n    \n    current_line_length = 0  # Track the length of the current line\n    \n    for word in words\n        word_length = length(word)\n        if current_line_length + word_length > text_width\n            # If adding this word exceeds the text_width, insert a newline\n            # except for the very first word\n            if wrapped_text != \"\" \n                wrapped_text *= \"\\n\"\n            end\n            wrapped_text *= word\n            current_line_length = word_length  # Reset the current line length\n        else\n            # If this is not the first word in line, add a space before it\n            if current_line_length != 0 \n                wrapped_text *= \" \"\n                current_line_length += 1  # Account for the space\n            end\n            wrapped_text *= word\n            current_line_length += word_length\n        end\n    end\n    \n    return wrapped_text\nend\n\n# Example usage\nexample_text = \"Julia is great for numerical computing and has a growing community.\"\nwrapped_example = wrap_string(example_text, 15)\nprintln(wrapped_example)\n```\n\nThis code snippet defines the `wrap_string` function, which efficiently concatenates words from the input `text`, inserting a newline character as necessary, based on the specified or default `text_width`. The example demonstrates how to use this function, wrapping text at 15 characters.","status":200,"tokens":[317,470],"elapsed":33.595723208,"_type":"aimessage"}]