[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Let's approach this task by creating a Julia function `wrap_string` that accepts a string and optionally a maximum text width. We'll iterate over the words in the input string, check the current line length against the maximum width, and insert line breaks accordingly.\n\n### Julia Code Snippet for `wrap_string`\n\n```julia\nfunction wrap_string(text::AbstractString, text_width::Int=10)\n    words = split(text)\n    current_line = \"\"\n    wrapped_text = \"\"\n\n    for word in words\n        if length(current_line) + length(word) + 1 > text_width\n            wrapped_text *= current_line * \"\\n\"\n            current_line = word\n        else\n            if isempty(current_line)\n                current_line = word\n            else\n                current_line *= \" \" * word\n            end\n        end\n    end\n\n    # Add the last line if it's not empty\n    if !isempty(current_line)\n        wrapped_text *= current_line\n    end\n\n    return wrapped_text\nend\n```\n\n### Example Usage\n\nLet's demonstrate how to use this function with an example. We will provide a sentence to wrap and specify a maximum text width.\n\n```julia\ntext = \"Julia is a high-level, high-performance dynamic programming language\"\nwrapped_text = wrap_string(text, 15)\nprintln(wrapped_text)\n```\n\nThis should output the text with appropriate line breaks to ensure that no line exceeds 15 characters in width.\n\nRemember, the `text_width` parameter has a default value of 10, so you can omit it for a narrower output.","status":200,"tokens":[317,324],"elapsed":20.521645125,"_type":"aimessage"}]