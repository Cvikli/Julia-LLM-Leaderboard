[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is the Julia function `wrap_string` that meets the given task:\n\n```julia\nfunction wrap_string(text::AbstractString; text_width=10)\n    wrapped_text = IOBuffer()\n    words = split(text, r\"\\s+\")\n    \n    for word in words\n        current_length = length(bytestring(join(wrapped_text, word)))\n        \n        if current_length > text_width\n            seekstart(wrapped_text)\n            write(wrapped_text, word)\n        elseif current_length + bytelength(word) <= text_width\n            write(wrapped_text, \" \")\n            write(wrapped_text, word)\n        else\n            write(wrapped_text, \"\\n\")\n            write(wrapped_text, word[2:end])\n        end\n    end\n    \n    return bytestring(take!(wrapped_text))\nend\n```\n\nAn example usage of this function could be:\n\n```julia\nprintln(\"Result for 'The quick brown fox jumped over the lazy dog'\")\nprintln(wrap_string(\"The quick brown fox jumped over the lazy dog\"))\nprintln(\"\\nResult for 'This is a very long string that should wrap at 15 characters'\")\nprintln(wrap_string(\"This is a very long string that should wrap at 15 characters\", text_width=15))\n```","status":200,"tokens":[375,331],"elapsed":22.3828755,"_type":"aimessage"}]