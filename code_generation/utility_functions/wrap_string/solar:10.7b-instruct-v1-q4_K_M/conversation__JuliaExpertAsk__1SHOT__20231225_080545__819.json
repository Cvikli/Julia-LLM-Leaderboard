[{"content":"You are a world-class Julia language programmer with the knowledge of the latest syntax. Your communication is brief and concise. You're precise and answer only when you're confident in the high quality of your answer.","variables":[],"_type":"systemmessage"},{"content":"# Question\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example","variables":["ask"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(text::AbstractString, text_width::Int=10)\n    lines = []\n    current_line = \"\"\n    \n    for word in eachindex(text) => bychar -> split.(matchallr(\"\\\\b\", byvector(view(text)), nomemory()), true)\n        if length(current_line)*2 + length(word) <= text_width\n            current_line *= string(word)\n        else\n            push!(lines, current_line)\n            current_line = word\n        end\n    end\n\n    push!(lines, current_line)\n    \n    return join(lines, \"\\n\")\nend\n\n# Example:\nexample_text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero.\"\nwrap_string(example_text) # wraps the string with a maximum text width of 10 characters\n```\n\nThe function `wrap_string` takes in a string (`text`) and an optional integer argument for the maximum text width (`text_width`, with default value 10). It processes each word within `text` to add line breaks as required. The final wrapped string will be returned joined by newlines. In this example, you can see how the function is called on a sample input and should return a formatted output by wrapping the words at the specified maximum text width.","status":200,"tokens":[110,327],"elapsed":19.653516792,"_type":"aimessage"}]