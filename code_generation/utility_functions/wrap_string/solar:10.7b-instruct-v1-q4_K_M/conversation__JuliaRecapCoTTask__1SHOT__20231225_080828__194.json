[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's the Julia function `wrap_string` based on the given task:\n\n```julia\nfunction wrap_string(text::AbstractString, text_width::Int=10)\n    current_line = \"\"\n    for word in split(text, r\"[ \\t\\n\\r]+\" ) # Split by multiple spaces or line break characters\n        current_word_length = length(word)\n        if (current_line != \"\") && (length(current_line) + current_word_length > text_width)\n            println(current_line)\n            current_line = string(word, \" \")\n        else\n            current_line *= string(word, \" \") # concatenate with a space\n        end\n    end\n    # Print the last line if it's not empty\n    if length(current_line) > 0\n        println(current_line[1:end-1])\n    end\nend\n```\n\nAn example usage of this function can be:\n\n```julia\nwrap_string(\"This is an example sentence to demonstrate string wrapping\") # default text width = 10\n# Output:\n# This is an examp\n# le senten\n# ce to demo\n# strate sr\n# ing wrap\n```","status":200,"tokens":[377,295],"elapsed":20.218326959,"_type":"aimessage"}]