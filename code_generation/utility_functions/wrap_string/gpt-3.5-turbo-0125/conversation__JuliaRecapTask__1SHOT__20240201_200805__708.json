[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is the `wrap_string` function that iterates over words and adds a new line when the maximum `text_width` is exceeded:\n\n```julia\nfunction wrap_string(text::AbstractString; text_width::Int=10)\n    words = split(text)\n    result = \"\"\n    current_line_length = 0\n\n    for word in words\n        if current_line_length + length(word) > text_width\n            result *= '\\n' * word * \" \"\n            current_line_length = length(word) + 1\n        else\n            result *= word * \" \"\n            current_line_length += length(word) + 1\n        end\n    end\n\n    return result\nend\n```\n\nExample of `wrap_string` function in action:\n\n```julia\ntext = \"Julia is a high-level, high-performance dynamic programming language.\"\nwrapped_text = wrap_string(text, text_width=15)\nprintln(wrapped_text)\n```\n\nOutput:\n```\nJulia is a\nhigh-level,\nhigh-performance\ndynamic\nprogramming\nlanguage.\n```\n\nIn this example, the `wrap_string` function wraps the input text at or before each 15 character mark.","status":200,"tokens":[316,238],"elapsed":1.921271833,"_type":"aimessage"}]