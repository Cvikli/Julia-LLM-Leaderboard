[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Based on your problem statement and the given special instructions, here's how to write the `wrap_string` function in Julia:\n\n```julia\nfunction wrap_string(text::AbstractString; text_width::Int = 10)\n    words = split(strip(text), ' ')\n    lines = []\n    line = \"\"\n\n    for word in words\n        if length(line) + length(word) > text_width\n            push!(lines, line)\n            line = String(word)\n        else\n            line *= string(word) * \" \"\n        end\n    end\n\n    push!(lines, line) # Last line may not be full\n    join(lines, \"\\n\")\nend\n\n# Example usage\nwrap_string(\"This is a very long text with multiple words that need to be wrapped\", 15)\n```\n\nIn the example above, we define a function `wrap_string` that accepts a string `text` and an optional argument `text_width`. The default value for this argument is set to 10. The function uses the `split`, `length`, `push!`, `*=`, and `join` functions from Julia's standard library, making use of abstract types and general type annotations as much as possible.\n\nThe function first splits the input string by whitespace and stores the resulting array in `words`. Then it initializes an empty `lines` array to store each line of wrapped text. The `line` variable is initialized as an empty string to build up the current line.\n\nThe for loop iterates through each word in the `words` array. For every new word, if adding it to the current line would exceed the specified width, a new line is added to the `lines` array, and the current line becomes the new word with an extra space added between them. If the current line can accommodate the new word without exceeding the text_width, the current line's length is increased by the length of the new word, and a space is appended to it as well.\n\nAt the end of processing all words, if there's still an incomplete line left, it is added to the `lines` array as well. Finally, the function uses the `join` function to concatenate all lines in the `lines` array with a newline character, creating the final wrapped string.","status":200,"tokens":[366,517],"elapsed":18.258093542,"_type":"aimessage"}]