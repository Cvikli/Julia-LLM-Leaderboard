[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Based on the task and special instructions, here's my implementation of the `wrap_string` function:\n\n```julia\nfunction wrap_string(text::AbstractString, text_width::Int=10)\n    words = split(text)\n    lines = [\"\"]\n    current_line_length = 0\n    \n    for word in words\n        word_length = length(word)\n        \n        if current_line_length + word_length <= text_width\n            # Add the word to the current line\n            if current_line_length > 0\n                lines[end] *= \" \"\n            end\n            lines[end] *= word\n            current_line_length += word_length\n        else\n            # Start a new line\n            push!(lines, word)\n            current_line_length = word_length\n        end\n    end\n    \n    return join(lines, \"\\n\")\nend\n```\n\nLet's test the function with an example:\n\n```julia\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non maximus erat, et bibendum leo.\"\nwrapped_text = wrap_string(text, 20)\nprintln(wrapped_text)\n```\n\nExpected output:\n```\nLorem ipsum dolor\nsit amet,\nconsectetur\nadipiscing elit.\nSed non maximus\nerat, et bibendum\nleo.\n```","status":200,"tokens":[316,264],"elapsed":6.371237625,"_type":"aimessage"}]