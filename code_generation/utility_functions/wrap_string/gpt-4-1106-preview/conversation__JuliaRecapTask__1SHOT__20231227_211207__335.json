[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here is the Julia function `wrap_string` which takes an input string and wraps it so that each line does not exceed the specified maximum `text_width`.\n\n```julia\nfunction wrap_string(text::AbstractString, text_width::Int=10)\n    words = split(text)\n    current_line = \"\"\n    wrapped_text = \"\"\n    \n    for word in words\n        potential_length = length(current_line) + length(word) + (isempty(current_line) ? 0 : 1) \n        if potential_length > text_width\n            wrapped_text *= current_line * \"\\n\"\n            current_line = word\n        else\n            current_line *= isempty(current_line) ? word : \" \" * word\n        end\n    end\n    \n    if !isempty(current_line)\n        wrapped_text *= current_line\n    end\n    \n    return wrapped_text\nend\n```\n\nExample:\n\n```julia\n# Example usage:\ntext = \"Julia is a high-level, high-performance, dynamic programming language.\"\nwrapped_text = wrap_string(text)\nprintln(wrapped_text)\n```\nThis should output the string wrapped with a default text width of 10 characters per line. The actual output will depend on the length of the words in relation to the specified `text_width`.","status":200,"tokens":[316,253],"elapsed":18.284675,"_type":"aimessage"}]