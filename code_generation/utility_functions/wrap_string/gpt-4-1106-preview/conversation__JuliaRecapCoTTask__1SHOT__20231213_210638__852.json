[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"I'll write a Julia function `wrap_string` that takes a string and an optional maximum text width with a default value of 10, and then iterates over the words in the string, adding a new line character before a word if including that word would exceed the specified maximum text width.\n\n```julia\nfunction wrap_string(text::AbstractString, text_width::Int=10)\n    words = split(text)\n    wrapped_text = \"\"\n    current_line_length = 0\n\n    for word in words\n        word_length = length(word)\n\n        if current_line_length + word_length > text_width\n            # Start a new line if adding the current word would exceed the max text width\n            wrapped_text *= \"\\n\"\n            current_line_length = 0\n        elseif current_line_length != 0\n            # Add a space before the word if it's not the beginning of a line\n            wrapped_text *= \" \"\n            current_line_length += 1\n        end\n\n        # Add the word to the line\n        wrapped_text *= word\n        current_line_length += word_length\n    end\n\n    return wrapped_text\nend\n\n# Example usage:\nexample_text = \"The quick brown fox jumps over the lazy dog\"\nwrapped_text = wrap_string(example_text)\nprintln(wrapped_text)\n```\n\nThis code will output the string with each line not exceeding the maximum width of 10 characters, unless a single word itself exceeds that length, in which case it will be placed on a new line on its own.","status":200,"tokens":[317,308],"elapsed":22.033985708,"_type":"aimessage"}]