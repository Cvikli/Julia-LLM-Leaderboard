[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"## Think through your approach step by step\n\n1. Define a function `wrap_string` that takes a string as input and an optional parameter `text_width` with a default value of 10.\n2. Split the input string into words.\n3. Iterate over the words, keeping track of the current line length.\n4. Add words to the current line until adding another word would exceed the `text_width`.\n5. When the `text_width` would be exceeded, add a newline character to the result and reset the current line length.\n6. Continue until all words have been processed.\n7. Return the wrapped string.\n\n## Write any functions and other code you need\n\n```julia\nfunction wrap_string(text::String, text_width::Int=10)\n    words = split(text)\n    wrapped_text = \"\"\n    current_line_length = 0\n    \n    for word in words\n        if current_line_length + length(word) > text_width\n            wrapped_text *= \"\\n\"\n            current_line_length = 0\n        end\n        wrapped_text *= word * \" \"\n        current_line_length += length(word) + 1\n    end\n    \n    return wrapped_text\nend\n```\n\n## Solve the task\n\n```julia\n# Example usage:\nexample_text = \"This function will wrap words into lines\"\nwrapped_text = wrap_string(example_text)\nprintln(wrapped_text)\n```\n\n## Check that your solution is correct\n\nThe output should be a string with words wrapped into lines, each line not exceeding the `text_width` of 10 characters. The example provided should result in a string with several lines, each containing words that fit within the 10-character limit.","status":200,"tokens":[162,340],"elapsed":31.3467585,"_type":"aimessage"}]