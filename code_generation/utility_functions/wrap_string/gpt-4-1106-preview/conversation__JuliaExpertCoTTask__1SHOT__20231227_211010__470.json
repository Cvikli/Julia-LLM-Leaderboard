[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"## Think through your approach step by step\n\n1. Define a new function `wrap_string` that takes a string input.\n2. The function should also have a parameter `text_width` with a default value of 10.\n3. Initialize an empty string to hold the wrapped text.\n4. Split the input string into words.\n5. Iterate through the words, and for each word:\n   - Check if adding the word to current line would exceed the `text_width`.\n   - If it would, append a newline character to the wrapped text before the word.\n   - If not, append the word to the current line with a space (if it's not the first word in the line).\n6. Return the wrapped text.\n7. Provide an example with the given data.\n\n## Write any functions and other code you need\n\n```julia\nfunction wrap_string(text::String, text_width::Int=10)\n    wrapped_text = \"\"\n    current_line_length = 0\n    \n    words = split(text)\n    for (index, word) in enumerate(words)\n        word_length = length(word)\n        # If adding the word exceeds the text_width or it's a new line start with the word\n        if current_line_length + word_length > text_width\n            wrapped_text *= (index == 1 ? \"\" : \"\\n\") * word\n            current_line_length = word_length\n        else\n            # Add a space before word if it's not the start of a new line\n            wrapped_text *= (current_line_length == 0 ? \"\" : \" \") * word\n            current_line_length += word_length + (current_line_length == 0 ? 0 : 1)\n        end\n    end\n    \n    return wrapped_text\nend\n```\n\n## Solve the task\n\n```julia\n# Example\nresult = wrap_string(\"This function will wrap words into lines\")\nprintln(result)\n```\n\n## Check that your solution is correct\n\nOutput should appear as follows, with each line not exceeding the default text width of 10:\n\n```\nThis\nfunction\nwill wrap\nwords into\nlines\n```","status":200,"tokens":[162,431],"elapsed":32.848218833,"_type":"aimessage"}]