[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Certainly! Below is the Julia function `wrap_string` that takes a string and wraps the text so that each line does not exceed the specified `text_width`. It also includes an example of usage.\n\n```julia\nfunction wrap_string(text::AbstractString, text_width::Int=10)\n    words = split(text)\n    current_line_length = 0\n    wrapped_text = \"\"\n    \n    for word in words\n        word_length = length(word)\n        # If adding the next word exceeds the line length, start a new line\n        if current_line_length + word_length > text_width\n            wrapped_text *= \"\\n\"\n            current_line_length = 0\n        end\n        # Add a space before the word if it's not the beginning of a line\n        if current_line_length > 0\n            wrapped_text *= \" \"\n            current_line_length += 1\n        end\n        wrapped_text *= word\n        current_line_length += word_length\n    end\n    \n    return wrapped_text\nend\n\n# Example\nexample_text = \"Julia is a high-level, high-performance, dynamic programming language.\"\nwrapped_example = wrap_string(example_text, 15)\nprintln(wrapped_example)\n```\n\nThis function will output the `example_text` with new lines inserted such that no line exceeds 15 characters in length. The output will look something like this:\n\n```\nJulia is a\nhigh-level,\nhigh-performance,\ndynamic\nprogramming\nlanguage.\n```\n\nThe function takes care to not break words across lines and to start a new line when the next word would cause the line to exceed the specified `text_width`.","status":200,"tokens":[317,331],"elapsed":26.529027291,"_type":"aimessage"}]