[code_generation]
criteria = ["parsed", "executed", "passed_unit_tests", "executed_examples"]
name = "wrap_string"
contributor = "svilupp"
examples = ["wrap_string(\"This function will wrap words into lines\")", "wrap_string(\"This function will wrap words into lines\", 15)"]
imports = []
prompt = "Write a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example"
reference_solution = "function wrap_string(text::AbstractString, text_width::Int=10)\n    words = split(text)\n    line_length = 0\n    wrapped_text = \"\"\n    num_words = length(words)\n    for i in eachindex(words)\n        word = words[i]\n        # +1 for separator length for all but the last word\n        sep_length = (i == num_words) ? 0 : 1\n        if line_length + length(word) + sep_length > text_width\n            wrapped_text *= \"\n\"\n            line_length = 0\n        end\n        wrapped_text *= word * \" \"\n        line_length += length(word) + 1\n    end\n    return strip(wrapped_text)\nend\n"
unit_tests = ["@test wrap_string(\"\", 10) == \"\" ", "@test wrap_string(\"Hi\", 10) == \"Hi\" ", "output = wrap_string(\"This function will wrap words into lines\", 10)\n@test maximum(length.(split(output, \"\n\"))) <= 10\n", "output = wrap_string(\"This function will wrap words into lines\", 20)\n@test maximum(length.(split(output, \"\n\"))) <= 20\n", "output = wrap_string(\"This function will wrap words into lines\", 10)\n@test maximum(length.(split(output, \"\n\"))) <= 10\n", "str=\"This function will wrap words into lines\"\n@test wrap_string(str, length(str)) == str"]
version = "1.1"
