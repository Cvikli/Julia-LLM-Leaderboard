[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Based on the problem statement, here's a solution for the `wrap_string` function in Julia:\n\n```julia\nfunction wrap_string(text::AbstractString; text_width::Int = 10)\n    words = split(text, r\"(?:\\s+|\\S+)(?=(\\.|[!?])))\" # Split text into words with punctuation as separators\n    lines = String[]\n    current_line = \"\"\n\n    for word in words\n        if length(current_line) + length(word) + 1 <= text_width\n            current_line *= word * \" \" # Add space after word if not the last one\n        else\n            push!(lines, current_line) # Add current line to lines and start a new one\n            current_line = String(word) # Set current line to the new word\n        end\n    end\n\n    # Add the last line\n    push!(lines, current_line)\n\n    # Join lines with newline character\n    join(lines, \"\\n\")\nend\n\n# Example\nfunction main()\n    text = \"The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\"\n    wrapped_text = wrap_string(text)\n\n    println(wrapped_text)\nend\n\nmain()\n```\n\nThis function `wrap_string` takes a string as input and an optional `text_width` argument to define the maximum width of each line. It splits the input string into words using a regular expression, then iterates over each word and checks if the current line length plus the length of the word would exceed the maximum width. If so, it adds the current line to a list of lines and starts a new line with the current word. Finally, it joins the lines together with newline characters and returns the wrapped string.","status":200,"tokens":[367,431],"elapsed":3.879564625,"_type":"aimessage"}]