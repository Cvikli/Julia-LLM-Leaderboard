[{"content":"Act as a helpful AI assistant","variables":[],"_type":"systemmessage"},{"content":"Write a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example","variables":[],"_type":"usermessage"},{"content":"Here's an example of a `wrap_string` function in Haskell that takes a string, a text width, and returns a wrapped string as a list of lines:\n\n```haskell\nimport Data.List (words)\n\nwrapString :: String -> Int -> [String]\nwrapString \"\" _ = []\nwrapString text width = map (take width . words) linesText ++ [drop (length lastLine) $ tail linesText]\n  where\n    linesText = until (\\x -> null (words (drop (length x) x))) id $ takeWhile (\\x -> length x <= width) $ iterate (++) [\"\"] (lines text)\n    lastLine = last linesText\n```\n\nUsage example:\n\n```haskell\nmain :: IO ()\nmain = do\n  let text = \"This is a long string that needs to be wrapped into lines with a maximum width of 10 characters. Each line should end with a space.\"\n      wrappedText = wrapString text 10\n  putStrLn $ unlines wrappedText\n```\n\nThis example takes a string \"This is a long string that needs to be wrapped into lines with a maximum width of 10 characters. Each line should end with a space.\" and wraps it into lines with a maximum width of 10 characters. The result will be a list of lines that can be printed using the `unlines` function.","status":200,"tokens":[59,312],"elapsed":5.764369,"_type":"aimessage"}]