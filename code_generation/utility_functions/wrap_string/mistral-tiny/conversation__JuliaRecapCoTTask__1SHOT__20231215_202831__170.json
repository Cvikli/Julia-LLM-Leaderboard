[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Based on the problem statement and the special instruction provided, here's how to implement the `wrap_string` function in Julia:\n\n```julia\nfunction wrap_string(text::AbstractString, text_width::Int = 10)\n    words = split(text, \" \")\n    lines = String[]\n    current_line = \"\"\n\n    for word in words\n        if length(current_line) + length(word) + 1 > text_width\n            push!(lines, current_line)\n            current_line = \"\"\n        end\n        current_line *= word * \" \"\n    end\n\n    if length(current_line) > 0\n        push!(lines, current_line)\n    end\n\n    join(lines, \"\\n\")\nend\n\n# Example usage:\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis ut diam scelerisque, bibendum nisl quis, dapibus sapien. Nullam id felis et ipsum bibendum ultrices. Aliquam erat volutpat.\"\nprintln(wrap_string(text))\n```\n\nThis function `wrap_string` takes a string `text` and an optional `text_width` argument, which defaults to 10. It splits the text into words using the `split` function, then iterates through each word. If adding the word to the current line would exceed the text width, it starts a new line and adds the word to the new line. Finally, it returns the resulting lines as a single string, with each line separated by a newline character.","status":200,"tokens":[369,373],"elapsed":3.361227792,"_type":"aimessage"}]