[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"# Solution\n\n```julia\nfunction wrap_string(text::AbstractString; text_width::Int = 10)\n    words = split(text, \" \")\n    lines = []\n    current_line = \"\"\n\n    for word in words\n        if length(current_line) + length(word) > text_width\n            push!(lines, current_line)\n            current_line = word\n        else\n            current_line *= \" \" * (text_width - length(current_line) - length(word) + 1) * word\n        end\n    end\n\n    push!(lines, current_line)\n    join(lines, \"\\n\")\nend\n\n# Example\nprintln(wrap_string(\"This function will wrap words into lines\"))\n```\n\nThis function `wrap_string` takes a string `text` and an optional `text_width` argument. It splits the input string into words using the `split` function, then initializes an empty array `lines` to store the lines and an empty string `current_line` to store the current line.\n\nThe function iterates through each word in the `words` array, checks the length of the current line, and if the length of the current line plus the length of the next word exceeds the `text_width`, it adds the current line to the `lines` array and starts a new line with the next word.\n\nIf the length of the current line and the next word doesn't exceed the `text_width`, it adds the space between the words and continues the current line.\n\nFinally, the function pushes the last line to the `lines` array and returns the joined lines with a newline character `\\n` as a separator.","status":200,"tokens":[184,387],"elapsed":3.412051625,"_type":"aimessage"}]