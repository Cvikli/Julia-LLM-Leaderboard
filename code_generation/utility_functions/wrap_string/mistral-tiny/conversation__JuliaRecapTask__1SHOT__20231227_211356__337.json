[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Based on the problem statement and the given special instructions, here is the solution using Julia:\n\n```julia\nfunction wrap_string(text::AbstractString; text_width::Int = 10)\n    words = split(text, r\"(\\s+|[.!?])\")\n    lines = String[]\n    current_line = \"\"\n\n    for word in words\n        line_length = length(current_line)\n        new_line = false\n\n        if line_length + length(word) > text_width\n            push!(lines, current_line)\n            current_line = \"\"\n            new_line = true\n        end\n\n        if new_line\n            push!(lines, \"\")\n        end\n\n        current_line *= word * \" \"\n    end\n\n    push!(lines, current_line)\n\n    join(lines, \"\\n\")\nend\n\n# Example\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis ut fermentum sapien. Etiam quis leo nec magna pellentesque sagittis. In hac habitasse platea data. Nullam id felis et ipsum bibendum ultrices. Nam euismod ligula eget dolor. Aliquam consectetur ipsum sit amet est pharetra imperdiet. Nullam id ligula id nisi tincidunt dapibus. Praesent orci lorem, dapibus nec, imperdiet id, tincidunt nec, turpis. Sed auctor, lectus eget bibendum rhoncus, sem quam semper libero, eget aliquam odio nibh eget nulla. Nullam id felis et ipsum bibendum ultrices. Nullam tempor, enim eu congue venenatis, augue urna euismod nisi, vitae scelerisque sem nibh id mauris.\"\nprintln(wrap_string(text))\n```\n\nThis function `wrap_string` takes a string as an argument with a default text width of 10 characters. It splits the string into words and iterates through them while keeping track of the current line. If a new line is needed due to exceeding the text width, a new line is added to the output and the current line is reset. The function returns a single string with all the lines concatenated with a newline character in between.","status":200,"tokens":[367,564],"elapsed":5.212309334,"_type":"aimessage"}]