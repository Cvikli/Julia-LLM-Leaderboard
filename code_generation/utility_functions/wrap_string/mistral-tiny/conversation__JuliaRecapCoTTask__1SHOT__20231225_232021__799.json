[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Based on the problem description and the given special instruction, here is a solution for the `wrap_string` function in Julia:\n\n```julia\nfunction wrap_string(text::AbstractString, text_width::Int)\n    words = split(text, \" \")\n    lines = String[]\n    current_line = \"\"\n\n    for word in words\n        if length(current_line) + length(word) + 1 > text_width\n            push!(lines, current_line)\n            current_line = word\n        else\n            current_line *= \" $(word) \"\n        end\n    end\n\n    push!(lines, current_line)\n    join(lines, \"\\n\")\nend\n\n# Example usage:\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. In euismod, tortor eget bibendum rhoncus, sem quam semper risus, a feugiat quam sem quis sapien. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\"\ntext_width = 10\nprintln(wrap_string(text, text_width))\n```\n\nThis function splits the input text into words and then iterates through them. If the current line length plus the length of the word and a space exceeds the `text_width`, a new line is added and the current line is set to the word. Once all words have been processed, the final line is pushed to the lines array. The lines array is then joined with a newline character to form the final output.","status":200,"tokens":[369,372],"elapsed":3.267304417,"_type":"aimessage"}]