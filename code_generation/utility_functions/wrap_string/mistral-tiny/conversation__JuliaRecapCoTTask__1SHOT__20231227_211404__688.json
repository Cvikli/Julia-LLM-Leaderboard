[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Based on the task description and the special instruction provided, here's a solution for the `wrap_string` function in Julia:\n\n```julia\nfunction wrap_string(text::AbstractString, text_width::Int = 10)\n    words = split(text)\n    lines = []\n    line = []\n\n    for word in words\n        if length(line) + length(word) + 1 > text_width\n            push!(lines, join(line, \" \"))\n            line = []\n        end\n        push!(line, word)\n    end\n\n    push!(lines, join(line, \" \"))\n\n    join(lines, \"\\n\")\nend\n\n# Example:\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis eget lectus et odio tincidunt tristique. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Aliquam ac nulla nec ante venenatis commodo. Nullam quis ante. Etiam sit amet orci eget ipsum lacinia commodo\"\nprintln(wrap_string(text, 20))\n```\n\nThis function `wrap_string` accepts a string `text` and an optional argument `text_width` which defaults to 10. It splits the input text into words using the `split` function. Then, it initializes an empty list `lines` to store each line of the wrapped text and an empty list `line` to store the current line being built.\n\nThe function then iterates through each word in the `words` list. If the length of the current line (including the space between words and the new word) would exceed the `text_width`, it pushes the current line to the `lines` list and initializes a new empty line. Once all words have been processed, the final line (if any) is also pushed to the `lines` list.\n\nFinally, the function joins all the lines together with a newline character and returns the wrapped string.","status":200,"tokens":[369,481],"elapsed":4.431457416,"_type":"aimessage"}]