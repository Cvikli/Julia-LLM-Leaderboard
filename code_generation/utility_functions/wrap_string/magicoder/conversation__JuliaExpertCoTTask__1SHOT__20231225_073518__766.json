[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"Here is a simple Julia solution:\n\n```julia\nfunction wrap_string(s::String; text_width::Int=10)\n    words = split(s, ' ')\n    res = \"\"\n    line = \"\"\n    for word in words\n        if length(line * \" \" * word) > text_width\n            res *= \"\\n\" * line\n            line = word\n        else\n            line *= \" \" * word\n        end\n    end\n    return res * \"\\n\" * line  # add last line after the loop\nend\n```\nIn this solution, we split the input string into words using `split` function. Then for each word in the list, we check if adding it to the current line will exceed the maximum width allowed. If so, we add a newline character followed by the current line to our result and start a new line with the current word. Otherwise, we just append the current word to the current line. At the end of the loop, we need to handle the last line that was not yet added to the result, hence the `res *= \"\\n\" * line` statement at the end.\n\nTo test this function you can use:\n```julia\nprint(wrap_string(\"This function will wrap words into lines\", text_width=20))\n```","status":200,"tokens":[185,289],"elapsed":16.002723583,"_type":"aimessage"}]