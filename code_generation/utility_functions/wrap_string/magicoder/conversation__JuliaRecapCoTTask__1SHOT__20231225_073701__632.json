[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's an example of how to define such a function in Julia. Note that this function doesn't add new lines at the end if the last line fits within `text_width`. \n\n```julia\nfunction wrap_string(text::AbstractString, text_width::Int=10)\n    words = split(text, \" \")\n    result = \"\"\n    current_line_length = 0\n    \n    for word in words\n        if current_line_length + length(word) > text_width && !isempty(result)\n            result *= \"\\n\" # new line\n            current_line_length = 0\n        end\n        \n        result *= \"$word \"\n        current_line_length += length(word) + 1 # add one space after the word\n    end\n    \n    return strip(result) # remove trailing whitespace\nend\n```\n\nYou can call this function with an example:\n\n```julia\ntext = \"This is a very long string that will be wrapped to fit within the given width.\"\nprintln(wrap_string(text, 20))\n```\n\nThe output should look like this:\n\n```julia\n\"This is a very long \nstring that will be \nwrapped to fit \nwithin the given \nwidth.\"\n```","status":200,"tokens":[368,299],"elapsed":10.88739075,"_type":"aimessage"}]