[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's how you can solve this task in Julia.\n\n```julia\nfunction wrap_string(text::AbstractString, text_width::Int=10)\n    words = split(text, \" \")\n    wrapped_text = \"\"\n    line = \"\"\n\n    for word in words\n        if length(line * \" \"$word) <= text_width\n            push!(line, \" $word\")\n        else\n            push!(wrapped_text, line*\"\\n\")\n            line = \" $word\"\n        end\n    end\n    \n    return wrapped_text * line\nend\n```\nThe function `wrap_string` takes a string and an optional integer specifying the width of each line. It splits the input string into words and then loops through these words. For every word, it checks if adding this word to the current line would exceed the specified text width. If not, it adds the word to the current line (after a space); otherwise, it adds the current line to the final result and starts a new line with the current word. Finally, after finishing all words, it adds the last line to the final result if it is not empty.\n\nHere's an example of how you can use this function:\n\n```julia\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc quam lacus, pulvinar nec luctus at, venenatis a mi. Duis tempor risus ac orci commodo rhoncus. Sed ultrices justo id metus elementum, in interdum purus tempus.\"\n\nprintln(wrap_string(text))\n```","status":200,"tokens":[365,368],"elapsed":12.974939709,"_type":"aimessage"}]