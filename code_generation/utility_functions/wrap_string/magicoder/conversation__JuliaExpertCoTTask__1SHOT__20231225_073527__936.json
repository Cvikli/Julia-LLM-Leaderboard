[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(s::String, text_width=10)\n    words = split(s) # Split the string into words\n    lines = String[] # Initialize an empty array for lines of text\n\n    line_length = 0 # Current length of a line of text\n\n    for word in words\n        if line_length + length(word) > text_width\n            push!(lines, s) # Push the current line into the result array\n            s = \"\" # Reset the current line of text\n            line_length = 0 # Reset the current line's length\n        end\n\n        if !isempty(s) # If the string is not empty\n            s *= \" \" # Add a space between words on the same line\n        end\n\n        s *= word # Append the next word to the current line of text\n        line_length += length(word) # Update the current line's length\n    end\n\n    push!(lines, s) # Push the final line into the result array\n\n    return join(lines, \"\\n\") # Join all lines with newline characters and return the result string\nend\n\nprintln(wrap_string(\"This function will wrap words into lines\", 15))\n```","status":200,"tokens":[185,283],"elapsed":9.475002625,"_type":"aimessage"}]