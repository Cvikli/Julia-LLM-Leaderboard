[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction wrap_string(s::String; text_width::Int=10)\n    words = split(s, ' ')\n    result = \"\"\n    for word in words\n        if length(result) + length(word) > text_width  # check if the string would exceed the width\n            result *= \"\\n\"                             # add a new line\n        elseif !isempty(result)                         # don't start with a newline\n            result *= \" \"                              # add a space if it's not the first word\n        end\n        result *= word                                  # append the current word to the result string\n    end\n    return result\nend\n```\nThe function `wrap_string` takes a string and an optional `text_width` parameter. By default, the text width is set to 10. It splits the input string into words using the split method with ' ' as delimiter. Then it iterates over these words. For each word, it checks if adding this word to the result would exceed the maximum allowed width (length(result) + length(word)). If so, a newline character is appended to the result string. If not, a space is added to the result before the word is appended. The result string accumulates all words in the correct order and with new lines at appropriate positions. \n\nThis function can be tested as follows:\n```julia\n@assert wrap_string(\"Hello World!\", text_width=15) == \"Hello\\nWorld!\"\n@assert wrap_string(\"This is a test.\", text_width=6) == \"This \\nis \\na test.\"\n```","status":200,"tokens":[368,368],"elapsed":13.222560709,"_type":"aimessage"}]