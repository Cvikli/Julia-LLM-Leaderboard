[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Recall Julia snippets that will be useful for this Task:\n\n- Using string methods like `split`, `isempty`, `length`, `pushfirst!`\n- Using comprehensions for generating new arrays\n- Conditional statements `if-else`\n- Using string interpolation\n\nSolve the Task:\n\n```julia\nfunction wrap_string(text::AbstractString, text_width::Int=10)\n    # split the text into words\n    words = split(text, \" \")\n\n    # array to store the wrapped lines\n    wrapped_lines = String[]\n\n    # iterate over the words\n    for word in words\n        # if the current line is empty or adding the word to it doesn't\n        # exceed the text_width\n        if isempty(word) || isempty(wrapped_lines[end]) ||\n            (length(word) + length(wrapped_lines[end]) + 1 <= text_width)\n\n            # add the word to the current line\n            wrapped_lines[end] = string(wrapped_lines[end], \" \", word)\n        else\n            # create a new line and add the word to it\n            pushfirst!(wrapped_lines, word)\n        end\n    end\n\n    # return the wrapped lines as a single string\n    return join(wrapped_lines, \"\\n\")\nend\n```\n\nDouble-check that the solution is correct:\n\n```julia\njulia> s = \"In olden times when","status":200,"tokens":[369,345],"elapsed":4.761846625,"_type":"aimessage"}]