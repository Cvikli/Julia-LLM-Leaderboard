[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Recall Julia snippets that will be useful for this Task:\n\n- Using `split()` function to split a string into an array of words.\n- Using string interpolation to build the output string.\n- Using `join()` function to join an array of strings into a single string with a specified delimiter.\n- Using `length()` function to get the length of a string.\n\nSolve the Task:\n\nFirst, let's create a function `wrap_string` that accepts two arguments: `text` and `text_width`. We will initialize an empty string `wrapped_text` to store the wrapped text. Then, we will split the input `text` into words using `split()` function. After that, we will iterate over the words and check if adding the current word and a space to `wrapped_text` exceeds the specified `text_width`. If it does, we will add a newline character to `wrapped_text` before adding the current word and a space. Finally, we will return the `wrapped_text`.\n```julia\nfunction wrap_string(text, text_width=10)\n    wrapped_text = \"\"\n    words = split(text)\n\n    for word in words\n        if length(wrapped_text) + length(word) + 1 > text_width\n            wrapped_text *= \"\\n\"\n        end\n        wrapped_text *= word * \" \"\n    end\n\n    return wrapped_text\nend\n```\nDouble-check that the solution is correct:\n\nWe can test the function with the provided example as follows:\n```julia\njulia> text = \"In olden times when","status":200,"tokens":[369,378],"elapsed":5.086949375,"_type":"aimessage"}]