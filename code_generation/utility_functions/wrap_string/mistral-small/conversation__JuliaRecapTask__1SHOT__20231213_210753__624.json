[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"*Recall Julia snippets that will be useful for this Task:*\n\n- String manipulation: `string`, `isempty`, `length`, `push!`, `pop!`, `join`, `split`, `strip`\n- Array manipulation: `map`, `reduce`, `append!`, `iterate`, `push!`, `pop!`, `size`, `endof`\n- Control flow: `for`, `while`, `if`, `continue`, `break`\n- Type annotations: `AbstractString`, `Int`\n\n*Solve the task*\n\nFirst, let's create a function that wraps a single line of text.\n\n```julia\nfunction wrap_line(line::AbstractString, text_width::Int=10)\n    words = split(line, \" \")\n    result = String[]\n    current_line = String()\n\n    for word in words\n        if (length(current_line) + length(word)) > text_width\n            push!(result, current_line)\n            current_line = string(word, \" \")\n        else\n            current_line *= string(word, \" \")\n        end\n    }\n\n    if !isempty(current_line)\n        push!(result, current_line)\n    end\n\n    return join(result, \"\\n\")\nend\n```\n\nNow, to wrap a whole paragraph, we can simply split it into lines and apply our `wrap_line` function to each line.\n\n```julia\nfunction wrap_paragraph(paragraph::AbstractString, text_width::Int=10)\n    lines = split(strip(paragraph), \"\\n\")\n    wrapped_lines = map(line -> wrap_line(line, text_width), lines)\n    return join(wrapped_lines, \"\\n\")\nend\n```\n\n*Double-check that the solution is correct*\n\n```julia\njulia> text = \"In olden times when","status":200,"tokens":[367,447],"elapsed":6.2709095,"_type":"aimessage"}]