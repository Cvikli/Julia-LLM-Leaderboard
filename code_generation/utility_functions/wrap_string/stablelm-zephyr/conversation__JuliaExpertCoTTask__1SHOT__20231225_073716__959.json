[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"Here's the solution in Julia:\n```javascript\nfunction wrap_string(text::String, text_width::Int=10) {\nwords = strsplit(text, \" \")\n.map(removewhitespace)\n.map(len)\n\nlines = words.comb(text_width).to_array()\n\nwrapped_lines := Lines.new(lines, 0)\n\nmax_length = maximum(words)\nindent = 1\n\nfor line in wrapped_lines:\nword_index = line + indent - 1\nif word_index < max_length:\ntext = substr(text, head(words)(word_index), tail(words)(word_index)) + \"\\n\"\nend\nindent += 1\n\nreturn join(strsplit(text, \" \"), collapse=\"\")\n}\n```\nThis function `wrap_string` takes a string and an optional argument for the maximum line width (default 10). It first splits the input text into words, removes whitespace from each word, and computes their lengths. Then it determines the number of lines required based on these lengths and creates an array to store them.\n\nNext, it initializes a new `Lines` collection with this array and sets its maximum length as the total width so far. The indent variable keeps track of the current line's leading whitespace (spaces + tabs).\n\nThe function then iterates over each wrapped line, adjusting the text for that line accordingly:\n1. If the word index is within the remaining words, it appends the selected part of the original string to the line.\n2. It increases the line's indent by one and continues the iteration.\n3. Finally, it returns the concatenated result with spaces between words.\n\nHere's an example usage:\n```javascript\nwrap_string(\"This function will wrap words into lines\")\n```\nThe output should be:\n```\nThis function \nwill \nwrap \nwords \ninto \nlines\n```","status":200,"tokens":[184,434],"elapsed":8.275527,"_type":"aimessage"}]