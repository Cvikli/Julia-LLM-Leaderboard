[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Task: Write a function `wrap_string` that takes in an input string and returns a wrapped string. If the length of the current word exceeds the maximum width `text_width`, add a new line. \n\nSpecial Instructions:\n\n* The function should return a String instead of a tuple or namedtuple as requested by the user. \n* Provide an example input and output.\n\nExample:\n```julia\nfunction wrap_string(input::String, text_width::Int=10)\n    wrapped = \"\"\n    current_line = \"\"\n    for word in split(input, \" \")\n        if length(current_line) + length(word) <= text_width\n            current_line *= \" \"\n            current_line += word\n        else\n            wrapped *= \"\\n\"\n            wrapped += current_line\n            current_line = word\n        end\n    end\n    wrapped *= \"\\n\"\n    wrapped *= current_line # add final line if any leftover words\n    return wrapped\nend\n```\nExample usage:\n```julia\nusing Test\n\n@testset \"wrap_string\" begin\n    input = \"This is a long sentence that needs to be wrapped. The maximum text width is 10.\"\n    expected_output = \"This is a long\\nsentence that needs\\nto be wrapped.\\nThe maximum text width\\nis 10.\"\n    @test eq(wrap_string(input), expected_output)\nend\n```","status":200,"tokens":[369,338],"elapsed":15.338609958,"_type":"aimessage"}]