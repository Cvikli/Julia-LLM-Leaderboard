[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"# Solution:\n\n```julia\nfunction wrap_string(text::String, text_width::Int=10)\n    lines = split(text, \"\\s\")\n    current_line = \"\"\n    for line in lines\n        if length(current_line) + length(line) > text_width\n            current_line *= \"\\n\"\n        end\n        current_line *= line\n    end\n    return current_line\nend\n\n# Example:\ntext = \"This is an example of a very long string that exceeds the maximum text width of 10.\"\nwrapped_text = wrap_string(text)\nprintln(wrapped_text)\n```\n\nThe solution defines a function `wrap_string` that takes in two arguments: `text`, a string, and `text_width`, an optional integer. The default value of `text_width` is 10 if not provided.\n\nThe function first splits the input text into words using the `split` function with the regular expression \"\\s\" (a space). It then iterates over each line in the resulting array, and if the length of the current line plus the length of the current word would exceed the specified text width, it adds a newline character to the current line.\n\nFinally, the function returns the concatenated result of all lines with the specified text width constraint.","status":200,"tokens":[369,303],"elapsed":13.97831625,"_type":"aimessage"}]