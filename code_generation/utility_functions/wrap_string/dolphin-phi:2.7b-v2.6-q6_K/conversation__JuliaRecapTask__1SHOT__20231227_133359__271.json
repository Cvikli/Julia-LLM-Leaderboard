[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"# Solution\n```julia\nusing TextWrap\n\nfunction wrap_string(words::AbstractVector{String}, text_width:Int)::AbstractVector{String}\nresult = Vector{String}()\n\nfor word in words\nif (TextWrap.get_width(word) > text_width)\npush!(result, \"\\n\")\nend\npush!(result, word)\nend\n\nreturn result\nend\n```\nThis function takes a collection of strings and a `text_width`, and returns a new vector where each string is on its own line if the total width (including line breaks) exceeds the `text_width`. The function uses Julia's TextWrap library to get the current width when it encounters a newline.\n\nHere is an example:\n```julia\nwords = (\"This\", \"is\", \"a\", \"test\", \"of\", \"the\", \"TextWrap\", \"function\")\ntext_width = 10\nprint(wrap_string(words, text_width)) # returns [\"This\", \"is\", \"a\\ntest\", \"of\", \"the\", \"TextWrap\", \"function\"]\n```","status":200,"tokens":[349,262],"elapsed":8.036220917,"_type":"aimessage"}]