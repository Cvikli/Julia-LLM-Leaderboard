[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Data\n\nwrap_string(\"This function will wrap words into lines\")","variables":["task","data"],"_type":"usermessage"},{"content":"# Approach\n1. Split the input string into words\n2. Initialize a variable `current_line` to store the current line\n3. Iterate over each word in the list of words\n4. If adding the current word increases the total character count by more than `text_width`, append the current line and start a new line with the current word\n5. Add the current word to the current line, updating its length after each addition\n6. After finishing all words, append the last line to ensure it's not left out\n7. Return the final wrapped string\n\n# Solution\n```julia\nfunction wrap_string(input::AbstractString) where TextWidth::Int\nwords = split(input)\nlines = [\"\"]\n\nfor word in words\nif lines[end].length + length(word) > TextWidth\npush!(lines, word)\nelse\nlines[end] = linejoin([lines[end], word])\nlines[end] = \" \" * (TextWidth - lines[end].length) + lines[end]\nend\nend\n\nreturn join(lines)\nend\n```\n\n# Example\nwrap_string(\"This function will wrap words into lines\") ➝ \"This function\\nwill wrap words\\ninto lines\"","status":200,"tokens":[179,285],"elapsed":11.075930208,"_type":"aimessage"}]