[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Based on the problem statement and special instructions provided, here's a solution for the `wrap_string` function in Julia:\n\n```julia\nfunction wrap_string(text::AbstractString; text_width::Int = 10)\n    words = split(text, \" \")\n    current_line = String[]\n    lines = String[]\n    line_length = 0\n\n    for word in words\n        if line_length + length(word) + 1 > text_width\n            push!(lines, join(current_line, \" \"))\n            current_line = [word]\n            line_length = length(word)\n        else\n            pushfirst!(current_line, word)\n            line_length += length(word) + 1\n        end\n    end\n\n    # Add the last line to the result\n    push!(lines, join(current_line, \" \"))\n\n    return lines\nend\n\n# Example usage:\nfunction test_wrap_string()\n    text = \"This is a very long string that needs to be wrapped with a maximum width of 10 characters per line\"\n    expected_output = [\"This is\", \"a very long\", \"string that needs\", \"to be wrapped\", \"\", \"with a maximum\", \"width of 10\", \"characters per line\"]\n\n    result = wrap_string(text)\n    @assert result == expected_output\nend\n```\n\nThis function `wrap_string` accepts an abstract string as its first argument, and the optional second argument is `text_width`. It splits the input text into words using `split`, processes them one by one to check if the current line length would exceed `text_width`, and adds a newline (by pushing a newly created empty line array `lines` into `lines`) when needed. The last line containing remaining words is also added to the result. The function returns a `lines` vector, which contains all wrapped lines.\n\nThe example usage demonstrates the expected behavior of the function by comparing its output with a manually crafted expected output for testing purposes.","status":200,"tokens":[368,462],"elapsed":20.529363417,"_type":"aimessage"}]