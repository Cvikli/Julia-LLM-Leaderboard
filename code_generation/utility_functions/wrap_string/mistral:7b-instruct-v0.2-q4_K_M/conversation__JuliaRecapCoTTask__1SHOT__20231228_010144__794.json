[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Based on the problem statement and special instructions provided, here's how you can write the `wrap_string` function in Julia:\n\n```julia\nfunction wrap_string(text::AbstractString; text_width::Int = 10)\n    words = split(text, \" \")\n    lines = String[]\n    current_line = \"\"\n    for word in words\n        if length(current_line) + length(word) > text_width\n            push!(lines, current_line)\n            current_line = String()\n        end\n        current_line *= word * \" \"\n    end\n    push!(lines, current_line)\n    join(lines, \"\\n\")\nend\n\n# Example usage:\nusing Printf\nprintln(\"Before wrapping:\\n$(@sprintf \"%-20s\" \"This is a very long string that needs to be wrapped.\"))\nprintln(\"\\nAfter wrapping:\\n$(wrap_string(\"This is a very long string that needs to be wrapped.\", text_width = 15)))\")\n```\n\nThe `wrap_string` function takes an abstract string as its first argument, and an optional `text_width` argument with a default value of 10. It splits the input string into words using the `split` function, then iterates through each word to check if adding it to the current line would exceed the maximum text width. If so, it pushes the current line to a list of lines and initializes a new empty line. The function continues this process until all words have been processed. Finally, it pushes the last line to the list and returns a string joined by newline characters.\n\nThe example usage demonstrates the `wrap_string` function being used on a very long string, with a custom text width of 15. It uses the `Printf` library for formatting the input string and the resulting wrapped string for better visualization.","status":200,"tokens":[368,419],"elapsed":18.7775365,"_type":"aimessage"}]