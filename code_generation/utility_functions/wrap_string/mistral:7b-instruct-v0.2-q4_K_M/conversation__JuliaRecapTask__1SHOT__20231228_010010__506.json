[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `wrap_string`. It iterates over words and it will add a new line each time a maximum `text_width::Int=10` would be exceeded. Provide an example\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Based on the problem statement and given special instructions, here's a solution in Julia:\n\n```julia\nfunction wrap_string(text::AbstractString; text_width::Int=10)\n    words = split(text, \" \")\n    lines = String[]\n    current_line = \"\"\n\n    for word in words\n        if length(current_line) + length(word) > text_width\n            push!(lines, current_line)\n            current_line = word * \" \"\n        else\n            current_line *= word * \" \"\n        end\n    end\n\n    # Add the last line\n    push!(lines, current_line)\n\n    join(lines, \"\\n\")\nend\n\n# Example usage:\nfunction main()\n    text = \"The quick brown fox jumps over the lazy dog. The sun sets slowly behind the trees.\"\n    wrapped_text = wrap_string(text)\n    println(wrapped_text)\nend\n\nmain()\n```\n\nIn this solution, we define a function `wrap_string` that takes an abstract string and optional text width as arguments. We split the input string into words using the `split` function, then iterate over them while adding them to the current line if it doesn't exceed the text width, otherwise creating a new line and continuing with the next word. Finally, we add the last incomplete line to the result. The example usage demonstrates how this function can be used to wrap long strings into lines of a specified width.","status":200,"tokens":[366,338],"elapsed":15.468087583,"_type":"aimessage"}]