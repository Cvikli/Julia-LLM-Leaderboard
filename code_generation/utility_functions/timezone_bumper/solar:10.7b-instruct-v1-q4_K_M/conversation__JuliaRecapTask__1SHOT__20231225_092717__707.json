[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `timezone_bumper(dt,bump)` that increases any provided timestamp by `bump::Int` hours (defaults to +3 hours). Make sure it works only for DateTime types and throws an error for Date types.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction timezone_bumper(dt::DateTime, bump::Integer = 3)\n    if dt.hour > 12 && (bump > 0 && dt.hour + bump >= 13) || (bump < 0 && dt.hour + bump <= 0)\n        # Handling day-changing time bumps\n        if bump > 0\n            # Adding hours, potentially crossing to the next day\n            new_day = DateTime(dt.year, dt.month, dt.day + 1, 0, 0, 0)\n            return DateTime(new_day.value + (bump - dt.hour) * 3600)\n        else\n            # Subtracting hours, potentially crossing to the previous day\n            new_day = DateTime(dt.year, dt.month, dt.day - 1, 24, 0, 0)\n            return DateTime(new_day.value + (abs(bump) + dt.hour - 24) * 3600)\n        end\n    elseif bump == 0\n        # No change in time\n        return dt\n    else\n        if isa(dt, Date)\n            error(\"Invalid input: Only DateTime types are supported.\")\n        else\n            # Simple time adjustment without crossing days\n            return DateTime(dt.value + (bump - dt.hour) * 3600)\n        end\n    end\nend\n```","status":200,"tokens":[384,336],"elapsed":22.646236,"_type":"aimessage"}]