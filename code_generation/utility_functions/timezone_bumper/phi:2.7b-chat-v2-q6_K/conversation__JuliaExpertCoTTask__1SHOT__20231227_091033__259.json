[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `timezone_bumper(dt,bump)` that increases any provided timestamp by `bump::Int` hours (defaults to +3 hours). Make sure it works only for DateTime types and throws an error for Date types.\n\n\n\n# Data\n\ntimezone_bumper(DateTime(2023, 4, 10, 12, 0),3)","variables":["task","data"],"_type":"usermessage"},{"content":"# Code\n```scala\nobject DateTime {\n\ndef main(args: Array[String]): Unit = {\nval dt = DateTime(2023, 4, 10, 12, 0)\nprintln(\"Before bump: ${dt}\")\nval bumped_timestamp = timezone_bumper(dt, 3)\nprintln(\"After bump: ${bumped_timestamp}\")\n}\n\ndef timezone_bumper(dt: DateTime, bump: Int): DateTime = {\nif (isDateType(dt)) throw new Error(\"Invalid date provided.\")\nval timestamp = dt.toTimestamp //convert to UTC timestamp for easy calculation of timezone offset\ntimestamp + bump * 3600L //add hours as minutes * 60\n}\n\ndef isDateType(dt: Any): Boolean = {\n//Check if the provided date type can be parsed into DateTime\nif (try! Date.parseDatum(dt)) false else true\n}\n}\n```","status":200,"tokens":[197,233],"elapsed":10.051327458,"_type":"aimessage"}]