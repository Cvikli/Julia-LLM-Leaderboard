[{"content":"Act as a helpful AI assistant","variables":[],"_type":"systemmessage"},{"content":"Given a struct `FloatWithUnits` with fields `value` and `unit` (make sure to define it!), write a `show` method for it that will concatenate the value and unit with a space like this \"1.8 meters\".","variables":[],"_type":"usermessage"},{"content":"> **Difficulty**: Basic  \n> **Time**: 5 min\n> **Attempts**: Do not spend more than 10 minutes on this problem. For help, see the :::tip\n[Rust Book](https://doc.rust-lang.org/book/)\n:::\n\n## Discussion\n\nWhen working with custom types it is important to define a `show` method for your type in order to print it's values to the screen. This will be necessary later when we try and print out an instance of our FloatWithUnits struct. The simplest implementation for this would look like:\n\n```rust,edition2018\nimpl std::fmt::Display for FloatWithUnits {\n    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::result::Result<(), std::fmt::Error> {\n        write!(f, \"{}\", self.value)?;\n        Ok(())\n    }\n}\n```\n\nHowever this does not account for the units! To fix this we need to add a second `write` that writes out the unit:\n\n```rust,edition2018\nimpl std::fmt::Display for FloatWithUnits {\n    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::result::Result<(), std::fmt::Error> {\n        write!(f, \"{}\", self.value)?;\n        write!(f, \" {}\", self.unit);\n        Ok(())\n    }\n}\n```","status":200,"tokens":[54,345],"elapsed":18.578656,"_type":"aimessage"}]