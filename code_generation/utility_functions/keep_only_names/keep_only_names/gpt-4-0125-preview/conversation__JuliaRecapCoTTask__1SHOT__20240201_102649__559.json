[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `keep_only_names` which iterates over the provided list of words (`words`) and removes all words that do not start with a capital letter (eg, remove \"dog\" but keep \"Dog\").\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's a Julia function that achieves the desired functionality. This function iterates over the provided list of `words`, checks if each word starts with a capital letter, and keeps only those words that meet this criterion.\n\n```julia\nfunction keep_only_names(words::Vector{AbstractString})\n    filter(word -> isuppercase(first(word)), words)\nend\n```\n\nLet's break down the important parts of this solution:\n- `words::Vector{AbstractString}`: This type annotation specifies that the function expects a vector of strings, with the string type being abstract to allow for flexibility.\n- `filter`: This standard library function allows us to keep only those elements in the `words` vector that satisfy a particular condition.\n- `word -> isuppercase(first(word))`: This is an anonymous function that checks if the first character of a word is uppercase. `first(word)` gets the first character of the word, and `isuppercase` checks if this character is uppercase.\n\nThis design follows Julia's idiomatic practices, aiming for both performance and clarity.","status":200,"tokens":[323,212],"elapsed":22.104319292,"_type":"aimessage"}]