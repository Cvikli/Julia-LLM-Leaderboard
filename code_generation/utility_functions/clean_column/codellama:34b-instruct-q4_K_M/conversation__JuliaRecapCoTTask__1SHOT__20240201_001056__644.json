[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nWrite a function `clean_column` that cleans a column name (`col`) by lowercasing it, stripping any leading or trailing whitespaces, and replacing any spaces and hyphens with an underscore, eg, \"My Column\" becomes \"my_column\".\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"# Julia Language Programming: Cleaning a Column Name\n\n## Problem Solving Steps\n\n1. Recall Julia snippets that will be useful for this Task, such as the `lowercase` function and the `replace` function with regular expressions.\n2. Solve the Task by defining the `clean_column` function using a combination of these snippets.\n3. Double-check that the solution is correct by testing it with different inputs.\n\n## Preferred Julia Language Guidelines\n\n1. Prefer Julia standard libraries, avoid new packages unless explicitly requested.\n2. Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, and abstract types unless specific for multiple dispatch on different types.\n3. Reserved names: `begin`, `end`, `function`. Distinguished from Python with 1-based indexing, multiple dispatch.\n4. Use string interpolation with `$` to build strings from variables.\n5. Prefer using functions over macros unless the problem is better solved with a macro.\n6. Avoid using global variables and instead use local variables that are passed as arguments to functions.\n7. Use meaningful variable names and avoid using abbreviations or single-letter variable names, except for loop indices.\n8. Use comments to explain the code and make it more readable.\n9. Test the code with different inputs to ensure its correctness and robustness.\n10. Refactor the code to make it more concise and efficient, if possible.\n\n## Special Instructions\n\n{{instructions}}","status":200,"tokens":[0,348],"elapsed":9.781361869,"_type":"aimessage"}]