[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"1. Define a function `extract_julia_code` that takes in a markdown document `md`.\n2. Initialize an empty string variable to store the extracted code blocks.\n3. Split the input document into lines using the `.split(\"\\n\")` method.\n4. Iterate through each line and check if it starts with three backticks ``` (using `line[0:2] == \"```\"`). If it does, toggle a boolean flag to indicate that you are now inside a code block.\n5. While in a code block, append the contents of the line to your extracted code string using `+=` operator, excluding the starting and ending backticks ``` (using `[3:-3]` slice).\n6. Join all lines with a newline separator (`\"\\n\"`) if there are multiple code blocks.\n7. Return the extracted code as a single String.\n8. If you encounter an empty line or a non-code block, skip it and continue iterating through the lines.\n9. If you want to separate each code block with a newline separator, use `+ \"\\n\"` instead of just `+=`.\n10. Finally, test your function by running it on a sample document.","status":200,"tokens":[0,264],"elapsed":10.917683649,"_type":"aimessage"}]