[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Special Instructions:\n1. The function should be named `extract_julia_code` and take a single argument `md`.\n2. The input is a Markdown formatted document as a String, with Julia code blocks enclosed in triple backticks (```)\n3. The output should be a String that contains the joined Julia code blocks without any code fence characters.\n4. If there are multiple code blocks, separate them with a newline character (`\\n`). \n5. The function should handle nested Markdown formatting like bold or italic text and ignore it. \n6. There is no need to include error handling for invalid or unexpected input.\n7. The output should be in the same format as the original Markdown document, preserving line breaks and indentation of the code blocks. \n8. Performance is not a concern; prioritize readability and correctness over efficiency.","status":200,"tokens":[402,195],"elapsed":7.8667765,"_type":"aimessage"}]