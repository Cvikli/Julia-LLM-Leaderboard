[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nfunction extract_julia_code(md::AbstractString)\n    # Regular expression for code blocks:\n    #   - Start with three or more `#` (not including spaces).\n    #   - Followed by a space, then any number of non-newline characters.\n    #   - Ends with three or more `#` on a line by itself.\n    #   - Optionally preceded by a newline.\n    # Example match:\n    #   ```\n    #   # This is a code block\n    #   # This continues the block\n    #   # This does not end it\n    #   # This ends the block\n    #   ```\n    code_block_re = Regex(r\"^(?:\\n)?(?:#{3,}\\s+(.*?)\\n)(?:#{3,}\\n)\", \"m\")\n\n    # Initialize output string and current code block content\n    output = String()\n    current_code = \"\"\n\n    # Loop through each line in the markdown document\n    for line in split(md, '\\n')\n        # If the line matches the code block regex, add it to the current code block\n        if occursin(code_block_re, line)\n            m = match(code_block_re, line)\n            content = m.captures[1]\n            current_code *= strip(content) * '\\n'\n        # Otherwise, add it to the output string\n        else\n            output *= line * '\\n'\n        end\n    end\n\n    return output\nend\n```","status":200,"tokens":[401,363],"elapsed":56.541500125,"_type":"aimessage"}]