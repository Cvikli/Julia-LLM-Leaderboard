[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's a solution to the task:\n\n```julia\nfunction extract_julia_code(md::String)\n    # Regular expression for matching julia code blocks.\n    pattern = r\"```julia\\n(.*?)\\n```\"ms\n    \n    # Find all matches of the pattern in the input string.\n    matches = collect(eachmatch(pattern, md))\n\n    # Extract and join the matched code blocks with a newline character.\n    return join([replace(x.captures[1], \"\\n\"=>\"\") for x in matches], '\\n')\nend\n```\nThis function uses a regular expression to match Julia code blocks enclosed by triple backticks (```) followed by \"julia\", then the code, and ending with triple backticks again. The `ms` flags are used for multi-line matching (to allow code blocks to span multiple lines) and dotall mode (to match newline characters).\n\nThe matched code blocks are captured as strings, have their leading/trailing newlines removed using the `replace()` function, and are then joined together with a newline character delimiter. The result is returned as a single string containing all the Julia code found in the input markdown document.","status":200,"tokens":[403,272],"elapsed":42.990561708,"_type":"aimessage"}]