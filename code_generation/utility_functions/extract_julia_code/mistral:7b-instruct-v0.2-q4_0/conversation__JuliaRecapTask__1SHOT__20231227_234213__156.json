[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Based on the problem statement and the special instructions provided, here's a Julia function called `extract_julia_code`:\n\n```julia\nfunction extract_julia_code(md::AbstractString)\n    lines = split(md, \"\\n\")\n    code_blocks = []\n    current_block = nothing\n    \n    for line in lines\n        if startswith(line, r\"^```\")\n            if !isempty(current_block)\n                push!(code_blocks, join(current_block, \"\\n\"))\n            end\n            current_block = String[]\n            pushfirst!(code_blocks, [line])\n        elseif current_block !== nothing\n            pushlast!(current_block, line)\n        end\n    end\n    \n    if !isempty(current_block)\n        push!(code_blocks, join(current_block, \"\\n\"))\n    end\n\n    return join(map(x -> string(join(x, \"\\n\")), code_blocks), \"\\n\")\nend\n```\n\nThis function processes the provided markdown string `md`, separates the lines using a newline character (`\\n`), and extracts each Julia code block by detecting the beginning (code fence) and ending lines. If multiple consecutive code blocks exist, they are joined with newlines before being added to the final result. The extracted Julia code is then returned as a single string.","status":200,"tokens":[393,321],"elapsed":12.033622834,"_type":"aimessage"}]