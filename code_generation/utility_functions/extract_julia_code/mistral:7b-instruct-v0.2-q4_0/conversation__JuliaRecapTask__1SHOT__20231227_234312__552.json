[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\nNone.\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Based on the problem statement and special instructions, here's a Julia function `extract_julia_code` that extracts all the code blocks from a given markdown document as a string:\n\n````julia\nusing DataFrames, StringTricks\n\nfunction extract_julia_code(md::AbstractString)\n    lines = split(md, \"\\n\")\n    code_blocks = Filter(x -> startswith(x, \"```\"), lines)\n    if length(code_blocks) > 0\n        # Remove leading and trailing triple backticks\n        code_blocks = map(x -> StringTrim(StringTrim(x, \"\\n\")[3:end], `r\"\\n+$\"b), code_blocks)\n        # Join multiple consecutive code blocks with a newline\n        code_string = join(code_blocks, \"\\n\\n\")\n        return \"`$(code_string)`\"\n    else\n        return \"\"\n    end\nend\n````\n\nThis function uses the following Julia snippets:\n- `using DataFrames, StringTricks` for convenience\n- `Filter`, `map`, and `split` functions from Base library\n- Regular expression with `StringTrim` and `startswith` functions from StringTricks package.","status":200,"tokens":[393,290],"elapsed":11.03969675,"_type":"aimessage"}]