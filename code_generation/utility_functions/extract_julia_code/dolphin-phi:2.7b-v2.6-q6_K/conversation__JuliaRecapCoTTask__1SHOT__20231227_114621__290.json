[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nusing Base.AbstractString;\nusing Base.Markdown;\n\nfunction extract_julia_code(md::AbstractString) where md:has_julia_code, !md.is_empty()\ndoc = doc_from_markdown(md);\nslices = findall(\"{{\\${JULIA}}\", doc);\nif isempty(slices)\nreturn \"\";\nend\nsliced_docs = [doc[x] for x in slices];\njulia_blocks = [s.get(\"Julia\") for s in sliced_docs];\njoined_blocks = joinlines(join(map(str, julia_blocks))) + \"\\n\";\nreturn joined_blocks;\nend\n```\n\nIn this solution, we first convert the markdown document into a Julia code block using `doc_from_markdown`. We then find all the code blocks starting with \"{{\\${JULIA}}\" and store them in `sliced_docs`. After that, we extract the actual Julia code blocks from these documents and join them together with newlines. Finally, we return the joined Julia code blocks as a single string.","status":200,"tokens":[378,269],"elapsed":8.397001125,"_type":"aimessage"}]