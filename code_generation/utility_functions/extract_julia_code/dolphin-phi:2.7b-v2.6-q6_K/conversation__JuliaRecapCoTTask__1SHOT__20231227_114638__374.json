[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"```julia\nusing julialang::lexer, julialang::parser, julialang::transforms\n\nfunction extract_julia_code(md::AbstractString)\nlocal code_blocks = []\n\nfor block in md.getText()\nif parse.(block, '#{julia!}')\ncontinue\nend\n\npos = indexOf(block, ['#{', '}'])\nwhile pos != -1\nfence = block[pos:pos + 2]\nend_line = block[pos + 1 :]\nif isempty(end_line)\ncontinue\nend\n\nnew_code_block = parse.(end_line, '#{julia!}')\ncode_blocks.append(new_code_block)\nfence_offset = indexOf(fence, end_line) + pos + 2\nend_line = block[1 : fence_offset]\n\npos = indexOf(end_line, '#{', fence_offset - 1)\nend\n\nif isempty(end_line)\ncontinue\nend\n\nnew_code_block = parse.(end_line, '#{julia!}')\ncode_blocks.append(new_code_block)\nend\n\nreturn join(code_blocks, '\\n')\nend\n```","status":200,"tokens":[378,316],"elapsed":9.704748875,"_type":"aimessage"}]