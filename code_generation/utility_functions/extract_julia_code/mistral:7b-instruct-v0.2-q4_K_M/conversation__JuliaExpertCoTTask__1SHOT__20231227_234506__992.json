[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Data\n\nextract_julia_code(\"\"\"```julia\nprintln(\"hello world\")\n```\"\"\")","variables":["task","data"],"_type":"usermessage"},{"content":"Based on the problem statement, here's the solution:\n\n```julia\nfunction extract_julia_code(md::AbstractString)\n    lines = split(md, \"\\n\") # Split the markdown string into individual lines\n    code_blocks = []\n    for line in lines\n        if startswith(line, \"```julia\") && endswith(line, \"```\")\n            pushfirst!(code_blocks, line)\n            next_line = lines[findnext(x -> !startswith(x, \"```\"), lines) - 1] # Find the previous line before the next non-code line\n            push!(code_blocks, next_line) # Add the line above the code block to capture any trailing backslashes\n            break\n        end\n    end\n\n    if isempty(code_blocks)\n        return \"\"\n    end\n\n    code = join(code_blocks[2:end], \"\\n\") # Remove the first and last lines (code fence lines) and join the remaining lines with newlines\n    return code\nend\n```","status":200,"tokens":[222,247],"elapsed":10.798901959,"_type":"aimessage"}]