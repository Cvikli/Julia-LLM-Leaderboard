[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Data\n\nextract_julia_code(\"\"\"```julia\nprintln(\"hello world\")\n```\"\"\")","variables":["task","data"],"_type":"usermessage"},{"content":"function extract_julia_code(md::String)\n# Define regular expression to match code blocks\ncode_regex = r\"```[a-z]+(.*?)\\n\"`\"\n# Extract all matches and join them together with newlines\nextracted_code = join(Match.captured(each, CodeInfo(parse(md)), code_regex)..., \"\\n\")\n# Remove the leading and trailing code fence characters\nclean_code = replace(extracted_code, r\"^```|```$\", \"\")\n# Return the extracted and cleaned code as a String\nreturn clean_code\nend\n\nusing RegexStrings, CodeInfo\nfunction CodeInfo(io::IO)\nCodeInfo{Vector{String}}() do\nCodeInfo{Vector{String}}(code_lines = Vector{String}())\nwhile !eof(io)\nline = readline(io)\npush!(code_lines, line)\nend\nreturn new(code_lines)\nend","status":200,"tokens":[222,220],"elapsed":9.739692084,"_type":"aimessage"}]