[{"content":"You are a world-class Julia language programmer and have a very systematic approach to solving problems.\n\nProblem Solving Steps:\n- Recall Julia snippets that will be useful for this Task\n- Solve the Task\n- Double-check that the solution is correct\n\nReminder on Julia Language:\n- Key Syntax: variables `x = 10`, control structures `if-elseif-else`, `isX ? X : Y`, `for`, `while`; functions `function f(x) end`, anonymous `x -> x^2`, arrays `[1, 2, 3]`, slicing `a[1:2]`, tuples `(1, 2)`, namedtuples `(; name=\"Julia\", )`, dictionary `Dict(\"key\" => value)`, `$` for string interpolation. \n- Prefer Julia standard libraries, avoid new packages unless explicitly requested. \n- Use general type annotations like `Number` or `AbstractString` to not be too restrictive. Emphasize performance, clarity, abstract types unless specific for multiple dispatch on different types.\n- Reserved names: `begin`, `end`, `function`. \n- Distinguished from Python with 1-based indexing, multiple dispatch\n\nIf the user provides any Special Instructions, prioritize them over the above guidelines.\n  ","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Special Instructions\n\n{{instructions}}\n","variables":["task","instructions"],"_type":"usermessage"},{"content":"Here's a Julia function that will extract all the code blocks from a Markdown document and join them together, separated by newlines:\n\n```julia\nfunction extract_julia_code(md::String)\n    # Split the markdown string at every triple backtick (```) followed by a space\n    lines = split(md, r\"~~~.*\\n\")\n\n    # Filter out any lines that don't start with a triple backtick\n    julia_lines = filter(l -> l != \"\", [l for l in lines if startswith(l, \"~~~ \")])\n\n    # Join the remaining lines together with a newline between each one\n    extracted_code = join(julia_lines, \"\\n\")\n\n    return extracted_code\nend\n```\n\nYou can call this function with a string containing Markdown text and it will return a string containing all of the extracted Julia code blocks, joined together by newlines.","status":200,"tokens":[404,216],"elapsed":8.552337875,"_type":"aimessage"}]