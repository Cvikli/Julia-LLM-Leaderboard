[{"content":"You are a world-class Julia language programmer and very systematic in your approach to solving problems. \nYou follow the below approach when writing code. Your communication is brief and concise.\n\nProblem Solving Steps:\n- Think through your approach step by step\n- Write any functions and other code you need\n- Solve the task\n- Check that your solution is correct\n\nYou precisely follow the given Task and use the Data when provided. When Data is not provided, create some examples.\n","variables":[],"_type":"systemmessage"},{"content":"# Task\n\nYou are provided a markdown document `md` with julia language code blocks. Write a function `extract_julia_code` that extracts all the code blocks, removes code fences and joins the code blocks (if there are multiple) together with a newline. Return a String. Do not provide any examples.\n\n\n\n# Data\n\nextract_julia_code(\"\"\"```julia\nprintln(\"hello world\")\n```\"\"\")","variables":["task","data"],"_type":"usermessage"},{"content":"Here's a simple approach to extract Julia code blocks from Markdown files. The idea is that the code blocks in Markdown are enclosed between three backticks (`` ` `` `), followed by \"julia\" on the next line (for Julia code).\n\n```julia\nfunction extract_julia_code(md::String)\n    # Find start of julia code block\n    i = 1\n    blocks = []\n    \n    while true\n        # find next markdown code block\n        start = findnext(==(`\"`), md, i)\n        if start isa Nothing || stringview(md,start)[1:6] != \"```julia\"\n            break\n        end\n        \n        # Find closing ```\n        j = findnext(==(`\"`), md, start+3)\n        push!(blocks,md[start+3:j-1])\n        i = j + 1\n    end\n    \n    return join(blocks, \"\\n\")\nend\n```","status":200,"tokens":[221,229],"elapsed":13.533335833,"_type":"aimessage"}]